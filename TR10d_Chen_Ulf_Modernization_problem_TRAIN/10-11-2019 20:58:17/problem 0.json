{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            3338,
            2581,
            5711,
            551,
            1062,
            4018,
            644,
            2228,
            7191,
            1864,
            6138,
            5688,
            2712,
            2949,
            1741,
            3034,
            5236,
            346,
            4992,
            2515,
            4338,
            1444,
            4154,
            759,
            1659,
            3197,
            4689,
            2388,
            4816,
            2261,
            6634,
            4290,
            2141,
            3087,
            1231,
            6271,
            19,
            3920,
            1119,
            2944,
            5390,
            4364,
            5681,
            675,
            5297,
            6926,
            4305,
            4966,
            6674,
            2606,
            3179,
            2840,
            252,
            1184,
            5539,
            5155,
            2971,
            6134,
            2049,
            6088,
            1506,
            3274,
            627,
            2740,
            2783,
            5313,
            2765,
            227,
            3501,
            3349,
            3014,
            620,
            5203,
            5071,
            2186,
            5095,
            638,
            6181,
            4355,
            6020,
            7077,
            5472,
            5272,
            3287,
            5508,
            5765,
            7115,
            2045,
            7011,
            4388,
            5387,
            4974,
            3780,
            703,
            3019,
            3466,
            3744,
            4867,
            5384,
            4428,
            6247,
            3224,
            6156,
            4373,
            2053,
            608,
            2115,
            6610,
            1977,
            3956,
            3782,
            4350,
            1434,
            326,
            5029,
            3694,
            6574,
            2651,
            2888,
            5878,
            125,
            3290,
            1010,
            2287,
            6993,
            5863,
            5104,
            2353,
            123,
            647,
            2051,
            5356,
            3835,
            4411,
            4269,
            2607,
            6172,
            6874,
            2674,
            2240,
            552,
            186,
            7163,
            3394,
            581,
            1728,
            4686,
            606,
            3580,
            1431,
            6128,
            6992,
            5783,
            690,
            2517,
            2223,
            4987,
            5905,
            5610,
            2082,
            562,
            5845,
            6142,
            2348,
            6839,
            6289,
            3090,
            5780,
            5614,
            1287,
            4015,
            1609,
            5987,
            39,
            1237,
            132,
            2319,
            5243,
            3027,
            6699,
            7026,
            3954,
            2921,
            5199,
            1591,
            4048,
            3614,
            1681,
            5238,
            2549,
            6807,
            7021,
            2402,
            834,
            5315,
            3315,
            4745,
            6894,
            7195,
            5752,
            225,
            1723,
            3883,
            4243,
            3555,
            2512,
            3640,
            3420,
            1413,
            3445,
            1220,
            854,
            369,
            6184,
            3072,
            6253,
            5237,
            189,
            2593,
            1915,
            1296,
            6853,
            5484,
            1124,
            6749,
            4092,
            830,
            6233,
            1177,
            1494,
            6571,
            2028,
            5726,
            3833,
            6213,
            3412,
            4659,
            848,
            2314,
            4370,
            1541,
            1279,
            2663,
            2278,
            6526,
            3535,
            4078,
            1059,
            4255,
            5881,
            2811,
            4754,
            5951,
            3660,
            5823,
            3935,
            1419,
            3849,
            519,
            532,
            4800,
            4101,
            2144,
            2529,
            6518,
            5079,
            4169,
            2417,
            6062,
            4275,
            5289,
            4524,
            5496,
            2372,
            47,
            6420,
            3684,
            4383,
            4436,
            2359,
            6278,
            1378,
            1526,
            5548,
            3505,
            3065,
            548,
            4839,
            6973,
            5959,
            7078,
            3813,
            1189,
            4271,
            985,
            3631,
            4582,
            2202,
            313,
            5502,
            6830,
            4852,
            642,
            739,
            2304,
            5147,
            4748,
            7158,
            2109,
            6711,
            6044,
            3381,
            2828,
            3515,
            2443,
            1249,
            395,
            6865,
            3957,
            3086,
            3865,
            4107,
            989,
            1962,
            1738,
            3479,
            5811,
            3725,
            3491,
            5122,
            3045,
            4829,
            3305,
            2926,
            2464,
            2212,
            6343,
            5125,
            1602,
            5956,
            1848,
            1529,
            2655,
            116,
            365,
            5795,
            1291,
            6332,
            5709,
            1080,
            1355,
            4004,
            6320,
            3356,
            1068,
            2337,
            2533,
            6183,
            4776,
            4183,
            422,
            6895,
            5914,
            906,
            1710,
            3611,
            3709,
            6844,
            2401,
            2215,
            5963,
            678,
            6910,
            1401,
            3707,
            262,
            3485,
            809,
            4971,
            3188,
            4128,
            2649,
            3855,
            3367,
            815,
            590,
            6511,
            6959,
            4550,
            5035,
            4744,
            7173,
            2953,
            1427,
            3493,
            1194,
            1692,
            2536,
            3320,
            4507,
            3606,
            1360,
            4297,
            733,
            5808,
            4545,
            1912,
            2667,
            6026,
            3584,
            80,
            403,
            4597,
            2744,
            3024,
            5385,
            1716,
            3749,
            4716,
            7168,
            1471,
            4609,
            5077,
            680,
            1377,
            5046,
            3533,
            2940,
            1536,
            4648,
            1785,
            1906,
            6547,
            5955,
            5734,
            1327,
            4483,
            982,
            5455,
            805,
            5251,
            406,
            4531,
            1835,
            6978,
            4071,
            1342,
            2911,
            5364,
            1341,
            6248,
            6001,
            1123,
            801,
            1149,
            1251,
            7220,
            7091,
            3769,
            5002,
            2817,
            5897,
            6981,
            2504,
            5374,
            6466,
            4133,
            464,
            3400,
            598,
            6837,
            5561,
            3506,
            2282,
            5039,
            4160,
            5216,
            1782,
            3891,
            4930,
            5031,
            6272,
            1458,
            3252,
            1820,
            4602,
            4886,
            1525,
            2582,
            3337,
            1762,
            4899,
            4409,
            3577,
            1082,
            7169,
            2842,
            2850,
            1053,
            4570,
            6510,
            6218,
            6046,
            4173,
            504,
            4367,
            5909,
            1854,
            4151,
            4195,
            2901,
            4671,
            5361,
            1375,
            4942,
            6988,
            5949,
            6928,
            5767,
            6950,
            595,
            5864,
            5910,
            67,
            2323,
            3387,
            4175,
            2825,
            416,
            5542,
            5014,
            4807,
            3542,
            3048,
            7209,
            2925,
            1212,
            1542,
            4513,
            5643,
            503,
            2936,
            2707,
            6203,
            3504,
            2400,
            4670,
            281,
            2803,
            2182,
            3632,
            5242,
            4144,
            5459,
            1840,
            6560,
            3888,
            341,
            6257,
            6578,
            1944,
            447,
            1834,
            6619,
            6146,
            513,
            5270,
            964,
            2722,
            429,
            4860,
            6811,
            5979,
            6066,
            2503,
            1724,
            4129,
            163,
            2966,
            1917,
            3130,
            2381,
            1677,
            555,
            5479,
            5322,
            3566,
            636,
            2583,
            2468,
            4254,
            6219,
            142,
            4034,
            7176,
            4701,
            5158,
            5015,
            370,
            5007,
            6586,
            1893,
            1391,
            6037,
            1113,
            3286,
            1814,
            2839,
            4562,
            5171,
            2867,
            3838,
            4841,
            5576,
            908,
            1468,
            6817,
            4091,
            1942,
            968,
            2636,
            4139,
            7144,
            5921,
            5999,
            5026,
            2145,
            3402,
            3069,
            2782,
            1842,
            2691,
            3676,
            6982,
            3161,
            2069,
            1445,
            6709,
            568,
            373,
            1984,
            1029,
            3380,
            1523,
            2011,
            46,
            6482,
            1036,
            5005,
            1282,
            6804,
            6789,
            5716,
            3863,
            7041,
            4219,
            4323,
            5280,
            7013,
            1418,
            6353,
            682,
            6295,
            6810,
            1676,
            1808,
            3154,
            3212,
            1843,
            5163,
            2377,
            1299,
            4346,
            219,
            4519,
            6111,
            206,
            6012,
            2183,
            5441,
            2073,
            5096,
            6863,
            238,
            5115,
            5024,
            86,
            4093,
            4681,
            6555,
            4023,
            2429,
            7062,
            1351,
            1462,
            3675,
            5168,
            4820,
            6657,
            1727,
            2127,
            1364,
            6649,
            1266,
            615,
            4589,
            444,
            4155,
            4795,
            3136,
            6772,
            3794,
            3446,
            4707,
            6399,
            1159,
            1027,
            526,
            6552,
            4135,
            3510,
            3719,
            1703,
            5246,
            1472,
            4844,
            249,
            73,
            1994,
            3502,
            6469,
            873,
            1005,
            2608,
            1725,
            342,
            1048,
            6714,
            1276,
            6652,
            603,
            399,
            1940,
            1713,
            4655,
            1429,
            2092,
            569,
            1345,
            3119,
            768,
            1099,
            102,
            6237,
            938,
            2530,
            1638,
            6778,
            3971,
            1346,
            6617,
            2856,
            3723,
            3335,
            2859,
            1132,
            5044,
            5809,
            1708,
            2374,
            4235,
            3825,
            3705,
            4422,
            1185,
            3300,
            317,
            4281,
            5030,
            4424,
            635,
            5040,
            4982,
            3035,
            1631,
            211,
            5327,
            4211,
            5088,
            5396,
            4197,
            6755,
            6864,
            4485,
            6680,
            1852,
            4247,
            3832,
            2579,
            1402,
            4690,
            4267,
            1384,
            4786,
            6306,
            536,
            2802,
            6431,
            2643,
            3803,
            7081,
            4075,
            4347,
            2980,
            5776,
            6781,
            5365,
            2792,
            3919,
            1054,
            1731,
            479,
            1873,
            1460,
            7131,
            6712,
            6504,
            2276,
            3752,
            1353,
            2134,
            5478,
            4333,
            224,
            7022,
            5690,
            4864,
            2640,
            3990,
            7111,
            5980,
            1079,
            2079,
            1305,
            5330,
            518,
            2387,
            2777,
            2500,
            134,
            3426,
            4012,
            3924,
            2882,
            6991,
            6050,
            2143,
            499,
            3551,
            48,
            6748,
            3905,
            3625,
            113,
            2891,
            6972,
            5239,
            5179,
            2201,
            2456,
            567,
            6199,
            5872,
            2957,
            2735,
            1696,
            6626,
            5078,
            3806,
            1492,
            4061,
            3557,
            3875,
            2393,
            272,
            3051,
            3587,
            1309,
            3187,
            4163,
            3032,
            1076,
            6437,
            32,
            4389,
            5331,
            2030,
            5904,
            6363,
            2422,
            1737,
            2626,
            5874,
            3841,
            5162,
            1421,
            5033,
            1830,
            6461,
            5840,
            1199,
            2994,
            3475,
            4413,
            33,
            5777,
            4843,
            871,
            1656,
            5069,
            3095,
            2964,
            5523,
            431,
            1669,
            1210,
            1588,
            4920,
            1822,
            6460,
            6955,
            611,
            2780,
            4911,
            3209,
            143,
            1371,
            118,
            527,
            3102,
            2334,
            5442,
            4164,
            5611,
            1958,
            3481,
            3429,
            1038,
            1778,
            4538,
            3706,
            1872,
            5471,
            3215,
            2763,
            3945,
            1621,
            4758,
            4954,
            5064,
            3392,
            5671,
            5052,
            5859,
            2588,
            6057,
            6380,
            3171,
            1244,
            4857,
            4933,
            5635,
            2008,
            4983,
            4585,
            5291,
            7154,
            1133,
            4470,
            1190,
            6745,
            2328,
            136,
            1397,
            6266,
            2204,
            711,
            821,
            3783,
            668,
            3947,
            721,
            5102,
            781,
            5406,
            77,
            3458,
            1715,
            5267,
            4813
        ],
        "test": [
            6410,
            1590,
            3522,
            1662,
            2165,
            2944,
            3118,
            3318,
            2500,
            1139,
            6816,
            3916,
            7002,
            2761,
            4641,
            1196,
            5380,
            1453,
            1255,
            3083,
            4319,
            6012,
            1379,
            5650,
            3924,
            745,
            5081,
            7147,
            6450,
            451,
            4514,
            6512,
            4056,
            6300,
            6951,
            2623,
            1715,
            2090,
            7067,
            5286,
            6629,
            6333,
            4508,
            3037,
            6493,
            5179,
            4198,
            5389,
            1363,
            1941,
            1766,
            4184,
            156,
            4097,
            6897,
            2189,
            5820,
            1106,
            5488,
            2653,
            7181,
            4921,
            6667,
            5089,
            7159,
            1467,
            651,
            6040,
            5877,
            4681,
            5145,
            1926,
            873,
            2549,
            5017,
            3789,
            308,
            1003,
            1778,
            3435,
            554,
            5495,
            2563,
            5087,
            3327,
            3990,
            1237,
            806,
            4475,
            1900,
            1520,
            1460,
            3402,
            716,
            4721,
            3021,
            4303,
            6260,
            1065,
            192,
            4412,
            2657,
            2752,
            2396,
            1982,
            5745,
            5579,
            558,
            3517,
            1022,
            1597,
            1456,
            238,
            6933,
            2759,
            2714,
            4476,
            2644,
            4900,
            6446,
            6335,
            4875,
            2854,
            3634,
            6592,
            2824,
            4291,
            1979,
            1189,
            5106,
            1817,
            2194,
            3872,
            124,
            3289,
            2958,
            6461,
            3723,
            4911,
            3829,
            5064,
            3669,
            137,
            933,
            3081,
            4495,
            528,
            6205,
            6888,
            6232,
            3007,
            3099,
            4609,
            5613,
            4183,
            5443,
            6585,
            4658,
            3761,
            3213,
            6188,
            6946,
            3814,
            4153,
            2058,
            6729,
            3614,
            1675,
            2731,
            6623,
            888,
            1388,
            4021,
            3879,
            5415,
            534,
            4129,
            2702,
            2285,
            944,
            1042,
            4164,
            5038,
            1833,
            1840,
            2480,
            3953,
            2103,
            6574,
            3130,
            5996,
            3804,
            3688,
            1845,
            1688,
            6330,
            5248,
            2381,
            6813,
            6035,
            5721,
            5333,
            1831,
            172,
            1625,
            1270,
            982,
            1448,
            2369,
            1332,
            3472,
            3842,
            6895,
            5387,
            1526,
            1651,
            6249,
            6508,
            409,
            4382,
            6986,
            50,
            2631,
            29,
            170,
            6295,
            4634,
            7125,
            971,
            6211,
            700,
            6051,
            2041,
            4753,
            1238,
            3836,
            6683,
            287,
            2764,
            4228,
            5016,
            7229,
            4202,
            1461,
            2648,
            241,
            405,
            4579,
            5778,
            4002,
            3578,
            5774,
            2448,
            5619,
            2929,
            4008,
            5708,
            6637,
            5967,
            5903,
            6451,
            2568,
            6739,
            1865,
            5723,
            3374,
            326,
            2650,
            2196,
            2272,
            5939,
            5009,
            6382,
            4175,
            5852,
            6421,
            6644,
            683,
            2891,
            5944,
            4494,
            6862,
            2986,
            5890,
            2459,
            4390,
            3412,
            5024,
            1172,
            4013,
            6387,
            3010,
            4281,
            1220,
            2817,
            7080,
            2400,
            3555,
            684,
            276,
            3667,
            113,
            1528,
            5010,
            6049,
            1246,
            5279,
            413,
            7168,
            5126,
            4032,
            3167,
            1815,
            4376,
            3352,
            4992,
            4074,
            4796,
            1281,
            4085,
            6730,
            842,
            5013,
            1155,
            3951,
            6510,
            6638,
            4873,
            3388,
            401,
            317,
            693,
            4807,
            4511,
            1554,
            6083,
            3051,
            3286,
            5320,
            4733,
            5206,
            831,
            3957,
            2470,
            3307,
            4408,
            1669,
            5826,
            3479,
            1037,
            6679,
            2990,
            30,
            4307,
            148,
            2526,
            7083,
            5974,
            5960,
            2162,
            575,
            7076,
            6758,
            3865,
            1185,
            3776,
            2266,
            1624,
            4017,
            5612,
            6767,
            4357,
            6372,
            4345,
            2075,
            4498,
            2031,
            5753,
            4864,
            6752,
            3646,
            4999,
            1398,
            224,
            2753,
            2983,
            5058,
            6425,
            543,
            874,
            2214,
            5717,
            5238,
            1414,
            6712,
            6939,
            2535,
            1422,
            187,
            3018,
            3093,
            2703,
            3158,
            3894,
            5197,
            4748,
            3323,
            3528,
            4799,
            1984,
            191,
            1454,
            4642,
            695,
            2252,
            3054,
            6151,
            678,
            1751,
            4585,
            3375,
            5544,
            3904,
            3732,
            2378,
            2943,
            1746,
            2719,
            1523,
            6523,
            2539,
            5767,
            3964,
            3304,
            7072,
            6013,
            1615,
            3891,
            2172,
            3795,
            2087,
            6998,
            2921,
            1867,
            5666,
            2584,
            6979,
            5584,
            4663,
            6160,
            3439,
            5063,
            8,
            1916,
            2838,
            4422,
            4196,
            6941,
            4802,
            1192,
            6238,
            1835,
            5634,
            5436,
            938,
            5376,
            2887,
            5489,
            826,
            214,
            1643,
            5869,
            3733,
            6324,
            1063,
            3629,
            3019,
            7226,
            1812,
            65,
            3240,
            2830,
            2861,
            313,
            2797,
            3311,
            2462,
            2542,
            2423,
            6522,
            3726,
            1742,
            1749,
            2585,
            4320,
            3277,
            4849,
            527,
            1,
            2619,
            5680,
            2126,
            1086,
            4282,
            4590,
            6563,
            6972,
            7090,
            735,
            14,
            6956,
            1108,
            2293,
            1267,
            4358,
            5671,
            6779,
            5609,
            1284,
            4004,
            5914,
            5358,
            7062,
            2014,
            5594,
            3420,
            6228,
            2529,
            2805,
            1914,
            2948,
            1525,
            7214,
            2179,
            5291,
            4441,
            6843,
            291,
            4126,
            4034,
            847,
            6949,
            2905,
            6925,
            2223,
            6094,
            2450,
            5221,
            20,
            3587,
            2175,
            1341,
            499,
            2207,
            2799,
            1248,
            3994,
            4975,
            2279,
            3098,
            4724,
            470,
            7060,
            7027,
            6980,
            4938,
            4188,
            6240,
            1995,
            1870,
            5379,
            3039,
            3563,
            3357,
            3598,
            2738,
            4375,
            1790,
            1593,
            4978,
            2658,
            2501,
            3220,
            3648,
            2784,
            6280,
            6891,
            3335,
            6942,
            6707,
            713,
            2164,
            269,
            5023,
            3443,
            871,
            4967,
            4659,
            4389,
            3223,
            6071,
            4889,
            6202,
            6475,
            5990,
            6388,
            3884,
            2686,
            5445,
            912,
            247,
            4119,
            454,
            3585,
            3117,
            6509,
            6110,
            6990,
            4675,
            4823,
            6244,
            2235,
            2569,
            6792,
            5271,
            3700,
            4623,
            6867,
            4910,
            1087,
            2484,
            349,
            5575,
            2267,
            3073,
            4010,
            5176,
            125,
            5817,
            6938,
            5526,
            443,
            138,
            5267,
            3353,
            3698,
            7028,
            3657,
            6657,
            2429,
            5439,
            6209,
            4406,
            1529,
            3305,
            3608,
            6728,
            3480,
            1859,
            862,
            1939,
            5421,
            1513,
            6057,
            2635,
            3484,
            841,
            3251,
            36,
            2724,
            5395,
            917,
            5160,
            1531,
            6032,
            6932,
            2433,
            4697,
            3407,
            472,
            1961,
            4625,
            6824,
            1051,
            4755,
            1710,
            2615,
            462,
            3182,
            6134,
            6217,
            3775,
            2819,
            3303,
            7126,
            4979,
            818,
            5923,
            7163,
            4794,
            1278,
            6553,
            2815,
            6186,
            5631,
            4964,
            4933,
            2141,
            2626,
            2385,
            1083,
            3906,
            3892,
            5349,
            439,
            202,
            2782,
            3766,
            1718,
            993,
            4424,
            6928,
            388,
            5357,
            704,
            6190,
            5909,
            7047,
            5972,
            144,
            2876,
            6399,
            574,
            2262,
            5611,
            5917,
            3586,
            2913,
            5768,
            899,
            6723,
            2294,
            5958,
            4549,
            2000,
            6600,
            3570,
            3989,
            6863,
            3910,
            6705,
            98,
            4148,
            6453,
            496,
            1326,
            1726,
            5821,
            3526,
            1570,
            4189,
            1171,
            4958,
            1245,
            6544,
            4061,
            3955,
            2228,
            5324,
            381,
            6137,
            7129,
            5664,
            348,
            200,
            4528,
            2868,
            891,
            6485,
            6976,
            1564,
            2559,
            6931,
            3757,
            4500,
            4824,
            134,
            4661,
            539,
            5437,
            2672,
            1892,
            4472,
            2525,
            283,
            3457,
            2652,
            5314,
            5651,
            2949,
            1029,
            4209,
            6873,
            6619,
            3431,
            2426,
            1555,
            4203,
            608,
            5354,
            728,
            6423,
            4881,
            59,
            6492,
            6796,
            4273,
            140,
            3481,
            1772,
            6315,
            5292,
            6441,
            4365,
            2588,
            1601,
            286,
            875,
            3493,
            520,
            6913,
            533,
            1700,
            2587,
            6352,
            6749,
            1881,
            1352,
            2734,
            1421,
            6601,
            5782,
            3760,
            5269,
            6564,
            4743,
            1370,
            6825,
            3524,
            3262,
            9,
            3507,
            867,
            5799,
            597,
            2769,
            535,
            352,
            794,
            1826,
            6759,
            5550,
            2325,
            3551,
            5624,
            3954,
            4325,
            3783,
            6189,
            6814,
            725,
            1014,
            12,
            6328,
            914,
            6519,
            733,
            361,
            2122,
            3909,
            4942,
            2456,
            69,
            66,
            3450,
            7137,
            4348,
            2241,
            3628,
            2443,
            5019,
            6271,
            2402,
            5553,
            2579,
            1974,
            1551,
            1091,
            5287,
            5218,
            1206,
            6754,
            6098,
            6256,
            1666,
            2768,
            6212,
            5608,
            1262,
            152,
            509,
            6298,
            5362,
            3391,
            6968,
            240,
            1515,
            2026,
            621,
            893,
            2060,
            1977,
            980,
            532,
            6428,
            3075,
            4235,
            4987,
            6791,
            1484,
            5833,
            1940,
            6361,
            5455,
            4944,
            3066,
            6902,
            923,
            916,
            6252,
            4665,
            5933,
            311,
            5301,
            6393,
            260,
            3086,
            3097,
            2029,
            3883,
            834,
            6540,
            6783,
            6245,
            5963,
            6226,
            2457,
            1887,
            32,
            731,
            2516,
            5260,
            825,
            6292,
            5952,
            4925,
            2039,
            3156,
            4927,
            5359,
            3743,
            6183,
            7200,
            1668,
            3255,
            2033,
            2534,
            5556,
            2600,
            5737,
            3998,
            7192,
            1657,
            322,
            1045,
            6570,
            4595,
            572,
            4490,
            4685,
            4439,
            1595,
            233,
            5449,
            3320,
            7018,
            1953,
            6559,
            4312,
            5789
        ],
        "train": [
            3009,
            3225,
            2790,
            7176,
            6886,
            3874,
            5128,
            4284,
            4519,
            886,
            1444,
            892,
            7150,
            6406,
            5818,
            5851,
            5970,
            5410,
            506,
            2706,
            422,
            2767,
            5412,
            4700,
            4145,
            3878,
            6737,
            3440,
            3511,
            5653,
            1146,
            3786,
            6518,
            5151,
            2313,
            123,
            1477,
            3539,
            5997,
            1263,
            6050,
            4622,
            4618,
            6685,
            4030,
            636,
            4266,
            228,
            3144,
            383,
            4589,
            6030,
            310,
            5660,
            1333,
            2387,
            5094,
            4270,
            4715,
            4988,
            5454,
            5127,
            850,
            2637,
            3134,
            6883,
            7043,
            5840,
            1589,
            1356,
            5924,
            5220,
            1382,
            2442,
            4867,
            6880,
            6279,
            7091,
            4986,
            7026,
            6319,
            3049,
            4828,
            5524,
            3859,
            6869,
            1577,
            6316,
            750,
            890,
            4111,
            5427,
            2881,
            5433,
            1358,
            1134,
            5272,
            1244,
            3154,
            4935,
            5405,
            5453,
            4691,
            650,
            1054,
            3932,
            6109,
            7021,
            6400,
            492,
            2013,
            1694,
            2183,
            6084,
            2654,
            1202,
            312,
            5101,
            2800,
            514,
            6306,
            7121,
            2845,
            5850,
            5018,
            3128,
            3525,
            3978,
            4136,
            2003,
            1207,
            6225,
            6750,
            4121,
            1119,
            4810,
            7055,
            141,
            1676,
            5044,
            6272,
            7197,
            6533,
            6935,
            694,
            5829,
            4302,
            4531,
            3675,
            4952,
            747,
            2959,
            3764,
            6922,
            2916,
            6265,
            1556,
            2750,
            5842,
            453,
            2925,
            3120,
            5497,
            4645,
            2725,
            6052,
            4313,
            2934,
            4868,
            4040,
            2414,
            4416,
            1479,
            2533,
            6647,
            2061,
            821,
            4580,
            2950,
            6215,
            6145,
            6981,
            5835,
            1368,
            4556,
            924,
            1126,
            5290,
            5398,
            5906,
            4742,
            5235,
            285,
            6713,
            4620,
            551,
            1318,
            935,
            5693,
            2832,
            6250,
            4924,
            3582,
            4227,
            4042,
            1743,
            3817,
            5408,
            6566,
            4272,
            839,
            1592,
            4410,
            6529,
            919,
            3177,
            6645,
            1991,
            6273,
            3809,
            5234,
            5205,
            1596,
            4784,
            4190,
            1723,
            1074,
            6411,
            3299,
            5046,
            2089,
            6282,
            3280,
            1898,
            4484,
            2053,
            1184,
            3575,
            2507,
            350,
            6117,
            3617,
            5014,
            211,
            681,
            950,
            2555,
            4350,
            6474,
            482,
            507,
            6755,
            6680,
            4241,
            3273,
            998,
            6321,
            2518,
            3401,
            6795,
            2991,
            3355,
            418,
            4572,
            934,
            6111,
            7109,
            7167,
            6302,
            2080,
            5181,
            5297,
            1252,
            4362,
            3999,
            2114,
            2566,
            471,
            870,
            2195,
            7180,
            280,
            43,
            5950,
            5153,
            7202,
            4436,
            3345,
            4948,
            5322,
            5043,
            2338,
            1434,
            2493,
            2066,
            5133,
            1753,
            1493,
            1727,
            2109,
            966,
            1114,
            2492,
            6833,
            5302,
            2546,
            4600,
            5601,
            2143,
            3613,
            5756,
            3349,
            2468,
            5259,
            5228,
            5775,
            3752,
            5868,
            1963,
            1428,
            1506,
            5898,
            5504,
            4295,
            6394,
            1491,
            1519,
            4277,
            1392,
            2599,
            2379,
            5255,
            5028,
            1039,
            5329,
            6818,
            6593,
            2064,
            2927,
            4892,
            3485,
            3531,
            3031,
            7220,
            3792,
            5730,
            3506,
            7190,
            3550,
            606,
            1158,
            4541,
            4746,
            6989,
            329,
            6676,
            2150,
            823,
            614,
            5780,
            1173,
            6435,
            1468,
            2970,
            4006,
            6067,
            759,
            5987,
            5107,
            6955,
            1897,
            3611,
            6442,
            749,
            259,
            2811,
            3796,
            3400,
            3024,
            1542,
            2461,
            5620,
            753,
            6091,
            1298,
            1381,
            1466,
            4690,
            2668,
            4790,
            7143,
            5517,
            3331,
            1913,
            4430,
            3260,
            1236,
            5891,
            1930,
            6649,
            6259,
            4458,
            967,
            3777,
            1638,
            4176,
            689,
            5899,
            515,
            6724,
            5456,
            4485,
            1027,
            503,
            5343,
            6408,
            3606,
            5419,
            996,
            3067,
            5557,
            3189,
            3347,
            1400,
            1956,
            3857,
            2733,
            5304,
            1227,
            1703,
            5846,
            6898,
            3040,
            1708,
            3106,
            2871,
            1489,
            4450,
            3802,
            2277,
            4446,
            7088,
            3771,
            18,
            2583,
            6581,
            5463,
            1808,
            1616,
            6627,
            6947,
            7054,
            2108,
            4652,
            6722,
            6693,
            3959,
            6809,
            957,
            3169,
            1774,
            3278,
            5047,
            4969,
            17,
            6864,
            6449,
            7039,
            1661,
            2286,
            6532,
            1623,
            1968,
            7162,
            4311,
            1420,
            6839,
            6669,
            6014,
            86,
            7191,
            416,
            1269,
            2486,
            4107,
            1512,
            2859,
            2418,
            6307,
            4432,
            1485,
            4678,
            3915,
            3725,
            3136,
            3329,
            1976,
            7051,
            1239,
            4465,
            1714,
            3624,
            3707,
            6917,
            1071,
            5232,
            1934,
            712,
            1200,
            6480,
            4533,
            7017,
            2747,
            5244,
            5084,
            6429,
            1225,
            2885,
            4256,
            1730,
            920,
            2742,
            2746,
            5926,
            1682,
            344,
            341,
            1707,
            1463,
            4750,
            6889,
            6430,
            6672,
            6698,
            5092,
            1629,
            2435,
            687,
            76,
            6056,
            2851,
            4444,
            5836,
            4089,
            6243,
            1695,
            6914,
            3975,
            111,
            4217,
            5367,
            4552,
            2352,
            4426,
            3127,
            284,
            6264,
            3824,
            1179,
            6136,
            542,
            505,
            2001,
            7010,
            5975,
            6222,
            2350,
            4963,
            3718,
            5080,
            6769,
            3748,
            4696,
            3747,
            1440,
            2037,
            2010,
            1123,
            3164,
            4497,
            5098,
            2778,
            6844,
            5180,
            5316,
            3471,
            1451,
            570,
            3832,
            5859,
            836,
            1470,
            1763,
            1176,
            3108,
            150,
            5855,
            3704,
            6381,
            5662,
            3826,
            6987,
            1816,
            1599,
            3692,
            5655,
            4865,
            5697,
            5157,
            3139,
            2330,
            6943,
            7138,
            1408,
            6515,
            5370,
            3687,
            4573,
            4934,
            4538,
            5749,
            5994,
            1781,
            2498,
            3841,
            4936,
            2808,
            3610,
            6093,
            4459,
            7073,
            5764,
            4856,
            4236,
            1994,
            374,
            1852,
            2125,
            5352,
            2216,
            525,
            7057,
            7066,
            627,
            6575,
            2167,
            5576,
            6237,
            3583,
            3379,
            5670,
            1005,
            4457,
            580,
            3762,
            5188,
            7006,
            3055,
            1321,
            6560,
            4582,
            3185,
            1178,
            2084,
            2969,
            1186,
            1559,
            5765,
            6526,
            3008,
            3805,
            6501,
            5532,
            3532,
            2082,
            4163,
            766,
            6744,
            2775,
            5156,
            3741,
            6498,
            1070,
            4488,
            1483,
            4232,
            5484,
            6130,
            4142,
            1820,
            2315,
            3080,
            3685,
            4510,
            4315,
            632,
            5849,
            4734,
            2047,
            2106,
            3233,
            1497,
            5490,
            6881,
            1810,
            1964,
            3618,
            4305,
            3816,
            5761,
            3436,
            5209,
            2789,
            6500,
            1060,
            446,
            813,
            1322,
            1527,
            4995,
            338,
            424,
            2295,
            5327,
            3821,
            4644,
            1502,
            6587,
            3252,
            1023,
            6847,
            4558,
            2494,
            3589,
            3882,
            2643,
            3751,
            1755,
            5378,
            1110,
            3863,
            6010,
            4835,
            5487,
            639,
            1980,
            2062,
            1431,
            1598,
            858,
            5483,
            5511,
            1188,
            2365,
            4016,
            4360,
            5834,
            6020,
            275,
            6309,
            411,
            5707,
            1004,
            1075,
            2573,
            3562,
            3454,
            6520,
            3928,
            3330,
            3712,
            4409,
            5348,
            3366,
            4215,
            3647,
            2422,
            6031,
            204,
            4423,
            5144,
            6420,
            2105,
            78,
            1588,
            5086,
            1951,
            2227,
            1124,
            2210,
            5093,
            1404,
            4005,
            1279,
            657,
            5940,
            2952,
            5766,
            6551,
            3907,
            1567,
            724,
            6261,
            4894,
            5713,
            5529,
            2130,
            248,
            810,
            1553,
            1476,
            2730,
            1572,
            6965,
            3044,
            3290,
            1079,
            4667,
            5545,
            4101,
            6568,
            1241,
            2415,
            3950,
            253,
            2236,
            2697,
            1396,
            7174,
            896,
            5222,
            857,
            3142,
            5149,
            1653,
            2847,
            2320,
            5626,
            4787,
            6253,
            1582,
            4144,
            5062,
            3492,
            5610,
            3911,
            6963,
            3038,
            6950,
            5203,
            1546,
            5580,
            6028,
            2390,
            6132,
            92,
            406,
            2531,
            7228,
            4677,
            157,
            3861,
            1814,
            5816,
            6486,
            5476,
            3636,
            5032,
            2963,
            865,
            2954,
            4917,
            3211,
            6074,
            1549,
            5742,
            4780,
            6837,
            6896,
            1664,
            93,
            441,
            6878,
            1057,
            3827,
            3214,
            3722,
            5883,
            1724,
            1250,
            258,
            4509,
            2482,
            3674,
            1667,
            765,
            679,
            4587,
            3247,
            324,
            1010,
            2804,
            3324,
            6210,
            1797,
            7025,
            612,
            4306,
            762,
            1792,
            6266,
            293,
            357,
            1113,
            6138,
            1844,
            3596,
            4332,
            4378,
            2772,
            2574,
            5577,
            6531,
            2720,
            1658,
            5041,
            3581,
            5533,
            2302,
            2695,
            2307,
            2776,
            2575,
            5703,
            4550,
            3205,
            4243,
            2985,
            5045,
            3843,
            5461,
            7133,
            2997,
            4789,
            4751,
            4229,
            6851,
            5006,
            1105,
            6140,
            3540,
            2673,
            6607,
            4381,
            607,
            1395,
            1929,
            1842,
            3409,
            4326,
            6716,
            4635,
            2153,
            723,
            2007,
            6678,
            6339,
            4916,
            5500,
            4547,
            1474,
            1310,
            52,
            116,
            511,
            814,
            1729,
            1986,
            3660,
            1786,
            6774,
            4571,
            3234,
            6673,
            5803,
            232,
            764,
            5138,
            6113,
            2451,
            3823,
            5171,
            4693,
            1825,
            1286,
            2781,
            3313,
            2297,
            5982,
            3702
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "wdi.popurb.mi",
        "I(wdi.manuf.mi + wdi.servs.mi)",
        "wdi.sch2.mi",
        "log1p(wdi.mobp100)",
        "ios.gattwto"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10d_DENSE_Chen_Ulf_Modernization_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "auto_sklearn": [],
        "d3m": [
            "27126"
        ],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "auto_sklearn": {
            "f686883d-7f79-4cd6-a170-4f09a49fc2a5": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='cv',\n           resampling_strategy_arguments={'shuffle': False, 'folds': 10},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=30, tmp_folder=None)",
                "model": "AutoSklearnClassifier",
                "model_id": "f686883d-7f79-4cd6-a170-4f09a49fc2a5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/288f33d1-e389-413a-ba7e-f4ed298ddae1.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/97065172-5b8c-425d-a2d7-181a915b9dbb.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/058667e0-3392-4d5a-b8c9-76ec34ce8ed5.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/92c6525b-a919-484d-a7fe-bd1bbb76b623.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/21f79d11-bed6-4486-8d46-14eeef7ce88f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e82c1427-85ea-46f9-833e-5e98f85b92a9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c670dfe7-c2d4-41bc-870d-594762d63f1a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/599d13d8-34a6-453f-8505-3562ac459b07.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8e8e1766-2240-44b0-91a2-443ce2446cad",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "27126": {
                "created": "2019-11-10T23:26:39.427608+00:00",
                "details_url": "/d3m-service/stored-response/80ca36214431c210ee9c20afd74c0ee87117e746a53b16eda9f615cb",
                "hash_id": "80ca36214431c210ee9c20afd74c0ee87117e746a53b16eda9f615cb",
                "id": 27126,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:26:39.459666+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27126,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/b1ab365a-f9e3-4659-a039-c20afcc62b39.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/e8d277e1-b583-47dd-a72a-edc8c58a5f04.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/b75ba9a9-27c6-4401-9d7f-b79d4df6a176.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9798091650009155
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27134": {
                "created": "2019-11-10T23:26:40.657249+00:00",
                "details_url": "/d3m-service/stored-response/d0da35e2da7658e12f4efd378071da36fb7548abaa1e8ceb0ea289b4",
                "hash_id": "d0da35e2da7658e12f4efd378071da36fb7548abaa1e8ceb0ea289b4",
                "id": 27134,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:26:40.684476+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27134,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/f349c970-b17c-40d7-a3a7-64f86bfff898.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/dfa83066-b07b-4a58-9e26-6bed4a380993.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/5c6a127f-da13-40ba-adfa-75aa290bce0e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9798091650009155
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27160": {
                "created": "2019-11-10T23:26:50.678442+00:00",
                "details_url": "/d3m-service/stored-response/612bf0a39cab04ab033b648c39ef21482b93bed67e7dcbf502cda134",
                "hash_id": "612bf0a39cab04ab033b648c39ef21482b93bed67e7dcbf502cda134",
                "id": 27160,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:26:50.704381+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27160,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/c17b8dd1-3b7d-42ee-8ca9-0b6d4be051b5.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/005a8318-a071-4d83-9a65-545fa435b610.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/154dab88-11bc-483c-83dd-1b48f8f87963.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5090714931488037
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9930853247642517
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9210526347160339
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7191780805587769
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.807692289352417
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27162": {
                "created": "2019-11-10T23:26:51.753810+00:00",
                "details_url": "/d3m-service/stored-response/7ff8893bc890b734dda3306b012cd65954f81c83dc8410c2f55770d5",
                "hash_id": "7ff8893bc890b734dda3306b012cd65954f81c83dc8410c2f55770d5",
                "id": 27162,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:26:51.772308+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27162,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/4f1a92a3-3ecf-4d56-b20a-693a36fa8f3a.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/0e1bc480-ad36-455c-a3f4-ebe4a9457992.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/b451feda-b571-4217-b014-818faf8c02fc.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5090714931488037
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9965426623821259
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.960526317358017
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8595890402793884
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9038461446762085
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27194": {
                "created": "2019-11-10T23:27:11.182049+00:00",
                "details_url": "/d3m-service/stored-response/3ea9608c41a92419e293a25068b393cc76aedb77d50905416f5176b8",
                "hash_id": "3ea9608c41a92419e293a25068b393cc76aedb77d50905416f5176b8",
                "id": 27194,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:27:11.206788+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dcc9d5a3c32f13e68bf9fad2560d953d113205c2e1201d2de3c947e4421e5907",
                                    "id": "854727ed-c82c-3137-ac59-fd52bc9ba385",
                                    "name": "sklearn.preprocessing.data.RobustScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.robust_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00017328172828634983
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "52"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27194,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/b732c6cb-f501-44f1-93ee-4a4a1fa1a654.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/0536e1a8-1c18-45bd-a85a-116061b23abb.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/1b82b759-bbfb-467e-aba5-e27b5d2a2d9e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5226967692375183
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9910109043121338
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8091602921485901
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7260273694992065
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7653429508209229
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27196": {
                "created": "2019-11-10T23:27:11.895976+00:00",
                "details_url": "/d3m-service/stored-response/bd47f6fed03e643b84feadd729e2861de8f69d9bea0e244eaec8cf69",
                "hash_id": "bd47f6fed03e643b84feadd729e2861de8f69d9bea0e244eaec8cf69",
                "id": 27196,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:27:11.937066+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dcc9d5a3c32f13e68bf9fad2560d953d113205c2e1201d2de3c947e4421e5907",
                                    "id": "854727ed-c82c-3137-ac59-fd52bc9ba385",
                                    "name": "sklearn.preprocessing.data.RobustScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.robust_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00017328172828634983
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "52"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27196,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/399d55c0-3064-40aa-a7f8-8b00c8471758.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/5dde07a7-af39-4e72-bcf2-d88e7868ed4d.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/d600fcea-3e7d-41c1-ac1e-ef22e4aa4d32.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5226967692375183
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9955054521560669
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.904580146074295
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8630136847496033
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8826714754104614
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27228": {
                "created": "2019-11-10T23:27:28.185064+00:00",
                "details_url": "/d3m-service/stored-response/d73ad8c0b91fc67fae77077a762f5d39357bd221d9e6802c595b8f1e",
                "hash_id": "d73ad8c0b91fc67fae77077a762f5d39357bd221d9e6802c595b8f1e",
                "id": 27228,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:27:28.213492+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "19",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dcc9d5a3c32f13e68bf9fad2560d953d113205c2e1201d2de3c947e4421e5907",
                                    "id": "854727ed-c82c-3137-ac59-fd52bc9ba385",
                                    "name": "sklearn.preprocessing.data.RobustScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.robust_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27228,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/9d3ca1c7-d9da-4dc6-837d-9b6d6bfa97b5.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/87b37186-9ecf-4588-852a-6058131d6ff9.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/468f68c8-5273-45e2-87f6-7e69726b3048.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5234350502490998
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9910109043121338
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8091602921485901
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7260273694992065
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7653429508209229
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27232": {
                "created": "2019-11-10T23:27:29.089847+00:00",
                "details_url": "/d3m-service/stored-response/c08468a2b5c4ea8834d59d008631a45923c213683780aa933ed0b872",
                "hash_id": "c08468a2b5c4ea8834d59d008631a45923c213683780aa933ed0b872",
                "id": 27232,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:27:29.127389+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "20",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dcc9d5a3c32f13e68bf9fad2560d953d113205c2e1201d2de3c947e4421e5907",
                                    "id": "854727ed-c82c-3137-ac59-fd52bc9ba385",
                                    "name": "sklearn.preprocessing.data.RobustScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.robust_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27232,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/59a46b1b-4ee1-47d1-b8ca-310535e3e96e.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/bd2703e5-eb64-44ae-8756-391d23050f7c.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/411c48a8-8a47-4aed-8db1-e0e16155bf43.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5234350502490998
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9955054521560669
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.904580146074295
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8630136847496033
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8826714754104614
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27262": {
                "created": "2019-11-10T23:33:24.946418+00:00",
                "details_url": "/d3m-service/stored-response/fdd1349c9f77460512cde6d0f754eb8d3c667f4f2e4e3f56449e0ec7",
                "hash_id": "fdd1349c9f77460512cde6d0f754eb8d3c667f4f2e4e3f56449e0ec7",
                "id": 27262,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:33:24.964825+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "25",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27262,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/86548d03-50bb-403a-9811-b0646429c183.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/14a33daf-9fc2-4a70-bea4-716445592759.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/3e826955-0f3b-4fe3-b8bf-967c83b417ac.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5264857053756714
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9910109043121338
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8091602921485901
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7260273694992065
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7653429508209229
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27264": {
                "created": "2019-11-10T23:33:25.252166+00:00",
                "details_url": "/d3m-service/stored-response/8ec6b1953b7b24ae815eaae7290e5c6b78b7a8604626aa2b20e1da5f",
                "hash_id": "8ec6b1953b7b24ae815eaae7290e5c6b78b7a8604626aa2b20e1da5f",
                "id": 27264,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T23:33:25.280023+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "26",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27264,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/ee0faac6-2c48-4809-8011-407aa2361716.csv",
                    "test": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/4e4410cb-6fc3-437d-a537-6b6e9efc922f.csv",
                    "train": "/ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/temp/0dfda4e7-0495-4f2c-acfb-7a138768226b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5264857053756714
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9955054521560669
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.904580146074295
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8630136847496033
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8826714754104614
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "2bf9c9b4-5995-4c5f-bbc4-68fc287e87cf": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "2bf9c9b4-5995-4c5f-bbc4-68fc287e87cf",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/eb041851-9566-400d-90f9-3ddf74bbea1c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/92020f4a-8121-4dca-88e5-6b98d12e324d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/29c6c938-ece3-4dee-b22d-033aec50e435.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/26f8b788-a52a-463d-85ff-e80722c311bb.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f02a2cf5-f572-45da-936b-a82d3b0dec9d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/675db56e-bd75-403a-981f-1293ab47d2e7.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5a11afdb-e14e-4d98-876f-dba604e243c5.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/45c6de44-60c3-43f3-beeb-937f2afeba1a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6162715944354753
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9513207025307703
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.13732394366197184
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2671232876712329
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.18139534883720934
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "8c5d5347-46bb-4946-afe0-e9831f97abbf": {
                "description": "glm-unsupervised",
                "model": "glm-unsupervised",
                "model_id": "8c5d5347-46bb-4946-afe0-e9831f97abbf",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/699d7ff0-554b-4d67-9576-cc33f52efe59.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1b7e7209-69b0-4cac-b8e8-101372ceb9f4.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/05dd9db5-81a0-4801-8e67-48ad7ef02288.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3de7b374-fe14-4979-b0d4-ad59c736bbc4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/61ec3a13-5f34-4bd4-b16e-548cfb73c38e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b507792a-b721-4cac-96ef-819ae5ad02a6.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5414937017236879
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9493845941086987
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.06692913385826772
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.11643835616438356
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.08499999999999999
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "9510df99-303c-4cdd-916c-9bfa44b6193c": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "9510df99-303c-4cdd-916c-9bfa44b6193c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/406b57ed-8640-4e2b-90ff-737803388a0b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9a433df7-dbf7-4d45-95ca-3073b16750cf.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c3024a74-48e9-4a20-9e2b-b831502449e8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5e9cb675-f6f2-4501-a6e2-0b9e42f61d02.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/63c59254-4b73-4f80-9e38-865948dabc48.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/34991c45-620f-40e0-8916-b1f3f0ae4e0b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6285960112527915
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.942608214631448
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.12324929971988796
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.3013698630136986
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.17495029821073557
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "a82412c2-6af0-4a95-9b5d-f049c8d1dc17": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "a82412c2-6af0-4a95-9b5d-f049c8d1dc17",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e626efff-cb7d-4c17-ae19-fbd9d06dd422.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/51193a76-9037-4bed-aea7-b9a04a36fafe.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c634fc00-719e-4fb2-88ed-53830700b559.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/16f67e2a-065e-48e0-a24c-59ea34cd9db9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4b24cf8c-49a0-41f9-a029-3dcab3618995.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d17e87ce-fc9c-4ed7-9885-c1989ea06bab.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6426141471950194
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9372147697413913
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.1206896551724138
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.3356164383561644
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.17753623188405795
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "a9727a81-885c-46b7-ba95-6896d6ae0c1e": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "a9727a81-885c-46b7-ba95-6896d6ae0c1e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/20a2a9a4-4707-45c9-8ff2-dbfb5d08d31f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/de60001a-67f9-463c-8a00-bb95cb8e119b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/153d639c-b15f-4ccb-b74d-815d14fd60e2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fe5bd23d-004c-4bac-a9a6-f02e16e2b630.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dffe57ff-1ca8-4268-9f1b-3e691cec4acb.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/76a652ed-3586-4f64-ac42-b653cf80fd6e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9daf5f7a-b37e-43e3-bbd7-c8c8e0907b08.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3ee9a12e-1c90-4ab1-9401-f84885a7e70a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5883020272425827
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9753837643479464
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.313953488372093
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.18493150684931506
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.23275862068965517
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "e4b086d3-25a8-41db-a734-f33637fd45da": {
                "description": "drf-unsupervised",
                "model": "drf-unsupervised",
                "model_id": "e4b086d3-25a8-41db-a734-f33637fd45da",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/824bfc05-7d37-4959-b1f5-23ca897d96ab.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f4dca4b2-b1c4-426d-85ea-a1a0240c8942.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b01853d6-8a04-4227-897c-f85ed37f9b5a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b969ac47-aa5b-496d-9865-8424a44b9fe0.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ff56db49-2625-4dbf-9db9-bd194156fbe4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3de7f59c-ea31-4d99-b702-df2dc41a2d92.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6fd2daf4-bba0-4a37-9230-0e4949f701c4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d428828f-053f-40c6-ac04-dd52f8fc840c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.8670812347135083
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9695754390817314
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.375
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.7602739726027398
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5022624434389139
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            },
            "e857ad8e-8f16-49f9-ba98-1855eb198fde": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "e857ad8e-8f16-49f9-ba98-1855eb198fde",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/447ad43d-45a8-4e23-a25f-7f8410d9df0b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/813dbe82-db24-4909-a583-d797a00ec8c5.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/028b4533-2fb7-4bf3-9fcc-a4c1055fa2d7.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c4a44756-0fb3-47a4-ac01-f0b8bc0a0fa9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ff0c086a-8c80-4268-92e7-65ce5d7638f5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e404ee4f-a1eb-45f2-be21-aabea81d8f7c.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2251bf8a-baee-4fc1-bd39-6b281cd1f7fc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f708bbdb-64af-4dd1-bbf1-6a754e4c578b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6596629962974063
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9509058221546121
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.16613418530351437
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.3561643835616438
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.22657952069716772
                    }
                ],
                "search_id": "b96f364e-9efa-4ab8-b1c8-cbfe180f89e8",
                "system": "h2o"
            }
        },
        "mlbox": {
            "b03ffff9-792d-433f-9f76-b9d481a4745b": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "b03ffff9-792d-433f-9f76-b9d481a4745b",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/af415c9f-799b-44a6-8016-a265747ffd9d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b6385e1b-30f0-4812-90ba-870532cc853a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9c18ef4b-7599-4a0a-b118-3adf9e5d160a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e108f9b6-4922-41c7-8d9a-62d8155ceafe.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c3322d3-ee40-4a11-8d5a-520a7d63cdd7.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1776b8fd-473a-4795-ae91-37e7c019917b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c0ed328a-73fd-42f0-a0ea-5b0413d06953.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9db9b315-4360-4858-b60c-56bb7fafccfc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.49569547862268687
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9713732540450837
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "b8620e37-13a4-41a0-89d5-62050306da1e",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "01954da8-66a8-431e-a157-ca6d7612a837": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f59b1b3b8d0>",
                "model": "Xgboost",
                "model_id": "01954da8-66a8-431e-a157-ca6d7612a837",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/195d21ef-62bf-4832-9895-814796b7d871.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dc8fac93-5cb8-4cf0-8ba8-bbcf8b158a18.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4d047638-8aba-4d2f-ad47-6e3f8339d818.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f73378a4-5823-462d-a244-eeaaaa6a4aec.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e45be6b7-3d50-4664-be22-2814e56a2139.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/965e16dd-8357-4f2c-9f2d-273df8a7ea51.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2b666ec9-f784-47b1-a593-1adc57369ac1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7cd3fae6-0f87-4288-993b-430a9c2abdb7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "f882f308-8667-403d-9b3d-da7a8cc45818",
                "system": "mljar-supervised"
            },
            "a477d4bb-9d28-4b4d-8cc3-40f268987261": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f59b19fe470>",
                "model": "LightGBM",
                "model_id": "a477d4bb-9d28-4b4d-8cc3-40f268987261",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ba839177-0271-4bc8-b76b-ae5f9991750e.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fef31809-5296-4211-9307-8acd41603fe4.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a940b120-62df-4e8b-86b1-b26a8eb3c311.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/926c5035-bb10-45cd-b4e0-ced824899323.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c843f632-c7d1-4c34-9fc5-1c515ea42b48.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/63641ca7-1276-4220-9f76-eb900819eb86.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/06f89ef6-d423-40e1-8f0d-ff6f5139e850.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/54d245f9-066c-414d-aede-fe23ed5424ae.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "f882f308-8667-403d-9b3d-da7a8cc45818",
                "system": "mljar-supervised"
            },
            "c70cd827-72d6-4232-87c1-49964f545a54": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7f5950098f98>",
                "model": "Ensemble",
                "model_id": "c70cd827-72d6-4232-87c1-49964f545a54",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5e640ea9-deab-470e-b23f-9e824553b638.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d3837b0b-81b3-4d81-9fb0-07774677cb39.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/294b664a-2cbb-4f05-9482-6a7c04a24ed0.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aea5d572-d4d1-4e7a-a9e7-e96581c4f069.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c597efc3-9a96-4c97-97e9-e464fcadb9e9.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/91e6eb18-5e3c-46d5-8100-63c7277235d6.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "f882f308-8667-403d-9b3d-da7a8cc45818",
                "system": "mljar-supervised"
            },
            "e44a3bad-a016-4fe4-8110-177fc2e3f3b3": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f59b1b0e4a8>",
                "model": "Xgboost",
                "model_id": "e44a3bad-a016-4fe4-8110-177fc2e3f3b3",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08214ef7-eda1-4517-af06-ea647b521a1f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/18fcf060-a132-4354-a7db-495da50c3bd7.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bf0c7ca3-1c54-4e9b-b214-d80eded092f1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8fbf91b4-14de-4e02-825e-bca76af83a51.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e3bc7657-5229-49c5-8718-0283b9a7b2fe.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/df0d7b2b-21ff-4e61-a273-c62bc60b57b3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/232cc978-5b85-48e8-9662-261e661b1869.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/daa8232a-0625-4ed2-b3b0-c3fd7b9b493d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "f882f308-8667-403d-9b3d-da7a8cc45818",
                "system": "mljar-supervised"
            }
        },
        "rook": {},
        "tpot": {
            "df8787b4-8370-4c0d-8481-e08cae70eac6": {
                "description": "Pipeline(memory=None,\n     steps=[('xgbclassifier', XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=1.0, max_delta_step=0,\n       max_depth=5, min_child_weight=20, missing=None, n_estimators=100,\n       n_jobs=1, nthread=1, objective='binary:logistic', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=0.7500000000000001))])",
                "model": "Pipeline",
                "model_id": "df8787b4-8370-4c0d-8481-e08cae70eac6",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b47c9b7e-e106-4354-ba4e-6cc2692bc749.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ad8e6834-cc25-457e-9b70-c9f97e974f0c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_DENSE_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1668a4c9-0e57-4252-a7af-ade310875b40.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7101763f-636e-4fd7-a5ef-9cf8ac24b8e8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/test/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4a35f1b8-490a-4057-bfd2-6e13eda77cd5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3598a4f7-3a44-4f00-b116-ad78f7383d5f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/train/ws_500/2019-11-10_18-26-36/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cb4b4dff-1b31-41ae-b3ac-4c14fb38e9ae.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e8b97771-0a46-4984-a863-53d71d6a3940.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_DENSE_Chen_Ulf_Modernization/additional_inputs/partials/ws_500/2019-11-10_18-26-35/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4986592731675206
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9771815793112986
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "48898b57-81af-4d60-ac00-216dfd0cb003",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "mlbox": {
            "message": "search complete",
            "searchId": "b8620e37-13a4-41a0-89d5-62050306da1e",
            "thinking": false
        },
        "mljar-supervised": {
            "message": "search complete",
            "searchId": "f882f308-8667-403d-9b3d-da7a8cc45818",
            "thinking": false
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "unedited": true
}