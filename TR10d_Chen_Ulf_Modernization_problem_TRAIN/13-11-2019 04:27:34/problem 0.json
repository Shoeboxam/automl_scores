{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "indices": {
        "all": [
            6057,
            4819,
            5242,
            439,
            6551,
            5518,
            5993,
            1320,
            2539,
            3969,
            6647,
            5404,
            1237,
            2854,
            5224,
            3421,
            1506,
            235,
            7148,
            676,
            3325,
            8075,
            3657,
            564,
            1411,
            1546,
            4260,
            2817,
            4386,
            4668,
            4477,
            2746,
            821,
            453,
            5452,
            4156,
            4067,
            6676,
            2479,
            8160,
            3386,
            1856,
            5754,
            454,
            6082,
            1621,
            5847,
            5538,
            2047,
            816,
            3843,
            6572,
            6002,
            831,
            6327,
            4783,
            887,
            5128,
            7757,
            4587,
            7085,
            2992,
            2306,
            3857,
            7075,
            7547,
            29,
            471,
            1390,
            6257,
            3638,
            3593,
            2228,
            4285,
            7384,
            3917,
            742,
            1857,
            6027,
            1062,
            4715,
            1714,
            2795,
            892,
            1366,
            7743,
            2032,
            8109,
            6493,
            3517,
            8311,
            4272,
            7005,
            6147,
            7748,
            8043,
            6767,
            502,
            8049,
            8395,
            6405,
            1059,
            7378,
            3311,
            1404,
            2813,
            45,
            8348,
            3168,
            1516,
            3115,
            188,
            2923,
            7132,
            313,
            6659,
            5575,
            7034,
            1989,
            4880,
            6550,
            4465,
            241,
            5561,
            6400,
            3703,
            7621,
            6076,
            6267,
            785,
            2492,
            1601,
            1830,
            701,
            3412,
            2766,
            2836,
            1202,
            1658,
            4575,
            6446,
            4364,
            6072,
            1378,
            4665,
            374,
            4798,
            7815,
            2241,
            5038,
            5136,
            3559,
            8279,
            2681,
            6909,
            6690,
            3768,
            2552,
            786,
            5352,
            5280,
            3730,
            6049,
            5175,
            8208,
            2891,
            6258,
            1851,
            4279,
            5868,
            4721,
            7666,
            4296,
            749,
            5303,
            2804,
            1335,
            510,
            5287,
            7088,
            4888,
            4606,
            5113,
            6938,
            6584,
            4576,
            8024,
            835,
            5269,
            1602,
            962,
            6431,
            8240,
            1814,
            6192,
            4748,
            5602,
            7488,
            8185,
            8149,
            7099,
            501,
            2272,
            3183,
            6956,
            4472,
            4071,
            3748,
            6974,
            6640,
            7473,
            2669,
            2295,
            6324,
            3713,
            4183,
            904,
            2820,
            6588,
            8330,
            2584,
            2571,
            6861,
            905,
            2644,
            6598,
            3998,
            1763,
            5458,
            2651,
            1017,
            4682,
            8171,
            6843,
            6084,
            5781,
            5137,
            2763,
            6575,
            565,
            8188,
            4923,
            3887,
            6547,
            571,
            5092,
            1072,
            7070,
            739,
            7348,
            2809,
            4422,
            852,
            3883,
            4047,
            4579,
            1432,
            2793,
            5116,
            4419,
            2959,
            4242,
            6599,
            4799,
            7371,
            2544,
            2347,
            2535,
            7823,
            1573,
            6733,
            8350,
            2974,
            5430,
            6665,
            4433,
            6692,
            3548,
            8243,
            5244,
            3766,
            5985,
            4420,
            8048,
            5720,
            966,
            3350,
            7002,
            7136,
            1060,
            6499,
            2635,
            8213,
            1457,
            281,
            5283,
            7558,
            2938,
            6700,
            2354,
            3400,
            265,
            6322,
            6407,
            219,
            3599,
            5086,
            560,
            5887,
            2136,
            2863,
            6739,
            3608,
            3414,
            7487,
            1448,
            2409,
            6252,
            5591,
            5412,
            2995,
            5610,
            7142,
            858,
            5444,
            4314,
            2128,
            62,
            321,
            1799,
            7608,
            6626,
            4879,
            7258,
            5127,
            437,
            6693,
            7843,
            438,
            4087,
            7852,
            1793,
            838,
            8251,
            3000,
            8308,
            3460,
            2105,
            5422,
            5895,
            6913,
            255,
            4350,
            4609,
            6872,
            570,
            1568,
            4249,
            2556,
            4169,
            203,
            2244,
            4173,
            6489,
            603,
            3655,
            1150,
            6080,
            3544,
            5913,
            5253,
            6738,
            1813,
            2407,
            1825,
            5070,
            2195,
            2515,
            6730,
            7801,
            4511,
            5492,
            3508,
            7437,
            5302,
            6251,
            5576,
            4073,
            8216,
            5304,
            8128,
            3474,
            6679,
            6194,
            4238,
            4398,
            2266,
            4943,
            3195,
            3468,
            2789,
            1324,
            1769,
            7744,
            4466,
            7505,
            3035,
            1327,
            3865,
            4921,
            1285,
            6919,
            5627,
            4323,
            7527,
            6113,
            5057,
            1010,
            7682,
            5055,
            1550,
            7269,
            4654,
            5413,
            2054,
            7031,
            776,
            66,
            6930,
            6162,
            5103,
            7141,
            2180,
            1488,
            4351,
            2783,
            6610,
            3017,
            6763,
            4319,
            5357,
            3379,
            9,
            4297,
            4683,
            5961,
            1391,
            3563,
            5443,
            2318,
            2405,
            6762,
            1339,
            758,
            803,
            4023,
            3680,
            5022,
            6485,
            2457,
            7447,
            5432,
            111,
            4149,
            5122,
            1208,
            1162,
            4005,
            463,
            589,
            4752,
            2242,
            3362,
            1402,
            4964,
            4161,
            7496,
            6635,
            5101,
            1334,
            1834,
            3139,
            5842,
            4835,
            7546,
            1553,
            5592,
            722,
            2137,
            5053,
            147,
            4423,
            7617,
            4493,
            4127,
            814,
            2918,
            2604,
            2634,
            7096,
            5853,
            4527,
            476,
            4210,
            6115,
            2875,
            4800,
            4321,
            5143,
            4198,
            1579,
            690,
            886,
            499,
            1662,
            4662,
            5392,
            6580,
            8290,
            3615,
            68,
            3407,
            4265,
            4828,
            4882,
            5074,
            6250,
            6707,
            940,
            139,
            301,
            7498,
            8051,
            834,
            2434,
            4807,
            276,
            3021,
            6965,
            6038,
            4595,
            3475,
            1659,
            1344,
            2949,
            1225,
            6098,
            8105,
            6990,
            5350,
            3937,
            6548,
            8057,
            6752,
            1669,
            6056,
            2592,
            6592,
            4975,
            5065,
            6714,
            7534,
            5994,
            2697,
            6302,
            1200,
            4253,
            6686,
            622,
            7477,
            2464,
            5147,
            1284,
            2659,
            1483,
            4409,
            1362,
            1597,
            5408,
            1085,
            4911,
            4672,
            5570,
            923,
            5139,
            8131,
            5653,
            5579,
            4013,
            3852,
            5734,
            4025,
            4229,
            3229,
            7827,
            3745,
            5776,
            2533,
            1005,
            1086,
            587,
            6963,
            3649,
            4379,
            6470,
            4513,
            5902,
            2866,
            1097,
            975,
            6449,
            4789,
            1807,
            7807,
            1456,
            3354,
            6851,
            116,
            2362,
            1822,
            757,
            222,
            6491,
            4701,
            2786,
            1484,
            7987,
            7881,
            5486,
            903,
            6262,
            704,
            8133,
            1178,
            3662,
            7763,
            1802,
            4624,
            1325,
            7024,
            2003,
            3335,
            681,
            85,
            2053,
            3684,
            2756,
            4586,
            1518,
            2665,
            7253,
            3543,
            5260,
            4376,
            2258,
            2256,
            4793,
            6460,
            6240,
            5258,
            6591,
            3387,
            1064,
            2278,
            4645,
            6672,
            4634,
            7620,
            284,
            5973,
            7431,
            1766,
            1209,
            1037,
            6331,
            6419,
            7609,
            4154,
            5979,
            260,
            2035,
            7222,
            7734,
            7692,
            6941,
            6837,
            7975,
            3182,
            5721,
            4650,
            2739,
            3921,
            7178,
            7171,
            1120,
            5748,
            3881,
            1664,
            1976,
            7059,
            1962,
            5170,
            4192,
            2723,
            1698,
            1348,
            8015,
            2658,
            3055,
            5651,
            7385,
            7512,
            5015,
            585,
            4628,
            4690,
            4427,
            3081,
            2845,
            1571,
            756,
            382,
            6877,
            6750,
            2277,
            2933,
            1018,
            2652,
            3433,
            5623,
            5310,
            3546,
            7370,
            2849,
            4660,
            7,
            7445,
            3941,
            7311,
            2419,
            2239,
            3786,
            8372,
            8084,
            2505,
            2641,
            6176,
            94,
            2596,
            4821,
            305,
            262,
            4973,
            4064,
            7086,
            1943,
            5846,
            6045,
            1536,
            8147,
            274,
            4942,
            951,
            49,
            5428,
            7098,
            1831,
            8196,
            1331,
            6399,
            39,
            1607,
            6277,
            7165,
            4258,
            106,
            4822,
            5110,
            4303,
            2368,
            3215,
            6285,
            1732,
            2312,
            3995,
            4361,
            5696,
            3273,
            7561,
            4997,
            1304,
            4021,
            6885,
            213,
            5068,
            8217,
            7775,
            6123,
            2271,
            2642,
            2127,
            5605,
            2036,
            159,
            7015,
            2525,
            5102,
            2548,
            7025,
            6457,
            7442,
            2364,
            6923,
            5984,
            2981,
            7687,
            1087,
            875,
            3935,
            626,
            2059,
            3550,
            2694,
            2825,
            1054,
            4038,
            4742,
            2603,
            6908,
            8277,
            7304,
            3124,
            2950,
            5336,
            7300,
            1738,
            479,
            7220,
            7147,
            6989,
            2583,
            5399,
            5060,
            1047,
            2753,
            486,
            6671,
            1557,
            6696,
            1290,
            3247,
            1232,
            2389,
            716,
            7917,
            3122,
            4514,
            4022,
            5820,
            4590,
            4677,
            212,
            2421,
            4507,
            5429,
            1163,
            1354,
            4060,
            8360,
            80,
            2190,
            2193,
            853,
            6437,
            8173,
            1105,
            7913,
            6841,
            4653,
            8346,
            7672,
            2519,
            6634,
            4981,
            3015,
            7281,
            1184,
            6905,
            254,
            596,
            7068,
            3388,
            2565,
            3540,
            286,
            1093,
            5229,
            4988,
            1111,
            6083,
            1289,
            5459,
            4211,
            2693,
            1544,
            792,
            6220,
            2284,
            1533,
            5378,
            6256,
            485,
            7714,
            5319,
            6031,
            7155,
            2325,
            3639,
            6293,
            457,
            7224,
            2210,
            1218,
            980,
            7526,
            190,
            6171,
            699,
            4057,
            258,
            7491,
            957,
            5257,
            2222,
            1635,
            5519,
            3052,
            2920,
            4206,
            6616,
            6136,
            4134,
            6479,
            1953,
            1672,
            4503,
            8229,
            6760,
            2155,
            7920,
            5884,
            2877,
            277,
            1009,
            7335,
            3735,
            4884,
            3751,
            3989,
            4770,
            2113,
            2537,
            466,
            1660,
            3394,
            2212,
            2828,
            2337,
            4781,
            3541,
            290,
            4410,
            7520,
            8140,
            4509,
            7472,
            3711,
            8302,
            7417,
            3277,
            6681,
            2463,
            6719,
            4080,
            3103,
            3492,
            3574,
            4499,
            1460,
            4989,
            5616,
            3121,
            2437,
            4388,
            8148,
            2166,
            6557,
            1425,
            6713,
            8362
        ],
        "test": [
            7191,
            6861,
            6967,
            7046,
            7185,
            7009,
            6922,
            7140,
            7162,
            6893,
            6958,
            7136,
            7224,
            6994,
            7041,
            7085,
            6931,
            7010,
            7083,
            7219,
            7134,
            6884,
            6877,
            7042,
            6906,
            7137,
            6919,
            7111,
            7145,
            7204,
            7153,
            6766,
            7184,
            6765,
            7094,
            6870,
            6868,
            7197,
            6995,
            6991,
            6907,
            6862,
            7212,
            7181,
            7167,
            7131,
            6974,
            6914,
            7126,
            7077,
            6904,
            6943,
            7056,
            6843,
            7182,
            7082,
            7183,
            7174,
            6965,
            6774,
            7186,
            7165,
            7147,
            6852,
            7166,
            7227,
            7052,
            6845,
            7121,
            6885,
            7068,
            6912,
            6887,
            7152,
            7092,
            7104,
            6878,
            7035,
            6983,
            7217,
            7019,
            7122,
            7108,
            7081,
            6764,
            7200,
            6770,
            6978,
            6945,
            6915,
            7017,
            7143,
            6988,
            7135,
            6892,
            6932,
            7033,
            7156,
            7050,
            7014,
            7107,
            7124,
            7201,
            7075,
            7002,
            6873,
            6755,
            7097,
            7133,
            6929,
            6948,
            6979,
            6759,
            6763,
            7105,
            6973,
            7036,
            7029,
            7072,
            6834,
            6981,
            7065,
            6913,
            7054,
            7198,
            7150,
            7101,
            6768,
            7209,
            7073,
            7149,
            7195,
            6966,
            7040,
            6946,
            6757,
            7148,
            6952,
            7168,
            7206,
            7161,
            6930,
            6942,
            6883,
            7120,
            7211,
            7003,
            6993,
            7159,
            6933,
            7205,
            6950,
            7032,
            7199,
            6849,
            6896,
            6856,
            7215,
            6984,
            6882,
            6835,
            7213,
            6863,
            6940,
            7067,
            6986,
            6939,
            6909,
            7157,
            7218,
            6970,
            6853,
            7030,
            7058,
            7187,
            7139,
            6935,
            7175,
            7031,
            6953,
            7049,
            6864,
            7203,
            6997,
            7222,
            7059,
            6908,
            7020,
            7024,
            6934,
            7129,
            6767,
            7158,
            7109,
            7155,
            6971,
            6839,
            6872,
            7127,
            7103,
            7194,
            6753,
            7220,
            6771,
            7071,
            7160,
            7087,
            7190,
            7177,
            6968,
            6916,
            6860,
            7230,
            6854,
            7053,
            7074,
            7216,
            7225,
            6844,
            7086,
            6756,
            7091,
            6898,
            6869,
            7141,
            6937,
            7084,
            6857,
            7112,
            7088,
            6962,
            7223,
            7128,
            6917,
            6889,
            7013,
            7005,
            6961,
            6772,
            6918,
            6959,
            7123,
            7210,
            6977,
            7110,
            6956,
            6866,
            6951,
            6910,
            7043,
            7130,
            6875,
            7226,
            7202,
            6941,
            6867,
            6846,
            7102,
            7004,
            7016,
            7208,
            6891,
            7047,
            6773,
            6881,
            7180,
            6976,
            7229,
            6990,
            6832,
            6769,
            7007,
            7048,
            7196,
            6880,
            7079,
            6921,
            7038,
            6982,
            6969,
            6927,
            7176,
            7146,
            6905,
            6938,
            7028,
            6925,
            7051,
            7023,
            7193,
            7001,
            6758,
            6923,
            7142,
            7170,
            7078,
            6949,
            6874,
            7172,
            6838,
            6855,
            7015,
            6998,
            6975,
            6996,
            6911,
            7034,
            6894,
            7027,
            6890,
            6985,
            7026,
            6960,
            7008,
            7221,
            6762,
            6924,
            7055,
            7173,
            7171,
            6957,
            7113,
            6836,
            7106,
            7228,
            6936,
            6837,
            7154,
            7057,
            6879,
            6871,
            6858,
            6833,
            6876,
            7178,
            7021,
            6865,
            6928,
            7000,
            6754,
            6761,
            7080,
            6847,
            7207,
            7025,
            6963,
            6920,
            7006,
            6895,
            7163,
            7076,
            7144,
            7138,
            6926,
            6980,
            6947,
            6987,
            7037,
            7070,
            7045,
            6989,
            6848,
            6851,
            6955,
            6842,
            7011,
            6841,
            7214,
            6944,
            7132,
            6760,
            7151,
            6888,
            6859,
            6964,
            7069,
            6840,
            7018,
            6897,
            7179,
            6972,
            7098,
            7039,
            7064,
            7189,
            7125,
            7022,
            7095,
            7192,
            6992,
            7164,
            7044,
            7066,
            7099,
            6775,
            7100,
            7119,
            6886,
            7096,
            6999,
            7093
        ],
        "train": [
            3272,
            5062,
            3409,
            6031,
            3726,
            925,
            625,
            7,
            2002,
            4657,
            674,
            6192,
            1049,
            1308,
            4766,
            2638,
            5258,
            2053,
            4922,
            2802,
            1083,
            5303,
            3269,
            5545,
            963,
            139,
            1450,
            5454,
            4474,
            3917,
            4204,
            3278,
            1134,
            2709,
            3700,
            4071,
            232,
            1966,
            2334,
            5682,
            265,
            5961,
            3475,
            3784,
            3810,
            5725,
            1643,
            3886,
            833,
            1446,
            5891,
            2118,
            603,
            5616,
            2730,
            4126,
            293,
            3006,
            6169,
            1768,
            1635,
            4802,
            5155,
            3375,
            1579,
            1719,
            351,
            5330,
            2951,
            280,
            4022,
            3940,
            5172,
            3485,
            2592,
            1854,
            3374,
            1577,
            3673,
            1678,
            4117,
            1546,
            3250,
            4150,
            1029,
            3115,
            2258,
            4716,
            3366,
            6115,
            3605,
            5592,
            6200,
            2675,
            860,
            3081,
            2953,
            5245,
            5990,
            2908,
            4530,
            4396,
            3273,
            5904,
            5433,
            1422,
            5847,
            202,
            4411,
            1041,
            1835,
            772,
            3712,
            2595,
            1152,
            5977,
            4777,
            4138,
            6728,
            890,
            4811,
            2778,
            5941,
            3469,
            1736,
            4479,
            5578,
            616,
            6271,
            693,
            391,
            359,
            2780,
            679,
            4645,
            6266,
            5028,
            3606,
            4438,
            1448,
            5899,
            2575,
            4965,
            2286,
            6114,
            4599,
            4650,
            3868,
            624,
            1228,
            3844,
            1452,
            4560,
            4494,
            2866,
            3135,
            3062,
            2649,
            1953,
            1582,
            2289,
            5746,
            51,
            3418,
            5337,
            2671,
            466,
            5999,
            1397,
            1776,
            2284,
            3622,
            2439,
            4679,
            5248,
            1649,
            5563,
            6402,
            2855,
            4740,
            4435,
            3380,
            2824,
            5589,
            1221,
            1242,
            3010,
            670,
            5652,
            4923,
            6685,
            1138,
            4044,
            5588,
            1200,
            2930,
            2933,
            930,
            4569,
            5826,
            3999,
            3490,
            1170,
            3306,
            1876,
            2379,
            2527,
            5114,
            2972,
            2558,
            2475,
            2577,
            1540,
            2415,
            211,
            5065,
            5743,
            1289,
            6449,
            2847,
            4706,
            2029,
            2347,
            3893,
            1424,
            1927,
            6594,
            3976,
            92,
            1746,
            1616,
            1418,
            5488,
            2900,
            5611,
            1764,
            4039,
            5944,
            2926,
            153,
            618,
            4881,
            1938,
            3626,
            2149,
            2643,
            4333,
            3762,
            1997,
            314,
            943,
            445,
            366,
            810,
            1340,
            1992,
            4931,
            1633,
            1515,
            3345,
            3616,
            1036,
            5026,
            4990,
            3938,
            1702,
            141,
            6676,
            6411,
            3778,
            5349,
            2220,
            2679,
            2346,
            996,
            3218,
            3123,
            5504,
            2248,
            4063,
            5364,
            5998,
            1153,
            2623,
            3267,
            4222,
            557,
            5008,
            2105,
            1305,
            2917,
            1872,
            1609,
            2117,
            3176,
            4513,
            5609,
            1161,
            5959,
            1199,
            3954,
            4549,
            580,
            1238,
            6190,
            6508,
            5288,
            2432,
            6459,
            5982,
            4667,
            4427,
            6194,
            5985,
            6700,
            5442,
            4936,
            1929,
            2111,
            944,
            4473,
            3525,
            5001,
            223,
            2739,
            6442,
            1244,
            3539,
            1149,
            5481,
            2731,
            1335,
            5287,
            3863,
            858,
            3352,
            5992,
            6320,
            5735,
            5576,
            2940,
            256,
            2691,
            1808,
            6705,
            745,
            13,
            870,
            782,
            5375,
            2430,
            3636,
            5176,
            1737,
            24,
            4580,
            1557,
            3520,
            5548,
            6302,
            2552,
            1285,
            1975,
            3542,
            6454,
            4077,
            714,
            3675,
            3765,
            5445,
            2874,
            1566,
            1469,
            178,
            5250,
            4882,
            4979,
            5850,
            2107,
            699,
            4820,
            5625,
            1187,
            1417,
            3912,
            3593,
            5305,
            311,
            2428,
            1810,
            4124,
            761,
            721,
            5978,
            3305,
            1714,
            3922,
            5230,
            6480,
            6743,
            4308,
            4301,
            2242,
            2805,
            5417,
            4192,
            5631,
            3982,
            6744,
            3271,
            505,
            3049,
            5595,
            6549,
            1377,
            2011,
            2835,
            1381,
            4681,
            2898,
            4379,
            1809,
            4862,
            4122,
            3706,
            912,
            2473,
            5131,
            5783,
            5177,
            2850,
            1762,
            2366,
            180,
            1996,
            3910,
            2411,
            4818,
            5919,
            6049,
            6108,
            4416,
            3968,
            4987,
            2213,
            1129,
            328,
            6167,
            6642,
            167,
            6416,
            1179,
            1637,
            4327,
            6448,
            3677,
            3598,
            3874,
            2966,
            5409,
            6307,
            187,
            1877,
            165,
            5291,
            2158,
            4884,
            5952,
            3601,
            266,
            2016,
            4354,
            4863,
            6485,
            3231,
            2740,
            1304,
            1751,
            1834,
            2101,
            1182,
            5292,
            5568,
            2517,
            1286,
            1420,
            3613,
            5391,
            456,
            2371,
            799,
            621,
            6596,
            5942,
            2651,
            3342,
            2541,
            5040,
            4045,
            380,
            2524,
            1204,
            5772,
            4446,
            2186,
            245,
            3438,
            6491,
            2665,
            2391,
            275,
            2474,
            2621,
            182,
            3343,
            2125,
            4280,
            1704,
            3321,
            4191,
            5342,
            6446,
            1371,
            6683,
            6007,
            1964,
            3777,
            4337,
            1412,
            1550,
            5968,
            4441,
            4520,
            2409,
            4944,
            3796,
            4773,
            2814,
            3524,
            2488,
            4267,
            5348,
            6694,
            1174,
            1694,
            2271,
            3378,
            4855,
            1019,
            3091,
            1366,
            4406,
            300,
            5628,
            753,
            6604,
            2181,
            1931,
            598,
            3300,
            3355,
            3289,
            2660,
            6297,
            1202,
            3579,
            3464,
            2361,
            5969,
            118,
            4228,
            3284,
            335,
            6053,
            5765,
            5559,
            4476,
            1240,
            6095,
            5152,
            2110,
            3282,
            692,
            2716,
            5594,
            4009,
            4328,
            4556,
            2789,
            3407,
            3585,
            2243,
            5643,
            1651,
            3379,
            6301,
            2000,
            5493,
            998,
            3420,
            3386,
            490,
            3981,
            3285,
            1813,
            1711,
            6414,
            4512,
            1725,
            106,
            6406,
            5313,
            1434,
            4614,
            6561,
            4834,
            5093,
            5510,
            5523,
            6197,
            3592,
            5285,
            3074,
            6633,
            338,
            2418,
            91,
            2759,
            5911,
            4917,
            4656,
            1347,
            4315,
            4629,
            3248,
            6415,
            3943,
            2842,
            1733,
            4358,
            229,
            1576,
            4409,
            3157,
            3543,
            806,
            1291,
            6308,
            4142,
            5796,
            4120,
            5554,
            2180,
            6254,
            1325,
            2853,
            663,
            3334,
            312,
            6456,
            3965,
            4255,
            737,
            5855,
            6745,
            2927,
            3101,
            4306,
            571,
            4285,
            3297,
            3846,
            4921,
            5544,
            6648,
            4296,
            6620,
            3757,
            6628,
            159,
            4789,
            1317,
            593,
            2466,
            6557,
            1937,
            3100,
            5507,
            3147,
            1773,
            1693,
            6331,
            3586,
            5770,
            289,
            5707,
            3219,
            5089,
            1807,
            5502,
            462,
            4157,
            465,
            5701,
            2829,
            1062,
            567,
            4585,
            2203,
            2174,
            6709,
            4970,
            3311,
            4081,
            2632,
            4824,
            5156,
            5895,
            1368,
            4613,
            5005,
            2542,
            5410,
            2163,
            307,
            1743,
            814,
            2013,
            1435,
            5377,
            5632,
            6300,
            6159,
            2721,
            4646,
            2437,
            4632,
            2895,
            1873,
            1754,
            3790,
            566,
            1782,
            4060,
            2223,
            4034,
            4509,
            5132,
            1099,
            6432,
            6335,
            3977,
            3137,
            897,
            2672,
            5411,
            1293,
            6506,
            608,
            3391,
            5684,
            1968,
            5425,
            1617,
            2385,
            5396,
            4326,
            4851,
            1156,
            2945,
            2043,
            6113,
            6010,
            5630,
            6634,
            3804,
            1763,
            4130,
            5438,
            3384,
            1346,
            355,
            273,
            1681,
            4517,
            5653,
            2684,
            5741,
            4353,
            3245,
            562,
            1504,
            1081,
            4376,
            926,
            5387,
            3310,
            5170,
            4518,
            5689,
            4087,
            682,
            5720,
            2585,
            1235,
            5379,
            1820,
            2666,
            5354,
            4156,
            3656,
            2177,
            4966,
            5688,
            5022,
            4694,
            3931,
            3827,
            3971,
            6158,
            1028,
            4697,
            6098,
            6463,
            5681,
            4016,
            2222,
            6255,
            176,
            138,
            1079,
            4804,
            3398,
            5542,
            1564,
            683,
            4384,
            6704,
            3546,
            5018,
            2976,
            742,
            4015,
            4286,
            2018,
            5547,
            1189,
            3216,
            2175,
            4159,
            687,
            1107,
            1323,
            3651,
            585,
            4763,
            6023,
            6404,
            1246,
            1817,
            6052,
            5774,
            5755,
            2856,
            6502,
            2042,
            185,
            933,
            1313,
            851,
            5046,
            2834,
            5532,
            5620,
            3011,
            922,
            6626,
            3395,
            231,
            2405,
            5146,
            3381,
            5134,
            2165,
            2413,
            4283,
            5367,
            5144,
            2215,
            914,
            2228,
            4734,
            2306,
            1608,
            2354,
            2240,
            1176,
            3102,
            6706,
            4154,
            3570,
            2194,
            2603,
            313,
            2310,
            215,
            6455,
            27,
            6081,
            3128,
            4743,
            1398,
            262,
            4026,
            221,
            2969,
            4892,
            3344,
            4554,
            4920,
            3486,
            934,
            302,
            3359,
            4904,
            1598,
            2767,
            2864,
            4381,
            4486,
            4655,
            4993,
            5716,
            2480,
            6712,
            1957,
            4906,
            3597,
            2667,
            3563,
            2520,
            6066,
            1113,
            5092,
            3198,
            6713,
            887,
            4605,
            5516,
            1586,
            481,
            5355,
            1642,
            727,
            1463,
            945,
            6691,
            4282,
            2469,
            3701,
            3001,
            4094,
            34,
            1781,
            3718,
            1552,
            3118,
            6519,
            5877,
            4644,
            4311,
            4926,
            3682,
            4079,
            4807,
            4019,
            6739,
            4668,
            4399,
            6139,
            5413,
            2994,
            849,
            1861,
            1311,
            4339,
            5500,
            2970,
            2217,
            6467,
            6507,
            5071,
            3859,
            5808,
            3721,
            345,
            4403,
            79,
            3232,
            4541
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "wdi.popurb.mi",
        "I(wdi.manuf.mi + wdi.servs.mi)",
        "wdi.sch2.mi",
        "log1p(wdi.mobp100)",
        "ios.gattwto"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10d_Chen_Ulf_Modernization_problem_TRAIN",
    "scoreOptions": {
        "evaluationMethod": "kFold",
        "folds": 10,
        "splitsFile": "dataSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "searchOptions": {
        "solutionsLimit": 5,
        "timeBoundSearch": 10
    },
    "selectedSolutions": {
        "d3m": [
            "29279"
        ],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "d3m": {
            "29219": {
                "created": "2019-11-13T09:18:19.478139+00:00",
                "details_url": "/d3m-service/stored-response/4467ed6eb7d0fb701bf1a13f64cf56aeb64387b49ba9f55260e59e37",
                "hash_id": "4467ed6eb7d0fb701bf1a13f64cf56aeb64387b49ba9f55260e59e37",
                "id": 29219,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:18:19.502608+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29219,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/961b500c-fd78-446f-86a5-c16a82407350.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/19167ee6-7145-4cb8-a8db-e0942f075d73.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9798091650009155
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29227": {
                "created": "2019-11-13T09:18:20.694145+00:00",
                "details_url": "/d3m-service/stored-response/e67f780e84b756c9bb091744b7302eb49366ea916a656e6622e7b3dc",
                "hash_id": "e67f780e84b756c9bb091744b7302eb49366ea916a656e6622e7b3dc",
                "id": 29227,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:18:20.791394+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29227,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/087173ea-acba-48df-aaf5-528161a0cc64.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/d67ddb08-5495-4c07-af38-e52f777346dc.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9798091650009155
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29247": {
                "created": "2019-11-13T09:18:30.521601+00:00",
                "details_url": "/d3m-service/stored-response/f2e716229f79e374fd261db069013b1664fd3fa929fbe278b3a4d152",
                "hash_id": "f2e716229f79e374fd261db069013b1664fd3fa929fbe278b3a4d152",
                "id": 29247,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:18:30.551870+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29247,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/3b5545c9-3dac-45ae-bcec-105b67b81b2a.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/c992a11f-6173-441d-9d44-cfdeedbc1787.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5090714931488037
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9930853247642517
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9210526347160339
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7191780805587769
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.807692289352417
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29251": {
                "created": "2019-11-13T09:18:31.979383+00:00",
                "details_url": "/d3m-service/stored-response/7cc1b81d085543df217740ac09fface0ab13657e2b3ef4701534d831",
                "hash_id": "7cc1b81d085543df217740ac09fface0ab13657e2b3ef4701534d831",
                "id": 29251,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:18:32.005027+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29251,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/327b77f9-7037-4554-9aa3-73f83fc8f0e0.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/2bd91f5d-4a23-4e3d-8061-b75ba27a771b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5090714931488037
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9930853247642517
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9210526347160339
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7191780805587769
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.807692289352417
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29275": {
                "created": "2019-11-13T09:19:31.810265+00:00",
                "details_url": "/d3m-service/stored-response/e0ae3ca2796cffc7bdb20bae9b93ce41b8003ac851fcf7af3a61f21d",
                "hash_id": "e0ae3ca2796cffc7bdb20bae9b93ce41b8003ac851fcf7af3a61f21d",
                "id": 29275,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:19:31.835948+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.2269509488869086
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "77"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29275,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/9b08dfa4-62a1-4948-b44f-c621552112b0.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/22cb032b-af8f-493c-b832-119c997a34e3.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5121172130107879
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9946065545082092
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8680555522441864
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8630136847496033
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8655172288417816
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29279": {
                "created": "2019-11-13T09:19:32.333383+00:00",
                "details_url": "/d3m-service/stored-response/7e2487e4f753ca3a36df6281046bca72978e32c6785f910ce31901cf",
                "hash_id": "7e2487e4f753ca3a36df6281046bca72978e32c6785f910ce31901cf",
                "id": 29279,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T09:19:32.431225+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.2269509488869086
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "77"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "uniform"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29279,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/8f54356f-3c5a-492a-9c58-382dde7a6361.csv",
                    "partials": "/ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/temp/129d6f9f-ddd4-4697-bfb0-e6bd906df2c2.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5121172130107879
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "3bb7a2f7-940d-4604-8ab4-547d8bc2fa27": {
                "description": "drf-unsupervised",
                "model": "drf-unsupervised",
                "model_id": "3bb7a2f7-940d-4604-8ab4-547d8bc2fa27",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2df5ee19-cb64-454d-a987-087be0601b2f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aeda8839-2c7a-4b47-90db-35a2c5ab1d75.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cc549e60-13d5-403a-8845-8ccfc7657ba6.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b0d4f799-adc2-4bdc-acf2-ef303183057b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/71989865-e2d8-4158-8b44-6093ee1a6107.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1abcbafd-1fd6-47dd-a015-3f02332898d8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/25ac150e-5c0e-4a90-b804-848db7ed0996.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/97cf8183-dc99-419e-acae-5b0cee2de902.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.8767123287671232
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9950214354861016
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 1
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.7534246575342466
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.8593750000000001
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "48d04684-0237-4346-b9fe-4ac43048310e": {
                "description": "glm-unsupervised",
                "model": "glm-unsupervised",
                "model_id": "48d04684-0237-4346-b9fe-4ac43048310e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c42b3ba7-aa30-4814-82bd-70d09ce19598.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0955f4ff-2231-4e0f-8a9a-2ab8bf61b59d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/adce540c-6695-491e-b724-3399809e4304.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7c1ce15f-f87f-457a-bd76-c060dba62c40.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0fd14268-75b7-497d-9038-4eaf8ff27e2e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1aae03c3-4c70-4a70-94b7-abb74ea6d544.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.580970311578581
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.934725487484442
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.07989690721649484
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.21232876712328766
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.11610486891385766
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "4a123465-fc35-46c5-a705-23a817bb5a51": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "4a123465-fc35-46c5-a705-23a817bb5a51",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c8f172ab-a315-49da-8a2b-f52935fbf264.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7ebc8232-d0eb-4ba1-9443-924aeaaa755c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1f69544c-3a1d-46c3-9ff4-1c79194530ef.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9b1c8220-7f13-40f7-be35-bbabfed7b9fa.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b3c61251-3b74-40ea-81ee-8c950b6f56e6.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/002c904b-86e3-43dd-b818-d39051bd3e78.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bab0cdd0-0316-494b-a141-a054b0c8341e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ff22f4b1-2f74-4a71-a0b7-f2fbbb97fff3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6492773658413975
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9699903194578896
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2822085889570552
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.3150684931506849
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2977346278317152
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "bab5ad57-581e-441f-8d91-133d6b8dca63": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "bab5ad57-581e-441f-8d91-133d6b8dca63",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/72570b3b-a8b4-45a3-aaaf-143c0f0781b3.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/81e60481-5dbe-41f3-9403-b81bc0f756d9.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9407e414-67c6-4204-a730-38c2c9a34e0b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1d31aca0-5bd8-4195-a051-8cbb0cd2d4c8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/611ccb37-93db-4188-9585-a4d466dbb931.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e8bffe1e-bb1f-410b-888b-9c15b7a64cdd.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/11c5aacb-6065-4bbf-a825-6b36245a4b14.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ae1d44b0-93d5-4230-bfad-2b73b102a3b0.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6170773677748669
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9726178951735583
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2903225806451613
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2465753424657534
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.26666666666666666
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "d0b861d6-70f4-48d9-986b-692f1bbfb740": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "d0b861d6-70f4-48d9-986b-692f1bbfb740",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bd98dc00-d8b4-4b94-bef0-a8430e73b1cf.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/62ef873a-dd69-4c5d-8f91-b65036a3f776.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/25d8c0b2-20a5-4b4e-903e-6cfb05172be3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/235bff6d-60dd-44ae-bae0-1468187b90a0.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d25f58c3-2f27-45d1-9ff8-1fc193f8ff81.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/02ae0607-2fea-4371-91ee-07a4ed9a7eb2.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.8514181997467155
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9257364126676808
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.18314424635332252
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.773972602739726
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2961992136304063
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "f0652eec-1f73-435a-b886-cde330830d60": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "f0652eec-1f73-435a-b886-cde330830d60",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5b2ba28e-781b-4c42-95d8-4fc1c6d8f676.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3594a12b-f264-48f5-93bc-cc97ce7d03a6.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d4a789c-3481-4181-b791-cf541881aa27.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f024772e-4810-4ec1-adec-600d1724f672.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/71ef5bfd-5a2d-400f-aea6-89774b84275d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5c87076e-69f2-484e-ae05-f27348911e54.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bea116e4-ae48-4cc4-a46a-c296c902ce10.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/766b9a39-a427-4f06-a99a-3211a6c17be4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6248890671977263
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9419167473378509
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.11944444444444445
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2945205479452055
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.1699604743083004
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            },
            "fb1770fc-b25e-4719-96a5-71a7baa98b73": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "fb1770fc-b25e-4719-96a5-71a7baa98b73",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b290bb12-f5b9-473c-abc4-61dd6570e5da.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/35858751-af36-4ed0-9325-b8d1f0b17365.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1bce0b34-d864-4f89-ae1b-a872049b06fb.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ae627b7f-cd99-4bdb-bf88-da8af2aa0635.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/944943a3-eb99-41d2-ab51-13fc09ebf2f7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e1e3a63e-2335-46de-8bfd-57957068a62a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6999941995920379
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9116304798783017
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.11058451816745656
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4794520547945205
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.1797175866495507
                    }
                ],
                "search_id": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
                "system": "h2o"
            }
        },
        "mlbox": {
            "1646d920-5b10-4048-82ff-5c665c73f1f3": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "1646d920-5b10-4048-82ff-5c665c73f1f3",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/89c6be24-795c-44c0-b245-3407263fcea9.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9f6d0eda-f257-49c5-a59b-7accaec80b50.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5d7ae5a9-1881-4ced-a7b6-27ca7fdf1705.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/952ae7d4-a8d3-44a6-9abb-9ba9993633a0.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/70b82e08-d8e8-41d2-9381-16d4d344ea5b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b428df04-843c-46f9-b264-187a7d5d9d41.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/060c05e5-7b91-44c7-b17e-e95ceda2d218.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/75045c2c-bf90-421f-b10f-b2c945e3a6c2.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.49498994965377785
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9699903194578896
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "2fe309ef-d73c-4004-9406-9dd197096a5f": {
                "description": "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=10, max_features='sqrt', max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=400, n_jobs=-1,\n            oob_score=False, random_state=0, verbose=0, warm_start=False)",
                "model": "RandomForestClassifier",
                "model_id": "2fe309ef-d73c-4004-9406-9dd197096a5f",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/518d4a82-8299-449f-aa9d-21e2fa3bc77f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/73513413-5a16-4899-bb7f-b309b82af2d0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3f2ef889-8da9-49f5-a34e-f6549db15271.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/68efc528-172f-4c83-ba6e-e3244fabd5ba.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/02fb9ec1-846a-45b9-9eb1-11844c1745d9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9ac99d6c-588c-4f3b-84bf-00b5e3b1a21d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a9ea2767-2cd2-404e-b00b-dfb20d0ffc9d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1994491e-c696-491d-a67b-40488ca15b89.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.49865899050416773
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9771815793112986
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "47fafb85-3409-4038-be5d-560daf90359a": {
                "description": "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=0,\n            splitter='best')",
                "model": "DecisionTreeClassifier",
                "model_id": "47fafb85-3409-4038-be5d-560daf90359a",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60951971-1494-436b-89d0-23abd2fde76f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8bffd346-8dde-4ce7-a262-e0bd3f215f95.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/22abc726-00d5-4a01-972c-50ea4acaabea.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/48e6378f-c7e4-49bd-8aa6-d2debf781ce8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/519e374b-2475-46c6-9c03-1341fff7b998.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1fae79e3-6a63-4828-a7a1-a3b74dae1289.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/83be6258-d3cb-4498-b9e8-86bf35ff9f6a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/11ab1656-baec-472c-90ce-3560a63f8923.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4975644592488275
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9293320425943853
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.018897883687653445
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.04762958426352148
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.02621934939985863
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "7afeac6e-38e9-46b6-bac8-6f3f192057b8": {
                "description": "AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,\n          learning_rate=0.05, n_estimators=400, random_state=0)",
                "model": "AdaBoostClassifier",
                "model_id": "7afeac6e-38e9-46b6-bac8-6f3f192057b8",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/af25d0f3-1bc1-4ff4-841b-4d6303f3efb3.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fb06ddce-23ab-4ffc-ad3b-841e0f7e9b11.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b1eb49b8-0f24-413c-8a03-25ef47c11f46.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/453da620-bdb9-4f09-add3-e10e10c28d01.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6854ff74-a134-4472-9796-3268c1cc7ace.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d80a8b5a-847f-4117-be77-af00924d4858.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c6ef9ea6-29e4-4989-8380-53f406ce398a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3b3b79fb-bb16-4394-8f53-ed43fc72ee69.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "b7c25ae5-65ca-4693-99f0-d9e24fbc4b42": {
                "description": "ExtraTreesClassifier(bootstrap=True, class_weight=None, criterion='gini',\n           max_depth=10, max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=400, n_jobs=-1,\n           oob_score=False, random_state=0, verbose=0, warm_start=False)",
                "model": "ExtraTreesClassifier",
                "model_id": "b7c25ae5-65ca-4693-99f0-d9e24fbc4b42",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5517c097-9012-4a94-97c2-ce2dca2269b2.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d63a922a-ae4f-4e16-8b8a-7cffdb8bd34d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1a54a027-926e-4511-82a9-c4661204a39c.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7ec26cb5-1bb6-4d05-8f92-00e927897127.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/41e9df15-97c8-43db-8dfa-7fa8bef6c8b8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bd092bde-1a43-4345-aec5-e13c57ba0ff2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b15546ff-38ab-4d9f-bd44-251926dcdb7a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7a9ff791-c0f2-48d0-bd64-1026c2557b48.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4983759783677042
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9766284054764209
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "d194a7e5-9954-458a-9f0b-67304f1d9c24": {
                "description": "BaggingClassifier(base_estimator=None, bootstrap=False,\n         bootstrap_features=False, max_features=0.85, max_samples=0.9,\n         n_estimators=500, n_jobs=-1, oob_score=False, random_state=0,\n         verbose=0, warm_start=False)",
                "model": "BaggingClassifier",
                "model_id": "d194a7e5-9954-458a-9f0b-67304f1d9c24",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a42eb438-41f6-4a65-b150-67eaed97e544.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ee01a7ab-f0d3-4299-8f3a-940bfb64cf1f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ec0759df-c1b0-40ec-b138-a429ab3ba79d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8e359473-1a9b-457f-97ad-3663ca4b5c82.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5e32098f-3ce7-4af0-a5f8-a12962ac4c24.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/84c728de-cff6-4431-a347-2f3e6b3109bc.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e1173249-c23f-4fa8-9ec2-9ca89aa59b9c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cba9cfde-2c1a-43ea-8716-383754664488.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4943560049035226
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.968745678329415
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            },
            "dcba0696-bd68-4a94-b678-4065d5664b7a": {
                "description": "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=-1,\n          penalty='l2', random_state=0, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)",
                "model": "LogisticRegression",
                "model_id": "dcba0696-bd68-4a94-b678-4065d5664b7a",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f339a9d1-2f89-4d86-bbb5-adab1cf819b6.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b7c41883-02ed-407d-937d-8e2b24e85fd8.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e2304a50-24bc-4155-a73d-0bc37ac5fc1f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/27e881e9-b2a4-4247-83f8-b88f70487664.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/43380147-64ed-46b5-a8a7-7090c770bb99.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f5258721-9eda-406b-9aa8-6eb67996912a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/15c87cca-a9c3-4e83-a542-a062c4d4e73d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/71a494ad-ac93-4ca4-9bf1-3fd7ceb39ad3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "1b09c328-5be5-4b92-9df9-57d1e7b2b9cd": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7f03f12d9a20>",
                "model": "Ensemble",
                "model_id": "1b09c328-5be5-4b92-9df9-57d1e7b2b9cd",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/996f2e05-e243-4000-9d21-7e46845b37a3.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/636f4693-d866-4ca7-b425-8b01ebea3bff.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c872aa7-8d06-41b8-96fa-675499c01223.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c7133730-e8db-4006-916f-4555d9fd7647.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3728de7f-47b0-48cc-9ff0-7b998a4d4642.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1d690575-fb64-4032-ada9-2c81a9bc85c2.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "b9d5f59d-5e20-4ff0-b5a7-fa7003b2e354",
                "system": "mljar-supervised"
            },
            "4a4f3560-11e9-4d18-baee-e76f2bcd4612": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f03f01f6668>",
                "model": "CatBoost",
                "model_id": "4a4f3560-11e9-4d18-baee-e76f2bcd4612",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08c8c10f-d89c-4f99-a3b5-f57454db25ad.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/751616cd-d7a9-4a48-b0c0-fff7d63a2cbc.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bbbbf163-fe7d-49f7-94c2-14492ba29b46.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f1bb3f6e-1ea0-41a6-a625-345580e2137f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08f70a69-289c-419c-a309-b2f008609839.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/764ec3a1-0242-4e19-8b28-6383fafdd5af.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/37246228-f19c-409b-a560-3fb07ca9641c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dcb925d3-b341-4ff7-9524-7d17f1b8130e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "b9d5f59d-5e20-4ff0-b5a7-fa7003b2e354",
                "system": "mljar-supervised"
            },
            "c1b87072-cd28-4259-b7bb-bee5d9a696c8": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f05012f6c88>",
                "model": "CatBoost",
                "model_id": "c1b87072-cd28-4259-b7bb-bee5d9a696c8",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/401d4829-d487-41c7-8944-8e7687c50503.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/46ee4b65-b254-4d8d-9356-cf2573af23eb.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/48e73f5d-5d73-4355-9b7a-bcbe29d62fa2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/597722cd-dfbc-40c7-be0e-b8de3dccb045.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2c209afc-ffda-4ce9-ae43-9208192a33ec.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c74631fc-e5dd-481a-95f9-22cff0d8d786.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2ac9897b-64df-475e-80b9-e75ecec9c48e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/36aeed40-91a5-4582-8078-f2b5a19baafc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "b9d5f59d-5e20-4ff0-b5a7-fa7003b2e354",
                "system": "mljar-supervised"
            },
            "feb3f681-b9d3-4b75-88ca-54def5c948dc": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f05012dfbe0>",
                "model": "CatBoost",
                "model_id": "feb3f681-b9d3-4b75-88ca-54def5c948dc",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/11d21e19-fb6f-4f66-bce7-afe68f0680bf.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5d4894fc-784b-4d69-b420-6e3776da89fd.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cfe9a168-3dfb-453a-9681-4b54cfc85514.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d4c0e198-3330-4954-9ab4-b6ad4c472907.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b8db9a86-40ce-4be9-a60d-9241014405d9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d10692fb-058e-4ab7-a249-f53e5fdd0587.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e6f1e92a-ee15-4d22-8c0a-ab67679a94b3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5f3b31e4-2de0-423e-bd04-ae8613bd9de7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "b9d5f59d-5e20-4ff0-b5a7-fa7003b2e354",
                "system": "mljar-supervised"
            }
        },
        "tpot": {
            "7d135a30-8c3a-4a2a-be63-e2b9e1a6d709": {
                "description": "Pipeline(memory=None,\n     steps=[('xgbclassifier', XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,\n       max_depth=1, min_child_weight=18, missing=None, n_estimators=100,\n       n_jobs=1, nthread=1, objective='binary:logistic', random_state=0,\n       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n       silent=True, subsample=0.9000000000000001))])",
                "model": "Pipeline",
                "model_id": "7d135a30-8c3a-4a2a-be63-e2b9e1a6d709",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/26695e06-5662-41e9-af0b-c180cc2ebe7f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/39da78be-de32-442e-9ff9-85188cf5ce49.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/70754af5-bd2d-4f3d-a415-4700b89346ba.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9e0e078f-1c57-4263-a03a-e9fc6a3cee96.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/test/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7426084e-552d-4d60-97e3-6238cbeaa077.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fb73c4fe-6774-4d6d-8805-ae01dda0a897.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/train/ws_530/2019-11-13_04-00-32/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7456c839-ee1c-4901-bc5e-a60559a17b12.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b02cfeae-cab0-486f-b3d9-5733f1871673.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10d_Chen_Ulf_Modernization/additional_inputs/partials/ws_530/2019-11-13_04-00-30/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9798091550269672
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "6257f99b-0a0d-4018-b412-533ab3e52937",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "elapsed_time": 68.32447743415833,
            "message": "search complete",
            "searchId": "04ea5c4e-0310-4a8a-9c70-1d270f33772a",
            "thinking": false
        },
        "mlbox": {
            "elapsed_time": 189.92281031608582,
            "message": "search complete",
            "searchId": "8eda5eb5-edd4-4f7d-a176-2ea470511b99",
            "thinking": false
        },
        "mljar-supervised": {
            "elapsed_time": 576.5872187614441,
            "message": "search complete",
            "searchId": "b9d5f59d-5e20-4ff0-b5a7-fa7003b2e354",
            "thinking": false
        },
        "tpot": {
            "elapsed_time": 58.569546937942505,
            "message": "search complete",
            "searchId": "6257f99b-0a0d-4018-b412-533ab3e52937",
            "thinking": false
        }
    },
    "splitOptions": {
        "outOfSampleSplit": true,
        "splitsDir": "/ravens_volume/test_data/TR10d_Chen_Ulf_Modernization/TRAIN/problem_TRAIN",
        "splitsFile": "sampleSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "unedited": true
}