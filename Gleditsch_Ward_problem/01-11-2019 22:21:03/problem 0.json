{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/MFAC_Gleditsch_Ward/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-41-53/tables/learningData.csv",
        "test": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-41-54/tables/learningData.csv",
        "train": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-41-54/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/MFAC_Gleditsch_Ward/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-41-53/datasetDoc.json",
        "test": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-41-54/datasetDoc.json",
        "train": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-41-54/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "holdOut",
    "indices": [
        5622,
        11645,
        4015,
        17286,
        22696,
        9116,
        19960,
        7910,
        6599,
        12818,
        1388,
        3936,
        15218,
        11485,
        10558,
        294,
        2033,
        20645,
        8783,
        18715,
        1409,
        14456,
        9643,
        21696,
        21168,
        12982,
        14428,
        22044,
        3627,
        14512,
        7022,
        11487,
        7608,
        20276,
        1539,
        9996,
        201,
        5549,
        11160,
        8870,
        16227,
        20437,
        19563,
        21425,
        3161,
        18373,
        11410,
        16102,
        1653,
        6663,
        1598,
        9606,
        5504,
        23455,
        8218,
        8613,
        20803,
        14250,
        19446,
        770,
        17604,
        6630,
        8330,
        5151,
        9086,
        13322,
        17115,
        23733,
        8720,
        4449,
        22812,
        16747,
        1306,
        8658,
        15542,
        23266,
        15426,
        9159,
        23308,
        5850,
        175,
        12353,
        6912,
        3533,
        21402,
        5637,
        266,
        7853,
        24147,
        14079,
        1358,
        7030,
        22802,
        15160,
        494,
        7790,
        13029,
        14515,
        3372,
        2137,
        17161,
        535,
        3585,
        12752,
        21391,
        10851,
        9497,
        13766,
        9650,
        16334,
        7018,
        19776,
        22387,
        1725,
        13499,
        17109,
        21664,
        17243,
        23070,
        9235,
        19468,
        3806,
        13929,
        17556,
        17636,
        5561,
        23997,
        8753,
        10019,
        1932,
        18045,
        8437,
        8491,
        12926,
        23153,
        22201,
        12754,
        4891,
        2465,
        11723,
        11303,
        1596,
        21030,
        24559,
        18200,
        23317,
        7009,
        3614,
        22903,
        14043,
        10808,
        140,
        6074,
        14301,
        6767,
        5819,
        13665,
        191,
        5025,
        15093,
        18095,
        3891,
        23742,
        23014,
        20343,
        22461,
        20779,
        23914,
        9487,
        103,
        15355,
        14435,
        9138,
        7426,
        7420,
        8058,
        12231,
        2428,
        9866,
        20128,
        6933,
        17193,
        22941,
        10272,
        11900,
        17745,
        10685,
        9360,
        5660,
        15855,
        20998,
        6674,
        18510,
        18363,
        19408,
        11741,
        1805,
        5594,
        4547,
        14507,
        6330,
        20031,
        7360,
        2442,
        24648,
        8532,
        16109,
        4624,
        16939,
        248,
        16151,
        17054,
        6148,
        6552,
        7261,
        3140,
        11050,
        8047,
        1331,
        2221,
        8261,
        39,
        1860,
        3112,
        20267,
        2315,
        329,
        2841,
        2976,
        1212,
        18439,
        18364,
        10043,
        2984,
        13464,
        24072,
        18508,
        20875,
        6860,
        14919,
        17276,
        15299,
        20405,
        14201,
        15467,
        21904,
        13457,
        11706,
        11071,
        23021,
        6696,
        11013,
        2747,
        7938,
        23403,
        1971,
        22348,
        23451,
        13674,
        7553,
        20032,
        14119,
        2531,
        15345,
        22760,
        21584,
        24149,
        2833,
        23377,
        21923,
        5779,
        15375,
        5856,
        3471,
        6714,
        19650,
        7505,
        15441,
        2375,
        7745,
        1574,
        5818,
        13965,
        1907,
        5892,
        5646,
        13143,
        22109,
        221,
        15988,
        4198,
        4640,
        22965,
        4184,
        22025,
        13422,
        16958,
        10632,
        786,
        11947,
        2912,
        23354,
        15439,
        4244,
        2597,
        13020,
        9012,
        18927,
        15943,
        12157,
        2511,
        18561,
        20506,
        24095,
        21515,
        23477,
        22103,
        20186,
        17878,
        3650,
        11142,
        15978,
        6033,
        21055,
        17106,
        15551,
        20762,
        18752,
        24768,
        12989,
        22751,
        24707,
        24267,
        12604,
        24223,
        2892,
        15047,
        22838,
        24670,
        7622,
        5259,
        17390,
        8213,
        16531,
        14071,
        5846,
        16275,
        7870,
        512,
        212,
        11993,
        15910,
        18357,
        8129,
        18330,
        15291,
        3923,
        10276,
        15054,
        1704,
        18429,
        4451,
        6970,
        14553,
        23617,
        18768,
        17608,
        21193,
        5018,
        13842,
        21043,
        8296,
        16133,
        8513,
        7375,
        6797,
        22839,
        15403,
        12787,
        693,
        7628,
        11632,
        14364,
        11981,
        11565,
        10503,
        18022,
        896,
        5859,
        24429,
        21092,
        15081,
        846,
        13978,
        999,
        22545,
        1590,
        5439,
        22845,
        10494,
        21579,
        9758,
        18013,
        14628,
        7609,
        10274,
        15214,
        14708,
        17654,
        17799,
        12336,
        12505,
        9008,
        6362,
        4598,
        12455,
        1355,
        323,
        677,
        19371,
        19821,
        12947,
        6190,
        6893,
        21207,
        803,
        807,
        23701,
        21866,
        10912,
        11492,
        5776,
        20477,
        17819,
        2946,
        1496,
        272,
        18655,
        12508,
        10173,
        22580,
        10402,
        21586,
        6576,
        11696,
        24141,
        11881,
        23533,
        4744,
        855,
        1242,
        13698,
        6543,
        6248,
        15792,
        18842,
        10977,
        16800,
        4577,
        19300,
        14666,
        13943,
        12210,
        21617,
        10855,
        21027,
        23429,
        1074,
        2546,
        8668,
        3598,
        12942,
        5694,
        23512,
        2743,
        2660,
        5833,
        23933,
        8558,
        11115,
        7197,
        5796,
        24031,
        9524,
        5857,
        17920,
        6376,
        643,
        22275,
        24492,
        8572,
        21418,
        21575,
        18567,
        11471,
        10688,
        10078,
        23345,
        5950,
        682,
        14916,
        842,
        17851,
        21243,
        5922,
        21045,
        12434,
        10691,
        2839,
        10555,
        23478,
        17734,
        8429,
        18678,
        18649,
        8807,
        8324,
        15751,
        15919,
        13240,
        13870,
        11468,
        13271,
        18514,
        17213,
        12396,
        14662,
        24762,
        18385,
        17074,
        11970,
        2415,
        4136,
        20176,
        3933,
        7390,
        14503,
        12962,
        13996,
        6550,
        1490,
        349,
        11472,
        12327,
        1342,
        8455,
        21362,
        12444,
        7568,
        13547,
        22174,
        6509,
        7723,
        21688,
        14710,
        12171,
        9052,
        24053,
        3609,
        1398,
        1459,
        23214,
        9773,
        16158,
        23353,
        19879,
        2059,
        2016,
        23757,
        15689,
        16404,
        5230,
        14855,
        14164,
        17425,
        9506,
        12674,
        22700,
        3057,
        8015,
        13495,
        2890,
        1260,
        21500,
        6676,
        19580,
        19857,
        22196,
        7057,
        75,
        4520,
        9170,
        3713,
        12511,
        465,
        10493,
        9112,
        10175,
        8306,
        7962,
        20178,
        23680,
        21851,
        8366,
        22360,
        10149,
        20347,
        3419,
        15798,
        2112,
        14022,
        23442,
        15650,
        2361,
        22950,
        24047,
        2693,
        15614,
        20499,
        12116,
        11606,
        4722,
        21068,
        2837,
        10048,
        13070,
        24075,
        7879,
        10822,
        15342,
        19442,
        13818,
        9679,
        14688,
        14105,
        9912,
        552,
        18356,
        6837,
        7518,
        7223,
        7707,
        5480,
        22483,
        10787,
        21018,
        4197,
        8549,
        3390,
        19935,
        3662,
        617,
        12842,
        19355,
        23964,
        14296,
        11275,
        3637,
        2198,
        5671,
        11570,
        24694,
        23092,
        16217,
        13312,
        18827,
        14570,
        21061,
        23519,
        5288,
        6518,
        24494,
        3632,
        262,
        16987,
        4018,
        13882,
        3124,
        20878,
        7153,
        2302,
        11201,
        2065,
        14471,
        8745,
        18776,
        5425,
        13718,
        10608,
        2124,
        9832,
        15197,
        7878,
        23321,
        16478,
        13106,
        13622,
        19993,
        8367,
        21285,
        1844,
        3518,
        367,
        16725,
        7535,
        10047,
        10379,
        22811,
        19768,
        10779,
        9793,
        20792,
        8340,
        17757,
        23124,
        14768,
        4171,
        23412,
        683,
        20657,
        9174,
        10445,
        18325,
        10002,
        15009,
        15152,
        5915,
        17848,
        14979,
        14615,
        17214,
        889,
        16913,
        24180,
        22994,
        10857,
        11349,
        23427,
        16426,
        5740,
        4377,
        5772,
        20226,
        4534,
        17305,
        4312,
        17324,
        11159,
        21327,
        4807,
        17114,
        14012,
        18985,
        16196,
        23766,
        17461,
        22120,
        22450,
        4000,
        20207,
        3255,
        22582,
        10419,
        15937,
        5406,
        10826,
        2745,
        18215,
        23217,
        8874,
        18658,
        11913,
        8074,
        11118,
        8175,
        10948,
        24142,
        3238,
        23858,
        17741,
        21704,
        8432,
        20396,
        8308,
        15993,
        11830,
        8946,
        1021,
        21782,
        18753,
        15578,
        7140,
        17190,
        4313,
        13324,
        15418,
        20423,
        20096,
        4205,
        19323,
        8358,
        22905,
        12748,
        1751,
        7785,
        15004,
        14327,
        23002,
        23203,
        19020,
        8184,
        12379,
        5816,
        851,
        1486,
        22172,
        11049,
        23510,
        9963,
        24718,
        21989,
        2866,
        5790,
        22914,
        11327,
        20920,
        7440,
        24268,
        17412,
        5984,
        24351,
        23564,
        21126,
        2568,
        16689,
        8419,
        14120,
        21392,
        23919,
        10559,
        15185,
        15912,
        10245,
        10561,
        5911,
        19759,
        1659,
        13292,
        12738,
        19549,
        2638,
        5296,
        16885,
        24018,
        2261,
        3070,
        22725,
        16433,
        203,
        7531,
        4333,
        7176,
        18185,
        21025,
        5214,
        16153,
        16337,
        6134,
        6488,
        3052,
        13681,
        23866,
        5376,
        9406,
        9654,
        3037,
        17382,
        3804,
        10884,
        11101,
        21583,
        13885,
        17662,
        1853,
        16024,
        6740,
        14156,
        9850,
        16667,
        5716,
        12533,
        14722,
        4890,
        19455,
        6152,
        20243,
        6953,
        21882,
        12188,
        13317,
        20502,
        5073,
        9311,
        22583,
        5220,
        6849,
        16006,
        2659,
        2533,
        21943,
        15591,
        24480,
        12623,
        14597,
        6242,
        4320,
        9986,
        12631,
        7955,
        4078,
        20519,
        14349,
        24309,
        13711,
        2108,
        6701,
        17553,
        1780,
        18986,
        13824,
        5597,
        20313,
        15535,
        13285,
        18302,
        8019,
        2393,
        18627,
        19390,
        14259,
        13757,
        4702,
        20257,
        7090,
        23423,
        9252,
        16345,
        20010,
        9621,
        12318,
        23854,
        16493,
        972,
        4745,
        15106,
        9395,
        17523,
        18605,
        15229,
        24133,
        18158,
        21519,
        9622,
        14846,
        19791,
        9274,
        20822,
        1044,
        13582,
        20873,
        16585,
        10144,
        19713,
        7590,
        274,
        17534,
        1889,
        6118,
        10411,
        10327,
        15463,
        23179,
        13848,
        13845,
        20571,
        23629,
        20692,
        5472,
        10165,
        10027,
        22231,
        14942,
        5894,
        8120,
        3154,
        8834,
        5101,
        15662,
        2362,
        17673
    ],
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [],
    "pending": false,
    "predictors": [
        "pmid",
        "py",
        "py2",
        "py3",
        "terriss",
        "riveriss",
        "mariss",
        "terrAtt",
        "rivAtt",
        "marAtt",
        "minpol",
        "rbal",
        "lnkmdist"
    ],
    "problemID": "problem 0",
    "provenanceID": "Gleditsch_Ward_problem",
    "randomSeed": 123,
    "selectedSolutions": {
        "auto_sklearn": [],
        "d3m": [
            "23970"
        ],
        "h2o": [],
        "ludwig": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "auto_sklearn": {
            "0c47074d-5e71-485d-9671-2ae99560cd28": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='holdout',\n           resampling_strategy_arguments={'shuffle': False, 'train_size': 0.6},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=3600, tmp_folder=None)",
                "model": "",
                "model_id": "0c47074d-5e71-485d-9671-2ae99560cd28",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/640d476d-3d03-4f1a-b475-3f737beaed5d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_19-55-18/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/7c002bfd-d5ed-4058-9340-df70614a68fd.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_19-55-18/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/0891d9d3-dc58-4a70-b70b-d673635eaf2a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_19-55-17/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5130617049210014
                    }
                ],
                "search_id": "3c6bb6b6-d49b-43d0-84c2-f8222faab4db",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "24117": {
                "created": "2019-11-02T02:49:30.062442+00:00",
                "data_pointer": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/c1db13cb-e364-402c-92fb-33a687535221.csv",
                "data_pointer_partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/27ebe0ca-dfa5-4aa8-80d2-25eb43ffee75.csv",
                "details_url": "/d3m-service/stored-response/2b881313d72177cd109ebfdb33fa342ee48d75e82c5967d11a7e5797",
                "hash_id": "2b881313d72177cd109ebfdb33fa342ee48d75e82c5967d11a7e5797",
                "id": 24117,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-02T02:49:30.083104+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "c6129373f12d8f13d08047c969ccfbe94ea26bc0659f1325331946cf4c3d8c35",
                                    "id": "08d0579d-38da-307b-8b75-6a213ef2972e",
                                    "name": "sklearn.preprocessing.data.MinMaxScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.min_max_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.28724208921976147
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "470"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 24117,
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5903826355934143
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "23970": {
                "created": "2019-11-02T01:41:58.530454+00:00",
                "data_pointer": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/7a36b45e-5db1-49f3-9aef-b2e2ab86e0bd.csv",
                "data_pointer_partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/a5a1d29b-3365-4c71-9a4a-1e2d27c46c93.csv",
                "details_url": "/d3m-service/stored-response/d3c1b449e28d4747c93c66dd13ae207bf299730e6aee65d90f156d99",
                "hash_id": "d3c1b449e28d4747c93c66dd13ae207bf299730e6aee65d90f156d99",
                "id": 23970,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-02T01:41:58.561073+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 23970,
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "23972": {
                "created": "2019-11-02T01:42:00.291896+00:00",
                "data_pointer": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/851f2299-e5a3-4a7c-8702-4c4e50922515.csv",
                "data_pointer_partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/3032dd3f-7c70-4178-bb3f-c34e60ce3155.csv",
                "details_url": "/d3m-service/stored-response/8e75cbe4f9c6f86c2710c9b2c27907d3bba0b3c9ca5c2e822fc88b42",
                "hash_id": "8e75cbe4f9c6f86c2710c9b2c27907d3bba0b3c9ca5c2e822fc88b42",
                "id": 23972,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-02T01:42:00.314442+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 23972,
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "23998": {
                "created": "2019-11-02T01:42:18.114451+00:00",
                "data_pointer": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/7f30fd02-687e-4487-a4e2-eb7f9f687706.csv",
                "data_pointer_partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/8b414da7-1714-44be-b349-a37bfbab379e.csv",
                "details_url": "/d3m-service/stored-response/f6c1d39bd0911cca709d3ca5406e25315fefa4402afd0fe7aab7bc80",
                "hash_id": "f6c1d39bd0911cca709d3ca5406e25315fefa4402afd0fe7aab7bc80",
                "id": 23998,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-02T01:42:18.137052+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "threshold": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a15972568a34fb23d8c1930544579b8b763918455bdd4105b6d17fe238fa3a7",
                                    "id": "980c43c7-ab2a-3dc9-943b-db08a7c25cb6",
                                    "name": "sklearn.feature_selection.variance_threshold.VarianceThreshold",
                                    "pythonPath": "d3m.primitives.feature_selection.variance_threshold.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 23998,
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5897484064102173
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "24000": {
                "created": "2019-11-02T01:42:19.825065+00:00",
                "data_pointer": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/2cdbb9b2-7efc-4bae-a3a2-9a3ca038f106.csv",
                "data_pointer_partials": "/ravens_volume/test_output/MFAC_Gleditsch_Ward/temp/34c9df89-2921-4685-9af0-f6fe918b2f8e.csv",
                "details_url": "/d3m-service/stored-response/07773f065098bd67870e3e78c229e6ea4788b5245b4a70688488c2f2",
                "hash_id": "07773f065098bd67870e3e78c229e6ea4788b5245b4a70688488c2f2",
                "id": 24000,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-02T01:42:19.844917+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "threshold": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a15972568a34fb23d8c1930544579b8b763918455bdd4105b6d17fe238fa3a7",
                                    "id": "980c43c7-ab2a-3dc9-943b-db08a7c25cb6",
                                    "name": "sklearn.feature_selection.variance_threshold.VarianceThreshold",
                                    "pythonPath": "d3m.primitives.feature_selection.variance_threshold.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 24000,
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5897484064102173
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "6852684a-1366-457c-88f2-168a5a057cfb": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "6852684a-1366-457c-88f2-168a5a057cfb",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/bd45a615-f43c-4088-bc3f-01d681ffc6be.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/57c5bd05-248b-4fd3-b79e-35a82073fe2a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/1af368f9-a988-4db0-a582-5e99e9f25218.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/64e86bc4-c9cd-4322-9a50-021964370db2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/ca856d3f-67e1-49e6-8572-bb9cbdb757eb.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/87576083-20b8-418b-ad5f-5afc5db9720e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.6035429399248495
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "a7454df5-4019-411c-85f0-4e1670c4bfd6": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "a7454df5-4019-411c-85f0-4e1670c4bfd6",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/a6f34e1b-89bd-47e5-a901-48e611379b1a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b92381db-c292-4fe3-9fe2-f3bc2a6cb1ad.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/88293b0a-6254-4c42-9e57-8022c1b83225.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/92290fa9-c689-49de-9da2-b130fac19722.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/8491da9a-ac4e-4c4f-87c4-828b6a5e2d6d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/3ac1fcdf-ed69-4256-b4ff-ad2a1b2b2576.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.6153823169903572
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "b2785be8-27d7-4501-acd0-efc51eaaaf4e": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "b2785be8-27d7-4501-acd0-efc51eaaaf4e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/22621636-3aca-4f0f-aa98-acc412ca388e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/83c32aa6-f246-468e-bdd5-d36aae60a403.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/01a5d4e7-dc19-4fff-847e-c234aa1f96b1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/717dc68c-1efc-43ac-9fe2-3082c2a33426.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/d07b5083-8dea-4557-958c-4ce117716d08.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/823b6cf3-03ae-4df4-b7c3-27e913162244.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5905491421069311
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "b6b7fbe4-5ecf-4239-8c21-e1736e81ea40": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "b6b7fbe4-5ecf-4239-8c21-e1736e81ea40",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/4a84bb8f-e3ae-40cb-91b5-6285645a0c69.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/3a4a6906-0732-46b9-a494-c0252f1faed4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/dbd212fd-87c7-47bc-8580-68f1b6b5b48e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/241f1625-3f65-4627-ab5b-02bf60db6dee.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/26fdaad1-4ade-4341-a1b7-005e25ef17b6.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/5d8cbaea-7204-4542-b1d4-f23b8b4fcc16.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.8288777219430488
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "c4d1197e-b61d-4d72-9f63-422e54007d05": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "c4d1197e-b61d-4d72-9f63-422e54007d05",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/7a263668-a13c-490a-b4de-047acaa145bd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/2d0fc546-a1c0-466e-a469-9b9bda4b33ed.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/97a66829-3bbb-41cb-939d-4312522f4b83.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/d82fd82e-7879-480f-b9fe-ca4c5aabd7ad.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/fc90d43d-d524-47c5-a78f-a6e0d9d29391.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/f0e91779-9691-4cf2-86e0-867ea4d66b01.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.8418036126578841
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "d9a62309-b8a9-49a0-9d32-1b47bb759a8a": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "d9a62309-b8a9-49a0-9d32-1b47bb759a8a",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/6c211645-47bf-45a9-8e19-48ea65e464a2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/d0780f8f-1085-4ee3-87da-c2e224ce042a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/6a7bd438-c47c-4a7e-9241-7636f1347f11.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/371117b5-762c-4b4a-b770-364816d39de9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/bab03f1d-7ef7-433d-9adb-a1ae0b0edf89.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/8f63880a-32ef-4cb6-891d-0236c1915b23.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.7342514373670154
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "ddca30cd-e112-4bd7-9070-752670542b14": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "ddca30cd-e112-4bd7-9070-752670542b14",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/0162a08f-cfa3-4a73-85bc-af4280416b9c.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b66cd0e3-440f-4a59-9d1b-c6f52fec147f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/1a7ac536-e418-481a-8da4-0a470dfb0a8f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/afe7c7fc-786c-4df7-acd3-c2562e22998f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/bcfb78a3-0152-49b4-8022-1d3f2f3a47fc.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/6205a4a1-4880-4540-b074-e1485c9ae158.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5774195300828466
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "e2c21e93-c7c5-44f4-b771-9304f8ed335c": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "e2c21e93-c7c5-44f4-b771-9304f8ed335c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/a1731bf9-8228-4f62-a2fb-fa774730d25a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/6d760dc7-6f1d-435e-ba49-7b8c7c10a4a3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/9121717a-9003-433e-ae49-b1bc6b42ac17.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/faa5ed26-da3b-4ed8-89f3-be8b7de5bf71.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/f23af386-accb-42c8-a37a-735e01f32a8a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/8127db1b-12af-4f4c-a661-f8846a196171.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5968762732581827
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "f2016b7c-b318-4e63-85a2-140156643199": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "f2016b7c-b318-4e63-85a2-140156643199",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b22c0826-e541-489c-8666-4eeafddebb87.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/186714ea-1314-4c04-87c2-2ec5f3da75ee.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/1316338d-243b-44da-9658-b557c1cec741.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/01be09ec-a478-4117-8095-c98e227e1cd4.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/a0484fdc-6a9b-4a29-9922-03d2487af480.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/5cef3662-6803-4978-9091-ab1701aa117f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.6036787541310155
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            },
            "f215b275-6943-4da8-a3d1-d81a290ed9b6": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "f215b275-6943-4da8-a3d1-d81a290ed9b6",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/11ab53ac-c8a7-485b-8043-60b3305b06c5.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/63d71e78-89ac-4fa4-8abc-e97d3c4419f1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/574d51be-3dc9-4a09-8b8c-37444f091fda.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/a081ee71-7c39-4785-9dcc-5fa0155902f3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b0c0296a-5a14-4fd5-b478-ec1ce6db915f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/4ac5cac7-cd8e-4015-9531-805eb653f49d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_18-47-38/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5772158087735977
                    }
                ],
                "search_id": "d37c44b0-edff-468b-9192-8e4faddbac08",
                "system": "h2o"
            }
        },
        "ludwig": {},
        "mlbox": {
            "9db066a6-8825-4335-8a0e-9404faad5407": {
                "description": "<mlbox.model.classification.classifier.Classifier object at 0x7fd067c00dd8>",
                "model": "",
                "model_id": "9db066a6-8825-4335-8a0e-9404faad5407",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/cfe18964-5584-47ab-bf9c-746389250c9f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-06-27/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/397a1912-ac76-4559-984b-7b3916d5b362.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-06-27/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b0242965-a7bf-4edc-ac70-bc89293ccb47.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-06-26/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5321789125809226
                    }
                ],
                "search_id": "21d93a3d-6ee5-43ac-b678-df8d99634bda",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "52fdb17c-b121-4a91-99c6-1795f6cc7103": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7fcf7f102f60>",
                "model": "",
                "model_id": "52fdb17c-b121-4a91-99c6-1795f6cc7103",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/4b063150-d667-4e3b-a099-aca6d9c3dc8c.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/94d0439f-ff54-42df-8f51-b8b72c81281e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/efb9839f-a343-4ffd-8077-a17f0793e44d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/94c6bf3a-be79-4d3f-bf6a-f275da1e78a7.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/028af931-5544-4d63-a8cd-503e088b8934.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/b79e5fd5-11e8-452f-a921-4fec0aae1b51.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-06-49/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5263950382543346
                    }
                ],
                "search_id": "7c952996-0661-43ac-a92a-9f380257093c",
                "system": "mljar-supervised"
            }
        },
        "rook": {},
        "tpot": {
            "9d5a2551-597c-44b5-b86a-518e5593f42d": {
                "description": "Pipeline(memory=None,\n     steps=[('randomforestclassifier', RandomForestClassifier(bootstrap=True, class_weight=None, criterion='entropy',\n            max_depth=None, max_features=0.9000000000000001,\n            max_leaf_nodes=None, min_impurity_decrease=0.0,\n            min_impurity_split=None, min_samples_leaf=7,\n            min_samples_split=11, min_weight_fraction_leaf=0.0,\n            n_estimators=100, n_jobs=None, oob_score=False,\n            random_state=None, verbose=0, warm_start=False))])",
                "model": "",
                "model_id": "9d5a2551-597c-44b5-b86a-518e5593f42d",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/2b7c73cd-3c91-4feb-a396-79d13dbc6f99.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/test/ws_448/2019-11-01_21-02-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/f871d997-5bb5-4055-91b0-5d53d4a80ee0.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/train/ws_448/2019-11-01_21-02-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "ravens_volume/solvers/produce/e1826021-1422-47c8-b0cd-f176edf58f82.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/MFAC_Gleditsch_Ward/additional_inputs/partials/ws_448/2019-11-01_21-02-56/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5263271311512517
                    }
                ],
                "search_id": "a9894a8b-46f4-45fe-bfc4-a3975ac491f8",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "auto_sklearn": {
            "message": "search complete",
            "searchId": "3c6bb6b6-d49b-43d0-84c2-f8222faab4db",
            "thinking": false
        },
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "message": "search complete",
            "searchId": "d37c44b0-edff-468b-9192-8e4faddbac08",
            "thinking": false
        },
        "ludwig": {
            "message": "solve failed due to exception",
            "searchId": "ee1a03bd-9935-43a0-a2fd-e357063034d3",
            "thinking": false
        },
        "mlbox": {
            "message": "search complete",
            "searchId": "21d93a3d-6ee5-43ac-b678-df8d99634bda",
            "thinking": false
        },
        "mljar-supervised": {
            "message": "search complete",
            "searchId": "7c952996-0661-43ac-a92a-9f380257093c",
            "thinking": false
        },
        "tpot": {
            "message": "search complete",
            "searchId": "a9894a8b-46f4-45fe-bfc4-a3975ac491f8",
            "thinking": false
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "mido"
    ],
    "task": "classification",
    "timeBoundSearch": 60,
    "trainTestRatio": -1,
    "unedited": true
}