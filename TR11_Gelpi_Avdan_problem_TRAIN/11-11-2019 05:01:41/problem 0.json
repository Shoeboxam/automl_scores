{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR11_Gelpi_Avdan/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/partials/ws_510/2019-11-11_03-55-15/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/test/ws_510/2019-11-11_03-55-21/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/train/ws_510/2019-11-11_03-55-18/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR11_Gelpi_Avdan/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/partials/ws_510/2019-11-11_03-55-15/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/test/ws_510/2019-11-11_03-55-21/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/train/ws_510/2019-11-11_03-55-18/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            180730,
            426427,
            186170,
            351939,
            239633,
            626767,
            218765,
            485879,
            647560,
            542877,
            272554,
            568366,
            17774,
            240280,
            441360,
            30153,
            61144,
            102518,
            468256,
            84150,
            87644,
            585794,
            292702,
            155850,
            550013,
            139408,
            60150,
            37460,
            552614,
            3629,
            147067,
            306038,
            192162,
            224911,
            620310,
            635710,
            469388,
            334263,
            347533,
            354337,
            430763,
            480958,
            160468,
            618861,
            49991,
            343165,
            540891,
            584600,
            324755,
            512291,
            434956,
            63435,
            88330,
            318342,
            83654,
            187069,
            337101,
            351947,
            19074,
            130183,
            266171,
            122714,
            526098,
            536462,
            91395,
            514160,
            24254,
            484314,
            98900,
            79870,
            526252,
            87473,
            322910,
            308641,
            86794,
            588648,
            44985,
            105286,
            43634,
            321804,
            13044,
            190330,
            264288,
            262533,
            191223,
            405993,
            161523,
            363791,
            415226,
            591470,
            611378,
            327577,
            259554,
            626684,
            151320,
            505340,
            637927,
            298258,
            533927,
            215333,
            423643,
            128315,
            170101,
            271615,
            523925,
            37150,
            423464,
            480829,
            24051,
            531146,
            49234,
            545750,
            575551,
            426780,
            315656,
            400252,
            453532,
            243729,
            427895,
            517190,
            641329,
            514451,
            477536,
            619683,
            392064,
            259954,
            215873,
            204743,
            393202,
            148767,
            395230,
            287384,
            562504,
            101833,
            505438,
            550352,
            16648,
            583334,
            391597,
            644889,
            213424,
            20769,
            328442,
            439017,
            180106,
            616038,
            585991,
            167613,
            625398,
            635195,
            531182,
            572662,
            273526,
            214791,
            141961,
            444187,
            563837,
            7924,
            59767,
            575811,
            545300,
            47467,
            226364,
            187357,
            306809,
            81896,
            125513,
            159066,
            237311,
            174854,
            160890,
            191922,
            162535,
            555640,
            317158,
            5091,
            6812,
            438445,
            36275,
            156343,
            183054,
            638637,
            500130,
            21038,
            108232,
            575465,
            261351,
            403546,
            156150,
            416047,
            611663,
            132274,
            39379,
            506229,
            458234,
            503070,
            517902,
            645200,
            228209,
            20555,
            584777,
            333833,
            547458,
            382461,
            194358,
            463248,
            477027,
            206369,
            180965,
            40702,
            263306,
            460582,
            578251,
            334582,
            474396,
            229525,
            62668,
            258915,
            546539,
            341046,
            259217,
            280930,
            621789,
            636329,
            295920,
            151256,
            153077,
            318462,
            119882,
            235943,
            288596,
            158390,
            603684,
            510629,
            594446,
            479647,
            426489,
            173826,
            43414,
            182734,
            378188,
            10120,
            483448,
            370781,
            12981,
            597344,
            520187,
            514830,
            478401,
            604450,
            453422,
            106467,
            362671,
            560885,
            398727,
            220747,
            444569,
            547759,
            501640,
            48383,
            117559,
            205276,
            453256,
            48235,
            621631,
            169890,
            537603,
            483208,
            258073,
            650398,
            197832,
            151210,
            125026,
            351806,
            534714,
            311855,
            445717,
            63015,
            69305,
            251843,
            100608,
            73019,
            495804,
            648210,
            433005,
            15647,
            219738,
            38814,
            43291,
            431061,
            315317,
            323942,
            246520,
            95258,
            190354,
            603111,
            257561,
            33151,
            136197,
            151239,
            237770,
            458904,
            274317,
            89265,
            548292,
            593,
            354608,
            118348,
            364774,
            459475,
            120483,
            467097,
            440517,
            493146,
            342925,
            270491,
            292768,
            304777,
            161954,
            212466,
            647698,
            470554,
            598392,
            591448,
            106670,
            273797,
            321294,
            375090,
            476451,
            336537,
            551173,
            265866,
            150897,
            599538,
            351595,
            88892,
            88628,
            379602,
            312631,
            364129,
            252116,
            568773,
            201691,
            571610,
            137388,
            83123,
            423865,
            112608,
            136591,
            241253,
            361870,
            99304,
            133082,
            1310,
            9382,
            52303,
            166825,
            357858,
            154353,
            140063,
            296037,
            639494,
            419610,
            560963,
            330710,
            210789,
            211206,
            543573,
            644111,
            95839,
            126649,
            367656,
            214812,
            253429,
            273676,
            264890,
            586020,
            640698,
            17615,
            176253,
            527981,
            649797,
            551504,
            390075,
            290495,
            514666,
            401033,
            484334,
            351880,
            261282,
            95709,
            525590,
            188981,
            199808,
            366115,
            476764,
            441751,
            275830,
            466110,
            547596,
            283678,
            371751,
            37700,
            438899,
            172448,
            606041,
            7709,
            163865,
            373295,
            167324,
            63093,
            185943,
            330723,
            620703,
            383083,
            67859,
            148152,
            197451,
            228835,
            115533,
            12229,
            376222,
            527695,
            484606,
            210567,
            374620,
            30962,
            278789,
            435257,
            497787,
            195889,
            321802,
            68101,
            5344,
            341366,
            34981,
            151513,
            148367,
            643418,
            467312,
            424899,
            424662,
            71387,
            76611,
            396178,
            160399,
            316809,
            357137,
            505025,
            46115,
            579476,
            176067,
            254289,
            222667,
            439444,
            394301,
            99198,
            6691,
            259320,
            283150,
            252552,
            13674,
            134168,
            31573,
            269236,
            369760,
            32624,
            280638,
            120986,
            168886,
            632770,
            186024,
            222672,
            557370,
            509270,
            180499,
            561020,
            551959,
            292402,
            83103,
            271997,
            302446,
            588128,
            211660,
            626918,
            213835,
            538066,
            34732,
            629915,
            323854,
            563616,
            43565,
            489513,
            555049,
            566472,
            356552,
            399347,
            176129,
            628289,
            490364,
            595269,
            316464,
            159408,
            285341,
            625095,
            570596,
            403949,
            576897,
            511470,
            559118,
            582673,
            542460,
            193236,
            248965,
            491241,
            639341,
            565033,
            904,
            77801,
            606212,
            366131,
            612236,
            338444,
            622467,
            631889,
            11607,
            167036,
            543315,
            614332,
            333990,
            268772,
            49269,
            241893,
            316526,
            429233,
            492372,
            252223,
            528862,
            98548,
            180160,
            440589,
            251691,
            10499,
            174889,
            293553,
            46796,
            390795,
            445045,
            362539,
            588098,
            76155,
            293443,
            243727,
            558439,
            153390,
            185043,
            471306,
            157930,
            562220,
            473374,
            182146,
            525987,
            180963,
            644288,
            163351,
            545328,
            341029,
            343207,
            189984,
            194211,
            199919,
            443254,
            70395,
            333485,
            500066,
            581367,
            4581,
            53784,
            106395,
            132092,
            65369,
            571532,
            303562,
            210195,
            230220,
            461008,
            239585,
            632886,
            618257,
            508701,
            228955,
            583235,
            158097,
            312453,
            275515,
            180704,
            123612,
            106708,
            577138,
            354728,
            108885,
            167772,
            484553,
            144709,
            470366,
            293488,
            446782,
            467415,
            256354,
            285392,
            116738,
            566568,
            403068,
            182756,
            403412,
            117386,
            646536,
            593004,
            55076,
            614739,
            513296,
            463545,
            206016,
            241905,
            382437,
            620929,
            80456,
            586385,
            252829,
            420810,
            573517,
            215185,
            15742,
            639527,
            460600,
            301656,
            175289,
            441791,
            258827,
            70550,
            512429,
            10177,
            491024,
            307569,
            229874,
            283856,
            452281,
            323207,
            451740,
            471809,
            493896,
            302434,
            325793,
            568856,
            152133,
            12169,
            9439,
            77080,
            554152,
            527591,
            598599,
            148302,
            284398,
            207333,
            340283,
            270028,
            491739,
            528453,
            154889,
            261192,
            275173,
            70926,
            460415,
            161683,
            648242,
            480496,
            62704,
            236479,
            574812,
            123801,
            571957,
            199003,
            311306,
            14750,
            411677,
            598119,
            274081,
            387912,
            421737,
            258395,
            53747,
            647400,
            270752,
            620201,
            123049,
            234673,
            87405,
            628876,
            59457,
            404821,
            570903,
            52079,
            80944,
            255532,
            545190,
            436921,
            21501,
            15826,
            428266,
            252885,
            472816,
            169906,
            292068,
            628300,
            422764,
            181421,
            136201,
            38021,
            546265,
            158245,
            39900,
            554993,
            474554,
            342922,
            551867,
            357752,
            549598,
            185003,
            49994,
            267473,
            131893,
            331781,
            251323,
            235853,
            403094,
            447837,
            582508,
            101499,
            244184,
            544332,
            622388,
            551983,
            636103,
            489739,
            491242,
            460675,
            104719,
            630998,
            490379,
            591427,
            227533,
            369437,
            593351,
            407380,
            427004,
            8938,
            223843,
            14717,
            185465,
            587603,
            609181,
            128983,
            153369,
            243802,
            83210,
            501315,
            124784,
            573207,
            453292,
            130745,
            106740,
            356266,
            265857,
            551075,
            426867,
            575046,
            68848,
            642076,
            651227,
            600372,
            606986,
            615237,
            234342,
            594383,
            157601,
            153017,
            345963,
            488438,
            286087,
            86481,
            486024,
            335482,
            52265,
            314198,
            391017,
            272749,
            2591,
            647946,
            612406,
            86459,
            537672,
            116060,
            301328,
            480816,
            75071,
            192656,
            103352,
            458199,
            286872,
            472365,
            470509,
            606603,
            210968,
            446795,
            451964,
            493702,
            298101,
            53105,
            135457,
            460393,
            260293,
            456563,
            1388,
            8566,
            485282,
            569858,
            86492,
            22322,
            258035,
            384996,
            30334,
            70646,
            575360,
            517534,
            497522,
            514702,
            348305,
            433767,
            79624,
            58553,
            32629,
            140219,
            290554,
            65482,
            269099,
            596097,
            58806,
            474875,
            563262,
            429343,
            449677,
            334109,
            209320,
            318586,
            543406,
            94726,
            313964,
            333763,
            8758,
            18115,
            142020,
            591079,
            185188,
            314069,
            200600,
            552620,
            128100,
            455643,
            320845,
            398738,
            175929,
            414939,
            161694,
            495410,
            88749,
            562450,
            138661,
            563942,
            287551,
            363883,
            582835,
            514413,
            209348,
            491,
            14171,
            350536,
            48693,
            406455,
            545796,
            41999,
            415306,
            202140,
            614641,
            403296,
            352277,
            113246,
            405813,
            279335,
            529567,
            222324,
            603467,
            430386,
            112393,
            309449,
            572614,
            305371,
            88838,
            380776,
            428923,
            288602,
            338751,
            563581,
            445197,
            261143,
            368207,
            401477,
            191336,
            25573,
            58256,
            141187,
            8161,
            153654,
            52453,
            474839,
            116668,
            536488,
            153447,
            609840,
            340987,
            252891,
            588396,
            323247,
            644128,
            201018,
            314804,
            353932,
            255020,
            316082,
            1973,
            619122,
            601926,
            637841,
            75903,
            16838,
            154264,
            399809,
            521601,
            229470,
            273684,
            428511,
            326827,
            456184,
            148097,
            557522,
            163460,
            338234,
            254410,
            71857,
            93747,
            295665,
            296160,
            464627,
            549739,
            627507,
            31313,
            385555,
            99806,
            463345,
            37033,
            59275,
            280921,
            292924,
            608119,
            327565,
            477805,
            229467,
            599834,
            39010,
            323319,
            26330,
            575011,
            380008,
            363908,
            223699,
            508661,
            30134,
            14198,
            43325,
            446052,
            444433,
            244520,
            618000,
            640462,
            636833,
            386788,
            510739,
            487358,
            51033,
            345348,
            157180
        ],
        "test": [
            507616,
            119786,
            226867,
            427433,
            415561,
            26530,
            501378,
            218915,
            92710,
            35222,
            37497,
            646050,
            562763,
            269982,
            512377,
            448121,
            52561,
            392214,
            218874,
            519520,
            148478,
            353471,
            526374,
            629773,
            367134,
            482315,
            75818,
            157480,
            206779,
            166568,
            641563,
            23447,
            647349,
            109110,
            484206,
            230575,
            503893,
            355053,
            364953,
            323697,
            446082,
            549894,
            385166,
            150281,
            387771,
            135192,
            376487,
            35389,
            70929,
            170253,
            354590,
            74500,
            307448,
            282369,
            82633,
            245323,
            649089,
            283409,
            269792,
            488252,
            289331,
            29146,
            611661,
            170102,
            227862,
            567990,
            469845,
            555846,
            627299,
            386357,
            31329,
            70117,
            201629,
            610723,
            303419,
            374754,
            370864,
            608363,
            328418,
            192456,
            171751,
            358523,
            440447,
            532299,
            28943,
            618895,
            490084,
            280467,
            632794,
            501084,
            126276,
            316884,
            332171,
            356589,
            286360,
            288268,
            367524,
            294437,
            359313,
            391853,
            451242,
            212625,
            349933,
            63630,
            250035,
            592669,
            297608,
            467741,
            427846,
            492839,
            611975,
            416858,
            423301,
            220891,
            171818,
            202208,
            67091,
            548014,
            166631,
            132743,
            71803,
            435761,
            267466,
            538455,
            371261,
            486132,
            597401,
            540236,
            384385,
            106043,
            9065,
            531230,
            225219,
            206381,
            395696,
            59733,
            509342,
            592256,
            598583,
            515206,
            615631,
            567741,
            490998,
            92767,
            541897,
            630445,
            445754,
            335456,
            493082,
            551956,
            364632,
            208422,
            476358,
            227536,
            26803,
            137031,
            207409,
            254421,
            183363,
            121091,
            545834,
            420788,
            330184,
            566412,
            552489,
            125799,
            357135,
            220198,
            359361,
            618173,
            318518,
            296342,
            189880,
            565095,
            99753,
            641773,
            194085,
            441792,
            490909,
            528173,
            572001,
            584070,
            124726,
            380268,
            494412,
            31028,
            205290,
            545624,
            393447,
            405934,
            4365,
            193591,
            430562,
            198302,
            574152,
            172163,
            186091,
            162410,
            139818,
            104083,
            222500,
            203447,
            577330,
            462495,
            100174,
            59553,
            163212,
            312623,
            278220,
            175224,
            555619,
            423842,
            267080,
            493010,
            220737,
            85410,
            470513,
            34235,
            530848,
            597952,
            359562,
            593145,
            306260,
            452070,
            199507,
            351047,
            440533,
            135071,
            166805,
            485617,
            30996,
            522158,
            601922,
            234181,
            116946,
            474814,
            209610,
            518605,
            64266,
            319328,
            575087,
            520262,
            145018,
            585204,
            394365,
            623734,
            33227,
            126678,
            635250,
            216781,
            498323,
            470181,
            344625,
            208494,
            399980,
            54024,
            527763,
            411719,
            490221,
            387049,
            189686,
            567331,
            248830,
            177605,
            546921,
            464251,
            457924,
            17379,
            636734,
            55408,
            72188,
            441211,
            262164,
            159302,
            158645,
            315136,
            415961,
            333401,
            220824,
            117586,
            504456,
            128497,
            286334,
            638091,
            594419,
            535698,
            325483,
            649568,
            479908,
            578583,
            32172,
            593941,
            186439,
            568924,
            258840,
            248164,
            113309,
            430796,
            286781,
            549367,
            389974,
            40086,
            252789,
            415353,
            136620,
            548646,
            240834,
            228758,
            354318,
            356997,
            99975,
            53670,
            3274,
            79311,
            162519,
            504884,
            164734,
            562285,
            573568,
            390182,
            225908,
            178121,
            285121,
            332020,
            284323,
            483623,
            609370,
            364675,
            509813,
            238002,
            178598,
            600520,
            494007,
            129177,
            318617,
            86958,
            497285,
            482939,
            558303,
            164707,
            492617,
            609606,
            483779,
            80993,
            352531,
            217630,
            407751,
            212253,
            34155,
            70285,
            259658,
            460086,
            569328,
            556776,
            335000,
            10387,
            165073,
            603007,
            208203,
            450046,
            212543,
            357110,
            243429,
            95212,
            149714,
            251845,
            12916,
            123692,
            179553,
            352581,
            574368,
            222532,
            231362,
            158770,
            11327,
            81093,
            174041,
            454452,
            88913,
            295692,
            235094,
            92179,
            422541,
            352469,
            639142,
            369966,
            340230,
            273889,
            139376,
            106874,
            77000,
            625911,
            360290,
            403994,
            146295,
            421087,
            183837,
            153479,
            42224,
            41958,
            93355,
            276235,
            106417,
            642038,
            470193,
            241176,
            111280,
            411946,
            132964,
            66740,
            453743,
            601418,
            278606,
            392118,
            138928,
            35385,
            560292,
            110696,
            207811,
            175830,
            99605,
            194718,
            601652,
            542326,
            24625,
            230800,
            445273,
            359979,
            245942,
            298499,
            482871,
            440065,
            600451,
            438160,
            243989,
            97351,
            645081,
            279718,
            555230,
            109595,
            600549,
            540349,
            633799,
            530911,
            504844,
            32978,
            288948,
            541521,
            289393,
            371588,
            221566,
            331688,
            112021,
            343197,
            465671,
            172850,
            556733,
            433551,
            216448,
            528784,
            226486,
            501073,
            428827,
            320156,
            535683,
            30719,
            480359,
            53674,
            311434,
            113691,
            81361,
            159159,
            242765,
            338368,
            147375,
            400875,
            189107,
            308635,
            250300,
            240339,
            100606,
            262331,
            524889,
            540628,
            336394,
            407319,
            209373,
            52724,
            452097,
            377848,
            253745,
            438875,
            181140,
            115485,
            578056,
            614776,
            561766,
            13265,
            331263,
            569116,
            25063,
            381159,
            219267,
            624733,
            472539,
            489304,
            15354,
            368743,
            570085,
            92512,
            455757,
            302846,
            140039,
            432121,
            320277,
            183902,
            582630,
            185295,
            183517,
            70556,
            571072,
            383714,
            120697,
            235302,
            150687,
            144145,
            497157,
            489009,
            296454,
            568267,
            564338,
            394522,
            8300,
            36372,
            109463,
            374530,
            292687,
            473896,
            562054,
            563472,
            519618,
            134241,
            505064,
            432833,
            272405,
            519290,
            169442,
            614677,
            623250,
            478275,
            543622,
            562342,
            428042,
            275337,
            478088,
            578244,
            593996,
            99463,
            620665,
            207265,
            85499,
            487625,
            630818,
            649730,
            480749,
            143331,
            153646,
            271979,
            641023,
            333964,
            350391,
            190322,
            296683,
            21464,
            488888,
            103678,
            401367,
            69315,
            292242,
            651269,
            276001,
            368931,
            536414,
            498911,
            112002,
            40057,
            103449,
            505041,
            287547,
            620829,
            577584,
            149668,
            248636,
            239454,
            248161,
            111212,
            194876,
            293546,
            78777,
            331291,
            524783,
            521909,
            258264,
            335882,
            32632,
            486521,
            645103,
            248125,
            466094,
            360738,
            149899,
            521325,
            77065,
            142693,
            454605,
            257564,
            191871,
            135227,
            592218,
            440715,
            2417,
            641654,
            121621,
            211907,
            304952,
            401651,
            275804,
            415558,
            441161,
            290451,
            431848,
            585000,
            20251,
            186800,
            506229,
            120867,
            426969,
            31951,
            215824,
            519655,
            285087,
            140899,
            631627,
            323963,
            216691,
            579555,
            214415,
            535290,
            631196,
            339199,
            622678,
            229840,
            502038,
            523695,
            146688,
            151252,
            380887,
            202291,
            481679,
            302706,
            169825,
            350732,
            578329,
            43589,
            188980,
            547170,
            251406,
            238236,
            521117,
            207746,
            370739,
            429510,
            604401,
            415024,
            605273,
            204917,
            85064,
            468650,
            7432,
            195087,
            127390,
            617376,
            548456,
            342778,
            464786,
            611158,
            388392,
            30882,
            155556,
            477075,
            498380,
            112042,
            183402,
            647842,
            19255,
            16081,
            144322,
            606505,
            543015,
            510632,
            68432,
            120836,
            446456,
            139799,
            337681,
            459960,
            315559,
            208405,
            504703,
            567749,
            376743,
            128403,
            646849,
            243480,
            253918,
            176463,
            368003,
            190950,
            216171,
            386181,
            530092,
            466394,
            357026,
            258464,
            141017,
            484142,
            399076,
            454561,
            284667,
            2415,
            583892,
            91344,
            374510,
            543874,
            40386,
            533876,
            536941,
            504396,
            113977,
            559845,
            169455,
            369375,
            585515,
            169331,
            442771,
            258664,
            203212,
            212662,
            544441,
            607760,
            175390,
            570793,
            329536,
            587746,
            550764,
            140984,
            402138,
            100588,
            57637,
            503353,
            7091,
            257024,
            596907,
            114444,
            318632,
            456856,
            253511,
            305373,
            525999,
            611520,
            397799,
            176233,
            439053,
            1053,
            32945,
            142798,
            337904,
            14550,
            612345,
            506363,
            24131,
            290959,
            494865,
            566861,
            545275,
            109920,
            158523,
            388945,
            549417,
            174787,
            185873,
            506072,
            523569,
            357412,
            394808,
            195308,
            582453,
            354745,
            230759,
            635905,
            386170,
            128221,
            144187,
            110379,
            174846,
            565509,
            589444,
            395174,
            289053,
            335693,
            648457,
            236916,
            200233,
            172223,
            615447,
            198677,
            599376,
            507241,
            399226,
            88041,
            633590,
            461364,
            364169,
            68852,
            583491,
            603137,
            218130,
            593313,
            621862,
            60564,
            482080,
            274476,
            382027,
            51872,
            97743,
            602486,
            582479,
            391621,
            7554,
            543560,
            415557,
            171662,
            626739,
            473431,
            577353,
            359928,
            34465,
            498711,
            409285,
            288353,
            464036,
            509846,
            11418,
            433180,
            43749,
            335312,
            627257,
            399059,
            517005,
            620690,
            646886,
            557923,
            97573,
            284654,
            73187,
            27130,
            447898,
            230294,
            23432,
            254203,
            529558,
            253739,
            135835,
            450114,
            33688,
            259004,
            403010,
            255362,
            134719,
            598476,
            139647,
            256654,
            550890,
            564951,
            525636,
            589157,
            1409,
            165468,
            492118,
            373365,
            132757,
            516884,
            6805,
            479741,
            172266,
            388055,
            540412,
            529684,
            40131,
            220163,
            85420,
            351656,
            223627,
            345101,
            48477,
            249801,
            311555,
            67128,
            577137,
            329002,
            533469,
            25629,
            644344,
            179237,
            376156,
            536289,
            463898,
            435338,
            474575,
            620224,
            179399,
            558585,
            97581,
            581985,
            511986,
            617662,
            505280,
            456764,
            527877,
            547588,
            225291,
            279414,
            621229,
            383909,
            326479,
            109495,
            270710,
            266043,
            96570,
            337153,
            289824,
            147311,
            459098,
            528840,
            340021,
            588957,
            644276,
            245487,
            361236,
            336764,
            608640,
            639699,
            68460,
            555104,
            588421,
            40811,
            31442,
            332815,
            593671,
            187764,
            477588,
            233556,
            152929,
            63511,
            86654,
            579027,
            556554,
            647628,
            202129,
            499688,
            333394,
            590306,
            554788,
            20909,
            157060,
            438186,
            170620,
            604280,
            424677,
            352417,
            516021,
            82437,
            431672,
            549254,
            555984,
            252824,
            322530,
            91637,
            534659,
            109559,
            524910,
            479447,
            652159,
            433397,
            616470,
            69475,
            306389,
            302815,
            153292,
            157773
        ],
        "train": [
            238115,
            486310,
            137053,
            497453,
            513907,
            149935,
            14833,
            376386,
            122377,
            174195,
            371437,
            622896,
            564755,
            475213,
            166516,
            427918,
            20447,
            529605,
            263957,
            313477,
            124851,
            98199,
            50189,
            10769,
            60446,
            414695,
            184675,
            149630,
            566234,
            150086,
            170159,
            426235,
            631992,
            301688,
            168836,
            589423,
            493050,
            304640,
            77429,
            405726,
            204665,
            354017,
            218625,
            558435,
            388474,
            606721,
            144211,
            345227,
            168905,
            466675,
            99584,
            354304,
            474233,
            426682,
            55810,
            390018,
            581568,
            91405,
            303632,
            421345,
            585356,
            80070,
            18377,
            581333,
            288600,
            573545,
            552023,
            280839,
            247953,
            541290,
            262859,
            619314,
            484331,
            507159,
            184039,
            231433,
            262716,
            598116,
            62907,
            354679,
            343071,
            121989,
            461493,
            36930,
            321039,
            84469,
            262396,
            606118,
            226941,
            114162,
            227254,
            322765,
            613905,
            604786,
            486631,
            113524,
            53395,
            287388,
            223726,
            170583,
            129556,
            260519,
            178525,
            183085,
            139367,
            646383,
            310655,
            29610,
            158210,
            436311,
            391695,
            62735,
            609161,
            62543,
            358544,
            229035,
            126894,
            420451,
            400662,
            220784,
            548200,
            592215,
            310354,
            360378,
            245753,
            99892,
            77946,
            651429,
            643378,
            400948,
            14658,
            18406,
            198899,
            531124,
            558666,
            129498,
            193540,
            423102,
            269141,
            91881,
            557218,
            516211,
            580613,
            362730,
            459520,
            206712,
            398384,
            320197,
            215384,
            88472,
            88355,
            217052,
            97329,
            173519,
            137356,
            322646,
            379253,
            341673,
            230187,
            602844,
            240715,
            303312,
            137581,
            341348,
            244695,
            528960,
            147043,
            542811,
            49924,
            123444,
            283968,
            497521,
            138749,
            280836,
            495787,
            429442,
            175778,
            413661,
            11870,
            17318,
            637529,
            537118,
            549214,
            50729,
            356262,
            638173,
            343478,
            98711,
            408723,
            448324,
            107805,
            288442,
            547854,
            484073,
            467766,
            87960,
            610597,
            547177,
            622804,
            97860,
            37144,
            248683,
            378841,
            590585,
            609938,
            138750,
            54751,
            566157,
            162833,
            340201,
            143882,
            307081,
            185508,
            30110,
            622829,
            303123,
            382614,
            39230,
            95346,
            646260,
            553411,
            122036,
            343799,
            497117,
            172653,
            295334,
            616993,
            213950,
            110411,
            7032,
            357914,
            614110,
            163196,
            282364,
            286623,
            203754,
            119840,
            17127,
            463766,
            32674,
            617072,
            249709,
            142509,
            499185,
            64773,
            270234,
            329661,
            274569,
            4760,
            413542,
            609443,
            569341,
            533273,
            127042,
            28400,
            261833,
            71340,
            341279,
            533945,
            560347,
            95669,
            358071,
            520088,
            481129,
            436146,
            201909,
            463372,
            313590,
            155807,
            407551,
            593305,
            256804,
            147437,
            41313,
            390196,
            86852,
            227573,
            576672,
            154348,
            524003,
            618775,
            562128,
            513682,
            327617,
            2033,
            509558,
            353303,
            159094,
            331614,
            488596,
            122849,
            253916,
            645276,
            149048,
            385617,
            209485,
            141406,
            78019,
            592276,
            171144,
            538519,
            238855,
            161951,
            157073,
            542739,
            195404,
            591669,
            590708,
            315497,
            61155,
            266279,
            356565,
            559025,
            590239,
            402832,
            49279,
            591003,
            212405,
            234780,
            424281,
            259961,
            136591,
            354905,
            434448,
            380637,
            43902,
            242888,
            509903,
            529549,
            508355,
            26918,
            113052,
            340369,
            362700,
            488291,
            455988,
            583431,
            273558,
            561754,
            29850,
            215220,
            398233,
            88246,
            609212,
            131243,
            224314,
            379354,
            349281,
            646533,
            508081,
            373280,
            247713,
            13628,
            129704,
            592851,
            275880,
            510770,
            355373,
            470600,
            68056,
            169369,
            414165,
            139391,
            595700,
            444080,
            347714,
            195119,
            528959,
            114774,
            443034,
            535845,
            361448,
            408064,
            362915,
            256281,
            15075,
            399604,
            481818,
            221664,
            621633,
            99108,
            35925,
            555794,
            217702,
            311881,
            431466,
            97438,
            140744,
            226119,
            262429,
            219444,
            639505,
            647372,
            328822,
            158503,
            298756,
            395618,
            642076,
            410628,
            95123,
            231523,
            623677,
            556442,
            264703,
            266041,
            436065,
            247075,
            520923,
            251416,
            512828,
            323964,
            189785,
            634526,
            343325,
            233144,
            493136,
            102823,
            86779,
            610317,
            143528,
            53660,
            223066,
            272920,
            288409,
            278250,
            8061,
            63660,
            217198,
            131241,
            589090,
            546312,
            157296,
            138876,
            407366,
            268826,
            110870,
            22632,
            122985,
            395215,
            351734,
            308417,
            623733,
            462508,
            314223,
            640724,
            194223,
            589739,
            31119,
            207022,
            616287,
            111691,
            247829,
            393092,
            450097,
            78731,
            570926,
            78840,
            27298,
            596230,
            374912,
            463656,
            2321,
            158874,
            566656,
            16974,
            186111,
            553071,
            179408,
            142387,
            139845,
            535236,
            464011,
            259478,
            107712,
            456891,
            57114,
            142656,
            400784,
            19207,
            637696,
            211584,
            181910,
            268444,
            319167,
            278064,
            33492,
            570285,
            198174,
            340612,
            554398,
            66065,
            333102,
            24216,
            437943,
            193997,
            130783,
            234642,
            277675,
            72034,
            6801,
            265299,
            360368,
            412543,
            439689,
            209770,
            95545,
            51967,
            111456,
            225008,
            238495,
            298196,
            138634,
            389474,
            236718,
            19380,
            245359,
            272534,
            519711,
            49108,
            346615,
            414756,
            12222,
            225426,
            373656,
            404378,
            232939,
            557052,
            573933,
            484108,
            537017,
            262545,
            244593,
            145502,
            511132,
            188082,
            497296,
            481713,
            614214,
            236910,
            431080,
            492868,
            442963,
            644153,
            342601,
            356324,
            225330,
            506853,
            397796,
            359122,
            460150,
            336067,
            190549,
            92620,
            190330,
            468642,
            478314,
            60707,
            166485,
            597928,
            321725,
            576872,
            52231,
            33916,
            475056,
            495413,
            93625,
            94465,
            122948,
            544659,
            440484,
            31911,
            224298,
            267058,
            439928,
            360239,
            519356,
            459197,
            415229,
            354192,
            614787,
            433733,
            588097,
            91177,
            328167,
            409592,
            376098,
            1862,
            486529,
            475137,
            575789,
            354119,
            415157,
            304696,
            340941,
            235900,
            187273,
            488343,
            279826,
            539048,
            502385,
            610343,
            83483,
            148059,
            429671,
            293061,
            210068,
            423243,
            567568,
            317620,
            98460,
            479639,
            160728,
            578521,
            510450,
            273767,
            52953,
            90692,
            125,
            93858,
            310932,
            153053,
            145588,
            219433,
            42278,
            385730,
            195291,
            392942,
            37920,
            541981,
            302491,
            341197,
            304987,
            498540,
            193413,
            586413,
            642603,
            419371,
            234221,
            540715,
            75138,
            147370,
            93660,
            450103,
            91237,
            637414,
            401493,
            365649,
            375322,
            535055,
            121835,
            612704,
            492324,
            406178,
            346179,
            453211,
            493633,
            232763,
            346850,
            194811,
            469456,
            650923,
            429698,
            14823,
            448600,
            649636,
            285173,
            267941,
            435226,
            550591,
            384015,
            523220,
            471248,
            51076,
            218653,
            20940,
            595817,
            105079,
            266166,
            570142,
            342877,
            564982,
            389782,
            7300,
            8704,
            532808,
            151289,
            147551,
            196176,
            370425,
            578704,
            363318,
            357757,
            540449,
            90367,
            276546,
            158741,
            415295,
            513483,
            212062,
            532822,
            203518,
            572725,
            524598,
            648510,
            515074,
            32422,
            194797,
            332183,
            87482,
            419448,
            227769,
            278373,
            629869,
            209160,
            91442,
            520169,
            459661,
            102849,
            314082,
            611760,
            367143,
            48450,
            612926,
            615899,
            595513,
            123578,
            571453,
            56710,
            246424,
            321391,
            604609,
            21744,
            55146,
            483065,
            180817,
            262341,
            439539,
            209957,
            93852,
            548939,
            546097,
            486254,
            353275,
            401026,
            222349,
            453380,
            282013,
            311896,
            496463,
            452477,
            227729,
            290013,
            194673,
            507476,
            312324,
            128274,
            310572,
            302075,
            597901,
            36563,
            176731,
            500917,
            147271,
            204548,
            408736,
            598025,
            296515,
            118406,
            189589,
            80627,
            384034,
            65833,
            542746,
            12431,
            147585,
            355943,
            543951,
            350896,
            166967,
            141188,
            339053,
            293211,
            587295,
            182389,
            29960,
            272025,
            385211,
            446120,
            622937,
            13908,
            49419,
            129739,
            404359,
            275713,
            527527,
            442103,
            263406,
            359007,
            141016,
            531274,
            214110,
            383709,
            604768,
            544030,
            158887,
            446265,
            155009,
            370233,
            551187,
            58284,
            165011,
            196624,
            594248,
            277096,
            567579,
            83611,
            507921,
            63030,
            244296,
            158426,
            531019,
            69564,
            530291,
            349680,
            559825,
            221662,
            289671,
            56445,
            287289,
            311706,
            513816,
            303175,
            557332,
            404936,
            13655,
            428986,
            367430,
            589429,
            467679,
            578112,
            513851,
            264105,
            155324,
            93095,
            107827,
            368842,
            161872,
            72441,
            236259,
            204511,
            43605,
            43188,
            136657,
            22981,
            212474,
            122755,
            114923,
            649122,
            473515,
            316757,
            351038,
            637804,
            99309,
            100809,
            313023,
            178321,
            444679,
            445766,
            330792,
            555366,
            279761,
            585101,
            392171,
            368747,
            165800,
            130371,
            376891,
            299978,
            180135,
            621589,
            341731,
            496766,
            429103,
            317911,
            167305,
            272135,
            495153,
            21902,
            238014,
            577366,
            243610,
            67036,
            632162,
            5845,
            625925,
            142157,
            528764,
            472338,
            456876,
            339358,
            485355,
            321105,
            255155,
            489477,
            542953,
            560688,
            470117,
            641919,
            336874,
            525948,
            451775,
            429306,
            10305,
            56084,
            628241,
            309072,
            260520,
            592695,
            580928,
            446195,
            109308,
            115855,
            614624,
            591821,
            339876,
            627221,
            110951,
            220703,
            76453,
            43312,
            229202,
            330445,
            609612,
            92475,
            505750,
            190502,
            534500,
            19530,
            578243,
            225750,
            570228,
            510741,
            142134,
            53710,
            423437,
            303008,
            147841,
            387155,
            70073,
            387467,
            624549,
            505305,
            209651,
            471194,
            332860,
            647015,
            133779,
            155399,
            562240,
            182783,
            295276,
            477384,
            219397,
            507951,
            57951,
            548573,
            97976,
            402361,
            366714,
            11758,
            276237,
            292258,
            375060,
            361515,
            360219,
            373816,
            98274,
            96699,
            319560,
            63439,
            197920,
            534003,
            630118,
            30003,
            351469,
            635984,
            353678,
            452274,
            358048,
            130650,
            170828,
            323194,
            429447,
            640353,
            587743,
            474504,
            449147,
            324031,
            161468,
            6604
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "polity2b",
        "polity2borigin",
        "loggdptarget",
        "logpop",
        "majpowhome",
        "majpoworigin",
        "coloniallink",
        "ethnictie",
        "ethnicPCW",
        "ethnicany911",
        "dyadalliance",
        "dyadalliancePCW",
        "rivalrydummy",
        "postCW",
        "post911",
        "lndyaddist",
        "dyadpcyear1",
        "dyadpcyear2",
        "dyadpcyear3",
        "dyadpcyear4",
        "year"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR11_Gelpi_Avdan_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR11_Gelpi_Avdan/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "auto_sklearn": [],
        "d3m": [
            "28059"
        ]
    },
    "solutions": {
        "auto_sklearn": {
            "02637493-7184-463e-87d5-fa5625e5b1e3": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='cv',\n           resampling_strategy_arguments={'shuffle': False, 'folds': 10},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=3600, tmp_folder=None)",
                "model": "AutoSklearnClassifier",
                "model_id": "02637493-7184-463e-87d5-fa5625e5b1e3",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d30de2d7-1234-46c4-bc68-b89909ec1dd5.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR11_Gelpi_Avdan/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/51ace21a-a668-4797-85a8-c68627091c44.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR11_Gelpi_Avdan/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/46af84aa-8475-4df5-b174-0f071ebadb21.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/test/ws_510/2019-11-11_03-55-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/944c1061-f04f-4cae-993e-82086fe7bf71.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/test/ws_510/2019-11-11_03-55-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/75033bf7-3337-4086-8e50-803767ac93a5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/train/ws_510/2019-11-11_03-55-18/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8a2b7d97-3871-4f2b-834b-53423b1ce0f1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/train/ws_510/2019-11-11_03-55-18/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d7e7b38-533f-4543-bf84-654e666405bb.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/partials/ws_510/2019-11-11_03-55-15/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a85b7b85-3d2b-46b4-993b-78134a557e85.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR11_Gelpi_Avdan/additional_inputs/partials/ws_510/2019-11-11_03-55-15/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "incident",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "incident",
                        "value": 0.997931647782156
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "incident",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "incident",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "incident",
                        "value": 0
                    }
                ],
                "search_id": "2f04c96c-7e63-4bb8-b74b-35afbc538341",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "27982": {
                "created": "2019-11-11T09:32:39.453303+00:00",
                "details_url": "/d3m-service/stored-response/095ded078e612ae3aaa219ac4c87ac7327b01aa7d9e73a194a5cdeb9",
                "hash_id": "095ded078e612ae3aaa219ac4c87ac7327b01aa7d9e73a194a5cdeb9",
                "id": 27982,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:32:39.479681+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27982,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR11_Gelpi_Avdan/temp/30c3cf97-e118-4297-a11b-3f2c913a6299.csv",
                    "test": "/ravens_volume/test_output/TR11_Gelpi_Avdan/temp/64b2d8f1-2712-4b1f-b88f-a479913dcc23.csv",
                    "train": "/ravens_volume/test_output/TR11_Gelpi_Avdan/temp/55c4c4a7-0bf0-459d-8848-618acdb6badc.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9979316592216492
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27984": {
                "created": "2019-11-11T09:32:46.921201+00:00",
                "details_url": "/d3m-service/stored-response/201457056532c552576d63b40f355b901a5ada708fbe69d06682131b",
                "hash_id": "201457056532c552576d63b40f355b901a5ada708fbe69d06682131b",
                "id": 27984,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:32:46.945560+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27984,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5071250796318054
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9979515671730042
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5424836874008179
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.061527058482170105
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.11051930487155914
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27994": {
                "created": "2019-11-11T09:33:02.417220+00:00",
                "details_url": "/d3m-service/stored-response/e1557c91cd036193a15b22278363fac10424547d9249ee1270251d2f",
                "hash_id": "e1557c91cd036193a15b22278363fac10424547d9249ee1270251d2f",
                "id": 27994,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:33:02.442212+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "5",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27994,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.513145923614502
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9980895519256592
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.748792290687561
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.11489992588758469
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.19922879338264465
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28008": {
                "created": "2019-11-11T09:33:30.232617+00:00",
                "details_url": "/d3m-service/stored-response/019002d9021c748c2226453929cfe925569e5071ae857ebde49bd80d",
                "hash_id": "019002d9021c748c2226453929cfe925569e5071ae857ebde49bd80d",
                "id": 28008,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:33:30.254350+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "6",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7218628160502933
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "37"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28008,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5167097449302673
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9980742335319519
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6809338331222534
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.12972572445869446
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.21793274581432343
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28011": {
                "created": "2019-11-11T09:33:36.980119+00:00",
                "details_url": "/d3m-service/stored-response/12560ab87efcf7e54bdb108e4b2b195ccce2bdbc86192550eb031985",
                "hash_id": "12560ab87efcf7e54bdb108e4b2b195ccce2bdbc86192550eb031985",
                "id": 28011,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:33:37.003668+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28011,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5167328119277954
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9981662631034851
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7822878360748291
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1571534425020218
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.2617284059524536
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28023": {
                "created": "2019-11-11T09:34:49.690895+00:00",
                "details_url": "/d3m-service/stored-response/573be9463efe3f14e9cdd93a0494e8ea8be09ecb0f33583202471145",
                "hash_id": "573be9463efe3f14e9cdd93a0494e8ea8be09ecb0f33583202471145",
                "id": 28023,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:34:49.729582+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28023,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5227049589157104
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9982766509056091
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7922077775001526
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.22609339654445648
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3517877757549286
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28027": {
                "created": "2019-11-11T09:35:17.530173+00:00",
                "details_url": "/d3m-service/stored-response/88606e770b3dc1b88b93572722f6f430e691653e88c42390c02c3643",
                "hash_id": "88606e770b3dc1b88b93572722f6f430e691653e88c42390c02c3643",
                "id": 28027,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:35:17.571500+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "9",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7218628160502933
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "37"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28027,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5274959802627563
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9983088374137878
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7928571701049805
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.24684952199459076
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.37648388743400574
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28035": {
                "created": "2019-11-11T09:36:36.232049+00:00",
                "details_url": "/d3m-service/stored-response/2e86fa20947700de31a75456fae75f4082e157c042c6e070fee39a22",
                "hash_id": "2e86fa20947700de31a75456fae75f4082e157c042c6e070fee39a22",
                "id": 28035,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:36:36.271165+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "11",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28035,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.529876172542572
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9983900785446167
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8134171962738037
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.2876204550266266
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.42497262358665466
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28037": {
                "created": "2019-11-11T09:36:51.060307+00:00",
                "details_url": "/d3m-service/stored-response/f98ad07384148bb0665dce0a9f97d36d72357b989940701b163384ef",
                "hash_id": "f98ad07384148bb0665dce0a9f97d36d72357b989940701b163384ef",
                "id": 28037,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:36:51.108544+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7218628160502933
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "37"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28037,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.53345787525177
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9984253644943237
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8120155334472656
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3106004595756531
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.44932976365089417
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28047": {
                "created": "2019-11-11T09:38:22.629508+00:00",
                "details_url": "/d3m-service/stored-response/b3f68d114b9b34454d6acdcf662cbd07020653e1fd4c6da3a575011a",
                "hash_id": "b3f68d114b9b34454d6acdcf662cbd07020653e1fd4c6da3a575011a",
                "id": 28047,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:38:22.669990+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "16",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28047,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5406367778778076
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9985081553459167
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8333333134651184
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.34840622544288635
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.49137479066848755
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28049": {
                "created": "2019-11-11T09:38:36.154690+00:00",
                "details_url": "/d3m-service/stored-response/e11c80f2c12692bfa209abb86419cabc4ecb87d3dfe7330d53148616",
                "hash_id": "e11c80f2c12692bfa209abb86419cabc4ecb87d3dfe7330d53148616",
                "id": 28049,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:38:36.185511+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "17",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7218628160502933
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "37"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28049,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5430118441581726
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9985250234603882
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8187808990478516
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3684210479259491
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5081799626350403
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28059": {
                "created": "2019-11-11T09:40:33.133245+00:00",
                "details_url": "/d3m-service/stored-response/f9729ea32faff34f9258ac97b7a4afd84ecd4ef932e5b9cebc7bf4d7",
                "hash_id": "f9729ea32faff34f9258ac97b7a4afd84ecd4ef932e5b9cebc7bf4d7",
                "id": 28059,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T09:40:33.168326+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "22",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "max_samples": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7182265815434712
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "38"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "e1ecad28449f4674eb06bbb8ff2d9bd59ab3e3bd473a2983a48fe091f8b53000",
                                    "id": "1b2a32a6-0ec5-3ca0-9386-b8b1f1b831d1",
                                    "name": "sklearn.ensemble.bagging.BaggingClassifier",
                                    "pythonPath": "d3m.primitives.classification.bagging.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28059,
                "produce": [],
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5466524958610535
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9986231327056885
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8666666746139526
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3951074779033661
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5427698493003845
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "rook": {}
    },
    "solverState": {
        "auto_sklearn": {
            "message": "search complete",
            "searchId": "2f04c96c-7e63-4bb8-b74b-35afbc538341",
            "thinking": false
        },
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "multiClass",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "incident"
    ],
    "task": "classification",
    "timeBoundSearch": 60,
    "unedited": true
}