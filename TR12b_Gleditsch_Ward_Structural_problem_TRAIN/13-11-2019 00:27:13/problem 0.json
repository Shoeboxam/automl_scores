{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR12b_Gleditsch_Ward_Structural/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/partials/ws_520/2019-11-13_00-11-07/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/test/ws_520/2019-11-13_00-11-08/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/train/ws_520/2019-11-13_00-11-08/tables/learningData.csv"
    },
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR12b_Gleditsch_Ward_Structural/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/partials/ws_520/2019-11-13_00-11-07/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/test/ws_520/2019-11-13_00-11-08/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/additional_inputs/train/ws_520/2019-11-13_00-11-08/datasetDoc.json"
    },
    "indices": {
        "all": [
            8262,
            8741,
            9419,
            22284,
            4721,
            1220,
            2427,
            12725,
            25081,
            2550,
            8184,
            28094,
            12348,
            33144,
            16914,
            1101,
            30097,
            32730,
            16442,
            1456,
            31093,
            1819,
            2582,
            8696,
            18538,
            2339,
            18682,
            17699,
            1344,
            16020,
            28032,
            7095,
            26254,
            2412,
            35875,
            31476,
            21305,
            35457,
            31937,
            6346,
            35032,
            21563,
            21583,
            10685,
            4083,
            1401,
            17928,
            32492,
            8282,
            15532,
            16349,
            4171,
            1817,
            32332,
            30787,
            33028,
            24632,
            2243,
            20864,
            17320,
            8832,
            35019,
            22730,
            25982,
            32928,
            1304,
            26572,
            33077,
            30663,
            4245,
            19081,
            13218,
            15975,
            5021,
            19829,
            13268,
            17076,
            8205,
            23538,
            12543,
            25966,
            25921,
            31938,
            7656,
            4916,
            3797,
            949,
            34903,
            7513,
            5437,
            9445,
            21689,
            35000,
            27388,
            22967,
            14144,
            9485,
            21301,
            22973,
            8608,
            12152,
            6753,
            32441,
            24458,
            18874,
            33420,
            1260,
            11995,
            5393,
            6735,
            23166,
            15217,
            26535,
            12084,
            21063,
            10868,
            20347,
            31123,
            21444,
            30198,
            18956,
            24534,
            25378,
            25687,
            19717,
            9266,
            26764,
            25035,
            14949,
            23425,
            7963,
            5819,
            12733,
            123,
            1370,
            29992,
            4002,
            25465,
            18097,
            16517,
            16035,
            31962,
            25503,
            9283,
            2472,
            19761,
            30424,
            12765,
            17187,
            22099,
            31816,
            3855,
            16889,
            28407,
            6790,
            34025,
            27475,
            14129,
            883,
            7773,
            13789,
            1458,
            25573,
            16161,
            28671,
            8955,
            30193,
            16904,
            31285,
            16787,
            8448,
            17792,
            2174,
            7515,
            25804,
            21246,
            28107,
            18455,
            11719,
            26594,
            4114,
            20653,
            18797,
            11025,
            34236,
            18893,
            33951,
            5754,
            25947,
            30948,
            17039,
            2557,
            12834,
            28180,
            2889,
            9311,
            24058,
            24795,
            27954,
            10916,
            10687,
            31253,
            207,
            15884,
            19815,
            14735,
            33442,
            19639,
            10480,
            20827,
            31203,
            2470,
            1885,
            19595,
            35708,
            2703,
            23462,
            30694,
            29208,
            3688,
            133,
            24835,
            3646,
            9237,
            18881,
            34485,
            24013,
            5682,
            33218,
            5935,
            12989,
            7127,
            10046,
            29118,
            16845,
            5760,
            34726,
            1580,
            33580,
            3212,
            7761,
            17020,
            13665,
            1161,
            29944,
            1162,
            28917,
            30537,
            8242,
            33205,
            15672,
            28452,
            494,
            4520,
            27405,
            13098,
            7057,
            32106,
            29429,
            25369,
            6152,
            3780,
            9801,
            27540,
            5090,
            35615,
            9713,
            8239,
            32899,
            34226,
            27234,
            30286,
            4841,
            833,
            4456,
            4714,
            16957,
            5978,
            34807,
            18629,
            24832,
            17276,
            24580,
            12198,
            29550,
            9284,
            25362,
            30215,
            29746,
            34917,
            9335,
            23622,
            13114,
            13432,
            17854,
            20419,
            22872,
            22546,
            7251,
            7292,
            20272,
            22452,
            1464,
            7261,
            11288,
            5661,
            6368,
            5388,
            8657,
            7847,
            33605,
            21161,
            32620,
            22968,
            26825,
            3010,
            14221,
            9124,
            21133,
            15088,
            1702,
            18297,
            25266,
            8444,
            22220,
            24410,
            29171,
            8896,
            13719,
            9099,
            8729,
            5257,
            20240,
            10747,
            29343,
            6323,
            22575,
            6625,
            3510,
            20718,
            34220,
            22141,
            25214,
            24494,
            27047,
            17354,
            35233,
            190,
            19177,
            1919,
            348,
            522,
            32865,
            27148,
            8630,
            14986,
            19747,
            552,
            7420,
            35311,
            28833,
            32067,
            16190,
            31138,
            21215,
            8548,
            12370,
            14786,
            35903,
            3085,
            14375,
            3102,
            23720,
            10974,
            23953,
            25769,
            13068,
            21501,
            30349,
            8607,
            5187,
            22414,
            27299,
            25705,
            35031,
            35904,
            23681,
            32020,
            18819,
            20997,
            22963,
            18937,
            16779,
            16293,
            30556,
            25684,
            16117,
            29177,
            3846,
            2561,
            35253,
            20309,
            11270,
            25654,
            24298,
            4122,
            30851,
            19499,
            22259,
            3473,
            31513,
            25085,
            11780,
            12197,
            31965,
            23812,
            13105,
            8765,
            9842,
            15415,
            21238,
            23750,
            6649,
            26401,
            35897,
            13910,
            23661,
            862,
            34676,
            5846,
            30465,
            3476,
            23721,
            5955,
            28635,
            22184,
            32013,
            35051,
            25591,
            32029,
            33852,
            11539,
            5451,
            11537,
            16067,
            28532,
            2974,
            15267,
            22609,
            12160,
            11001,
            25700,
            26360,
            13803,
            15841,
            3955,
            132,
            19122,
            31725,
            28661,
            14770,
            3537,
            4396,
            24710,
            21754,
            11702,
            25199,
            28752,
            34836,
            20048,
            34695,
            23693,
            19377,
            7174,
            25455,
            11229,
            9590,
            27440,
            19191,
            34233,
            32157,
            30882,
            31597,
            20634,
            812,
            32760,
            3591,
            11917,
            20303,
            17077,
            31430,
            16495,
            28585,
            6807,
            5252,
            2213,
            30955,
            31714,
            34792,
            23716,
            19533,
            8744,
            28707,
            25640,
            25719,
            27013,
            15349,
            3897,
            30207,
            9070,
            5864,
            17172,
            31477,
            29719,
            8200,
            5161,
            7854,
            33085,
            6897,
            22718,
            35704,
            26285,
            17381,
            21195,
            34232,
            34615,
            18360,
            26622,
            10458,
            17543,
            331,
            28483,
            27505,
            10510,
            35480,
            27592,
            9416,
            36012,
            3725,
            35695,
            875,
            22552,
            3770,
            19640,
            33136,
            13074,
            2769,
            26024,
            16789,
            21619,
            9945,
            32993,
            9546,
            4040,
            7772,
            23364,
            19545,
            27813,
            11621,
            4406,
            32263,
            9897,
            33127,
            10501,
            20019,
            1,
            18751,
            24596,
            9900,
            1938,
            31994,
            1576,
            31174,
            4525,
            15194,
            16754,
            7633,
            23455,
            33145,
            7757,
            2015,
            1019,
            16991,
            5622,
            24165,
            28841,
            16765,
            11239,
            12723,
            33160,
            25630,
            30146,
            22800,
            31467,
            28751,
            5195,
            5549,
            20267,
            21899,
            5799,
            18720,
            22697,
            6740,
            7393,
            10450,
            3359,
            1446,
            26032,
            24982,
            16141,
            854,
            366,
            20989,
            25841,
            31106,
            27380,
            20944,
            28238,
            27480,
            15951,
            8279,
            7569,
            11438,
            17507,
            16196,
            2227,
            17314,
            4360,
            25132,
            32836,
            4756,
            28852,
            12059,
            35180,
            32808,
            23080,
            5199,
            15616,
            3072,
            11405,
            26923,
            32656,
            23034,
            21999,
            34163,
            5427,
            5766,
            24573,
            25316,
            12418,
            35055,
            18253,
            5645,
            6991,
            1390,
            18115,
            9063,
            10570,
            29229,
            10126,
            34214,
            30732,
            5873,
            29688,
            3823,
            21810,
            13049,
            28226,
            19895,
            6551,
            7625,
            31638,
            7333,
            2170,
            8104,
            27917,
            9427,
            12566,
            28955,
            8599,
            14642,
            8702,
            9334,
            4898,
            35760,
            19074,
            32400,
            8168,
            31020,
            2575,
            22394,
            27595,
            9733,
            2025,
            34084,
            4771,
            34662,
            27740,
            24082,
            8486,
            33342,
            19793,
            3656,
            25733,
            29081,
            2968,
            1055,
            15777,
            6599,
            16112,
            2530,
            29927,
            3438,
            1992,
            1155,
            3729,
            28831,
            1664,
            8286,
            32678,
            17573,
            11915,
            28082,
            20886,
            30486,
            4924,
            32152,
            4231,
            28986,
            23009,
            15099,
            13774,
            23692,
            20606,
            17801,
            5139,
            1197,
            35539,
            58,
            10553,
            17456,
            19261,
            17383,
            9011,
            30427,
            933,
            31835,
            9639,
            29607,
            17080,
            11111,
            3130,
            13767,
            20072,
            26460,
            35979,
            19121,
            17126,
            17727,
            16310,
            1892,
            26143,
            4515,
            9126,
            21811,
            30994,
            22836,
            31261,
            6704,
            23961,
            32687,
            13017,
            33597,
            10818,
            13884,
            10010,
            31552,
            24880,
            879,
            7278,
            22373,
            17545,
            9689,
            34404,
            33814,
            35872,
            22606,
            31126,
            6506,
            21068,
            15908,
            26930,
            14003,
            21354,
            17974,
            22986,
            12901,
            17397,
            35199,
            10729,
            28764,
            36090,
            9467,
            16317,
            18689,
            22225,
            32493,
            19509,
            34117,
            7479,
            19280,
            17859,
            21594,
            11549,
            9939,
            2077,
            22093,
            4374,
            608,
            2909,
            34463,
            11587,
            31243,
            32876,
            14661,
            21991,
            35941,
            26165,
            21428,
            20794,
            32033,
            557,
            527,
            14441,
            21561,
            10164,
            19667,
            27489,
            3362,
            7051,
            8312,
            28734,
            22461,
            13749,
            6300,
            10478,
            23275,
            2613,
            13685,
            11265,
            13903,
            21654,
            11616,
            11635,
            12426,
            35271,
            35287,
            14089,
            20447,
            1858,
            4417,
            8265,
            627,
            32488,
            21091,
            27929,
            33216,
            36049,
            22444,
            32781,
            29104,
            20556,
            31224,
            30421,
            19931,
            13588,
            14602,
            9770,
            32577,
            9150,
            33747,
            27611,
            1692,
            5221,
            19105,
            7681,
            14625,
            23104,
            34512,
            25639,
            24875,
            12013,
            8804,
            35119,
            31011,
            18996,
            14693,
            25427,
            20164,
            9051,
            10759,
            1728,
            27862,
            23483,
            22667,
            26406,
            26300,
            15942,
            6141,
            15205,
            5264,
            25762,
            26872,
            29694,
            29584,
            27345,
            23131,
            959,
            24137,
            15184,
            22271,
            30538,
            6266,
            7154,
            17756,
            34986,
            12563,
            22971,
            29459,
            2615,
            8814,
            33086,
            18384,
            1565,
            15309,
            25799,
            19817,
            4608,
            27796,
            27958,
            5001,
            14588,
            9128,
            23064,
            14902,
            20191,
            15028,
            2732,
            29794,
            10803,
            29142,
            20429,
            10261,
            20616,
            17685,
            12804,
            14440,
            16685,
            28207,
            15453,
            25105,
            14847,
            19128,
            24702,
            14285,
            27635,
            3775,
            2743,
            22344,
            29678,
            15692,
            33574,
            32900,
            23896,
            8889,
            24199,
            13050,
            34349,
            374,
            385,
            31391,
            26733,
            35120,
            19100,
            4621,
            23005,
            10110,
            23687,
            15079,
            12359,
            20370,
            19555,
            19902,
            27801,
            9492,
            9050,
            22252,
            29120,
            34390,
            23997
        ],
        "test": [
            35647,
            30452,
            28461,
            34031,
            28933,
            25416,
            33746,
            25226,
            27379,
            35662,
            31059,
            33541,
            25447,
            26457,
            30816,
            30656,
            29734,
            35976,
            35236,
            30719,
            34991,
            30718,
            26314,
            29538,
            31120,
            28874,
            27074,
            34721,
            26839,
            25067,
            29986,
            29561,
            29553,
            28104,
            28836,
            34795,
            29592,
            34675,
            25517,
            30285,
            34448,
            25199,
            26275,
            34856,
            33862,
            29088,
            25673,
            28274,
            31709,
            34109,
            30567,
            35315,
            28390,
            33692,
            30626,
            34908,
            28661,
            26845,
            28452,
            33082,
            34988,
            27478,
            28064,
            32593,
            30815,
            27264,
            35349,
            31863,
            34385,
            32289,
            31923,
            28729,
            28418,
            31620,
            30729,
            31175,
            27268,
            29079,
            26095,
            29097,
            35901,
            29488,
            32367,
            33439,
            30186,
            32688,
            28011,
            28147,
            31971,
            28512,
            28398,
            26840,
            29991,
            31445,
            29214,
            30252,
            35119,
            27314,
            26266,
            31877,
            29464,
            32578,
            30523,
            35853,
            27112,
            27329,
            33857,
            28046,
            28093,
            25211,
            29543,
            29894,
            35470,
            33247,
            33331,
            26448,
            29954,
            27740,
            28235,
            26601,
            27689,
            34963,
            31613,
            27398,
            27001,
            28761,
            34303,
            28896,
            34339,
            35212,
            30792,
            31357,
            32548,
            33808,
            34534,
            26534,
            25756,
            35845,
            29830,
            32920,
            26566,
            29976,
            27317,
            30846,
            32134,
            31428,
            31726,
            34458,
            34572,
            28529,
            28738,
            29993,
            27482,
            32158,
            31408,
            26592,
            29236,
            27864,
            29944,
            32199,
            30575,
            31479,
            28991,
            26026,
            30316,
            26181,
            28477,
            34121,
            34913,
            27764,
            32425,
            32327,
            32553,
            27144,
            25278,
            33574,
            27175,
            29557,
            31729,
            34273,
            30956,
            31320,
            24954,
            27049,
            30646,
            31034,
            30446,
            32362,
            25628,
            28908,
            27305,
            26477,
            32214,
            31536,
            27137,
            28217,
            34317,
            29978,
            29129,
            30573,
            28048,
            25505,
            35728,
            32293,
            29599,
            33193,
            32422,
            29366,
            32897,
            31278,
            33320,
            29483,
            27680,
            31218,
            25234,
            32117,
            27361,
            29895,
            28669,
            25921,
            30810,
            29243,
            30242,
            33100,
            35017,
            30382,
            36005,
            33032,
            30428,
            32864,
            27332,
            30145,
            28623,
            35428,
            28488,
            26962,
            33386,
            30680,
            31021,
            28366,
            35533,
            26647,
            35000,
            29716,
            33512,
            27906,
            25504,
            29126,
            34477,
            28191,
            33254,
            31298,
            33917,
            32382,
            27907,
            26211,
            32531,
            32035,
            32073,
            26054,
            25495,
            34256,
            26519,
            32473,
            25386,
            26846,
            29562,
            30863,
            25207,
            28380,
            35752,
            33640,
            30459,
            27791,
            25822,
            32919,
            27679,
            35049,
            33302,
            34669,
            34617,
            35322,
            27492,
            30912,
            34831,
            32608,
            31449,
            34075,
            33635,
            32862,
            34807,
            31013,
            33042,
            33181,
            34898,
            25478,
            27336,
            27806,
            35722,
            34343,
            26869,
            34801,
            34074,
            33646,
            35968,
            27582,
            30597,
            27749,
            28843,
            27227,
            33847,
            26223,
            28867,
            32883,
            26758,
            28943,
            35130,
            29728,
            26254,
            31364,
            27202,
            31937,
            32436,
            30197,
            36007,
            33060,
            33323,
            26817,
            26911,
            29401,
            26357,
            35450,
            31427,
            33301,
            25636,
            29995,
            26224,
            35941,
            29233,
            34359,
            28857,
            32360,
            35442,
            25823,
            24818,
            28541,
            32755,
            28202,
            31641,
            31314,
            27677,
            30029,
            35003,
            34995,
            30861,
            26939,
            29316,
            27964,
            32048,
            25564,
            32082,
            26447,
            32571,
            25852,
            28939,
            32875,
            25017,
            29477,
            28696,
            28823,
            28170,
            28878,
            30241,
            25037,
            27995,
            30934,
            35391,
            30423,
            32201,
            25541,
            32067,
            27551,
            34212,
            32942,
            30090,
            30906,
            35644,
            25009,
            26722,
            28821,
            30583,
            26716,
            26697,
            27319,
            29399,
            35787,
            26951,
            28179,
            25338,
            31645,
            27462,
            33161,
            31485,
            33149,
            31317,
            29746,
            33069,
            29896,
            31148,
            30911,
            35844,
            29987,
            34638,
            27406,
            31159,
            31934,
            33874,
            32654,
            30284,
            32410,
            28455,
            32560,
            25337,
            35660,
            28755,
            26609,
            30504,
            34027,
            26313,
            32619,
            26900,
            29013,
            35301,
            25038,
            29304,
            33561,
            30553,
            26505,
            27411,
            26437,
            25002,
            29768,
            35248,
            34433,
            35871,
            33463,
            30965,
            35793,
            31529,
            27154,
            25929,
            29070,
            32085,
            26543,
            32853,
            27711,
            29413,
            25966,
            33781,
            27636,
            32455,
            29264,
            29676,
            36029,
            24812,
            30318,
            28642,
            34341,
            25070,
            31883,
            34329,
            25902,
            27088,
            34804,
            30549,
            31782,
            34641,
            32503,
            30110,
            27468,
            25375,
            28885,
            33955,
            25114,
            27079,
            32539,
            32427,
            30074,
            26530,
            29806,
            27626,
            34381,
            27293,
            25854,
            36048,
            25181,
            24933,
            28719,
            30149,
            27557,
            26349,
            34994,
            33374,
            29645,
            32797,
            34386,
            32155,
            28879,
            35749,
            27231,
            32549,
            33726,
            25033,
            26294,
            27021,
            32786,
            30016,
            30929,
            24834,
            27126,
            33107,
            27665,
            28647,
            34697,
            32670,
            29827,
            33410,
            34626,
            29833,
            33598,
            34017,
            33866,
            33294,
            25458,
            33448,
            34513,
            31767,
            35565,
            30424,
            29533,
            34364,
            27828,
            28262,
            27431,
            31957,
            29403,
            26743,
            32580,
            34187,
            35768,
            34366,
            28903,
            35835,
            33457,
            26495,
            27658,
            34004,
            29690,
            30660,
            32830,
            34792,
            28230,
            31220,
            29215,
            26228,
            27876,
            31462,
            30650,
            32623,
            35574,
            25252,
            33656,
            29856,
            29269,
            35702,
            26700,
            27010,
            31808,
            25310,
            31773,
            32727,
            32975,
            30784,
            25045,
            32004,
            35095,
            31852,
            34242,
            29909,
            25342,
            33211,
            36016,
            27407,
            36054,
            28951,
            29758,
            32805,
            26504,
            27454,
            33919,
            28523,
            32463,
            34063,
            32729,
            33141,
            33522,
            32267,
            26830,
            31107,
            30362,
            31596,
            35872,
            33113,
            28907,
            30895,
            32933,
            28777,
            25713,
            32906,
            24842,
            32728,
            35184,
            32266,
            33596,
            28384,
            29290,
            36049,
            33405,
            25591,
            27170,
            26007,
            28534,
            32682,
            32778,
            29174,
            26936,
            26320,
            32903,
            31573,
            28264,
            31839,
            29421,
            35324,
            32339,
            24896,
            28840,
            26811,
            35259,
            26555,
            30556,
            34759,
            28447,
            33319,
            29898,
            27200,
            25800,
            31660,
            31629,
            31560,
            26272,
            26689,
            25984,
            35115,
            24938,
            32639,
            29578,
            26699,
            24824,
            25975,
            29851,
            32342,
            31310,
            24894,
            32054,
            28239,
            34575,
            31313,
            27236,
            31178,
            35285,
            34910,
            28251,
            32126,
            29877,
            35544,
            35403,
            29866,
            35096,
            27704,
            32206,
            28247,
            27042,
            27549,
            24920,
            35547,
            31976,
            34432,
            28310,
            28950,
            28497,
            29638,
            34119,
            31663,
            27630,
            33326,
            35398,
            29226,
            25018,
            35560,
            33820,
            32159,
            25886,
            27501,
            27265,
            31496,
            34479,
            31467,
            33087,
            31572,
            33398,
            26958,
            34235,
            27115,
            25811,
            27529,
            35963,
            28175,
            32116,
            27999,
            30798,
            28810,
            35148,
            25384,
            29849,
            35891,
            28632,
            26229,
            34739,
            30676,
            26907,
            32515,
            29571,
            33650,
            25573,
            34588,
            33050,
            29544,
            28570,
            24888,
            24960,
            30813,
            33384,
            32078,
            33620,
            33739,
            35198,
            34830,
            31965,
            33214,
            35541,
            32307,
            27902,
            28499,
            30740,
            30998,
            31662,
            28597,
            31454,
            29888,
            31753,
            34639,
            35481,
            26899,
            33837,
            32290,
            27101,
            29212,
            33173,
            34522,
            27583,
            26546,
            35383,
            26719,
            31343,
            24914,
            30264,
            25258,
            30195,
            29476,
            26963,
            34159,
            36039,
            27375,
            34790,
            34948,
            35770,
            31162,
            28699,
            31032,
            33938,
            25714,
            25797,
            29537,
            31344,
            27093,
            32525,
            35955,
            26406,
            35771,
            27954,
            34605,
            27003,
            25096,
            35402,
            27580,
            25405,
            29273,
            25905,
            25062,
            30022,
            34613,
            25884,
            30628,
            28607,
            35690,
            26764,
            26202,
            26215,
            33543,
            31980,
            26726,
            32742,
            31628,
            29992,
            34561,
            31001,
            27313,
            30148,
            26545,
            24890,
            30705,
            29036,
            26417,
            28355,
            29280,
            27337,
            28680,
            34093,
            34410,
            27118,
            35792,
            31865,
            31054,
            25758,
            29210,
            26938,
            33037,
            32046,
            24895,
            29693,
            30272,
            27602,
            25489,
            31474,
            29359,
            33786,
            35938,
            25553,
            32680,
            32701,
            34447,
            28585,
            24928,
            32703,
            26931,
            33203,
            30910,
            25479,
            34502,
            25334,
            27280,
            35623,
            36069,
            25753,
            32007,
            34543,
            33244,
            28610,
            25867,
            34489,
            26160,
            30134,
            34932,
            30605,
            30202,
            29232,
            35825,
            26170,
            34374,
            29208,
            31699,
            28445,
            26898,
            26311,
            29222,
            35099,
            27587,
            36090,
            34645,
            35759,
            31084,
            28304,
            35799,
            26001,
            26267,
            30839,
            32818,
            26854,
            34106,
            26027,
            32310,
            31745,
            35618,
            25632,
            32559,
            26401,
            25134,
            34563,
            32275,
            26155,
            33990,
            33977,
            28139,
            35299,
            32685,
            34388,
            33077,
            26812,
            33415,
            33569,
            34962,
            26800,
            34007,
            26040,
            29099,
            31657,
            33668,
            31500,
            30975,
            25919,
            35034,
            27381,
            35886,
            29747,
            33184,
            26641,
            27244,
            35459,
            26286,
            25036,
            32719,
            35724,
            24885,
            27673,
            26062,
            34162,
            26399,
            27257,
            25429,
            31360,
            34226,
            30963,
            25408,
            26132,
            32672,
            27486,
            26562,
            30733,
            30757,
            32258,
            34755,
            28974,
            32813,
            27071,
            25750,
            30841,
            32768,
            29485,
            25848,
            25307,
            31086,
            30200,
            26996,
            33199,
            26073,
            28775,
            30883,
            32195,
            26973,
            27786
        ],
        "train": [
            16439,
            3408,
            12264,
            1516,
            9091,
            8564,
            8129,
            5998,
            5687,
            20965,
            5865,
            22429,
            23315,
            3486,
            886,
            4769,
            20719,
            2545,
            5124,
            4818,
            10736,
            3716,
            1680,
            5577,
            19998,
            10009,
            13725,
            19524,
            22797,
            17418,
            22601,
            21973,
            9305,
            17877,
            1552,
            5291,
            841,
            2385,
            4568,
            21823,
            21249,
            15199,
            342,
            9246,
            17518,
            20931,
            3428,
            13107,
            10358,
            23586,
            18493,
            8187,
            1218,
            21587,
            20882,
            11731,
            517,
            7757,
            10661,
            10273,
            21062,
            11158,
            15474,
            20519,
            13028,
            9143,
            9106,
            186,
            17296,
            18633,
            11271,
            4852,
            14664,
            8028,
            5545,
            23347,
            12225,
            13358,
            4050,
            12132,
            19588,
            12812,
            19822,
            12577,
            10022,
            14820,
            22681,
            22842,
            9259,
            9832,
            22165,
            2680,
            4836,
            17663,
            119,
            19339,
            23069,
            1528,
            3582,
            13001,
            3651,
            11025,
            24470,
            12470,
            1816,
            2029,
            5338,
            7,
            14174,
            14130,
            15823,
            7682,
            3934,
            17208,
            3729,
            14569,
            15873,
            12940,
            956,
            15905,
            21755,
            24291,
            7294,
            21142,
            10385,
            6338,
            5719,
            6719,
            20352,
            2137,
            19140,
            10622,
            15793,
            20066,
            11775,
            17718,
            24546,
            15550,
            12730,
            7893,
            21752,
            21047,
            24233,
            24440,
            4319,
            9957,
            21015,
            9365,
            8371,
            5116,
            15087,
            924,
            21474,
            19942,
            2631,
            6369,
            23459,
            11256,
            11723,
            16370,
            489,
            16481,
            21304,
            4586,
            18305,
            14227,
            3857,
            13410,
            9229,
            10189,
            9764,
            20467,
            23523,
            3382,
            16226,
            11396,
            14860,
            17272,
            20806,
            14495,
            13726,
            20596,
            717,
            23178,
            18107,
            5631,
            13635,
            10761,
            14171,
            10674,
            21720,
            9746,
            8194,
            20392,
            5823,
            3275,
            15016,
            4245,
            16598,
            20673,
            6098,
            15843,
            11506,
            18213,
            3415,
            7098,
            21204,
            5084,
            15630,
            17784,
            21368,
            5429,
            7175,
            13402,
            16461,
            6091,
            18066,
            18821,
            12231,
            15914,
            11727,
            23500,
            7189,
            23146,
            10054,
            2011,
            16786,
            2012,
            21540,
            24414,
            15425,
            22348,
            1005,
            24617,
            20282,
            24562,
            16573,
            10763,
            5824,
            22944,
            6315,
            10788,
            1479,
            12189,
            17921,
            2298,
            6960,
            17090,
            5022,
            15092,
            3253,
            15658,
            1470,
            5737,
            3640,
            5650,
            18967,
            8591,
            24570,
            7674,
            24726,
            6603,
            5173,
            13971,
            10930,
            10693,
            2525,
            10161,
            4330,
            14946,
            9026,
            10457,
            16733,
            2319,
            1994,
            12123,
            23282,
            1484,
            19881,
            6448,
            18065,
            19089,
            18173,
            10671,
            1141,
            14393,
            2208,
            18001,
            24682,
            21946,
            16103,
            1685,
            23507,
            24610,
            14221,
            19388,
            13156,
            1266,
            5563,
            12774,
            17072,
            23527,
            6758,
            21777,
            9542,
            24434,
            11798,
            13027,
            1239,
            12753,
            429,
            20798,
            17657,
            1710,
            3579,
            20727,
            5757,
            14386,
            23002,
            21701,
            23361,
            22134,
            12066,
            2048,
            22476,
            12974,
            8790,
            590,
            789,
            19171,
            8279,
            7514,
            19497,
            4797,
            575,
            17353,
            8406,
            19707,
            8099,
            12549,
            8137,
            20995,
            20771,
            1991,
            14102,
            9290,
            3153,
            9408,
            11314,
            24748,
            4294,
            6625,
            638,
            24412,
            5962,
            21834,
            12807,
            22254,
            2540,
            21776,
            4650,
            19249,
            14888,
            8551,
            23102,
            7425,
            3330,
            19752,
            8970,
            24518,
            13170,
            9668,
            645,
            11794,
            15227,
            4251,
            13464,
            7273,
            24352,
            12514,
            482,
            21882,
            7771,
            19978,
            2841,
            14942,
            6933,
            11752,
            15509,
            12639,
            5117,
            21531,
            18856,
            6244,
            4514,
            1122,
            8605,
            22506,
            10760,
            3576,
            9336,
            2531,
            19558,
            6811,
            5316,
            10295,
            17167,
            23105,
            12989,
            6713,
            5747,
            2891,
            22166,
            18045,
            14034,
            21004,
            24664,
            8709,
            1311,
            5011,
            10706,
            17596,
            10765,
            13791,
            5027,
            15338,
            15216,
            12889,
            18700,
            3817,
            10843,
            9476,
            12740,
            15247,
            2440,
            2033,
            23329,
            20190,
            9188,
            9748,
            168,
            6226,
            23724,
            18320,
            11347,
            17895,
            5786,
            1777,
            21810,
            22939,
            7067,
            2045,
            11432,
            22734,
            12010,
            10906,
            12618,
            22120,
            15469,
            13399,
            14137,
            23139,
            12641,
            9224,
            9149,
            14458,
            12245,
            2992,
            6804,
            18021,
            21582,
            6989,
            6668,
            22495,
            2474,
            7951,
            20617,
            5992,
            11259,
            14530,
            15701,
            21263,
            13425,
            10300,
            746,
            4307,
            22130,
            19020,
            7250,
            3726,
            9474,
            16178,
            10108,
            15628,
            752,
            22822,
            3138,
            22304,
            14639,
            16528,
            16261,
            1844,
            5922,
            6883,
            779,
            14646,
            22612,
            19335,
            24104,
            6773,
            3916,
            10327,
            2983,
            22621,
            21478,
            13741,
            23208,
            17906,
            8021,
            18403,
            9524,
            8601,
            18017,
            2705,
            908,
            6209,
            18830,
            15312,
            5073,
            2002,
            1272,
            12011,
            7938,
            2642,
            11172,
            6028,
            15863,
            18589,
            11986,
            12869,
            7515,
            16136,
            7875,
            1371,
            15960,
            12363,
            6365,
            8988,
            158,
            22684,
            20803,
            18698,
            22706,
            18956,
            14293,
            7491,
            8502,
            14185,
            1048,
            21888,
            20014,
            7241,
            16656,
            21230,
            24258,
            11678,
            21916,
            23919,
            18344,
            22541,
            21425,
            3169,
            19226,
            18798,
            15955,
            5151,
            10743,
            19372,
            16630,
            18444,
            23874,
            17513,
            1358,
            13559,
            24293,
            6819,
            17960,
            15084,
            19618,
            15398,
            4312,
            15383,
            23070,
            7258,
            20111,
            5300,
            7069,
            13633,
            7263,
            18006,
            11006,
            14891,
            5184,
            22768,
            16924,
            20696,
            14148,
            2401,
            17126,
            5894,
            967,
            10270,
            6001,
            14831,
            22926,
            16041,
            6411,
            10773,
            24023,
            6552,
            7379,
            8716,
            7793,
            1242,
            5567,
            12607,
            10924,
            16550,
            10268,
            14640,
            3281,
            11140,
            22662,
            12134,
            23908,
            526,
            11303,
            21237,
            8159,
            12325,
            11942,
            19167,
            18064,
            10882,
            1529,
            4237,
            15315,
            6206,
            16177,
            20238,
            9096,
            12313,
            20279,
            16225,
            22787,
            21100,
            1356,
            5205,
            16821,
            2453,
            9563,
            1441,
            23272,
            22124,
            16870,
            3794,
            2191,
            16258,
            18640,
            12314,
            10945,
            19188,
            7685,
            1055,
            20196,
            21991,
            12216,
            8599,
            20202,
            6092,
            15725,
            14828,
            2105,
            3727,
            2430,
            3279,
            1065,
            19691,
            22239,
            12761,
            4972,
            19533,
            23167,
            16061,
            9559,
            71,
            2289,
            13224,
            7957,
            22207,
            10650,
            18435,
            14930,
            9914,
            10983,
            13963,
            16300,
            14744,
            11816,
            4960,
            19362,
            19105,
            5988,
            11562,
            23253,
            4111,
            23127,
            16382,
            2997,
            14338,
            18341,
            22483,
            11711,
            3111,
            14504,
            10744,
            3795,
            8711,
            10728,
            12817,
            11696,
            10281,
            22872,
            20189,
            3773,
            13072,
            6544,
            11675,
            20340,
            859,
            2381,
            820,
            17710,
            13538,
            11771,
            23953,
            3156,
            21354,
            15741,
            4940,
            7066,
            18851,
            5527,
            18842,
            21734,
            3832,
            21056,
            19279,
            13,
            15284,
            20199,
            8481,
            9108,
            13084,
            14353,
            9953,
            2456,
            5947,
            6177,
            14335,
            11049,
            9266,
            22844,
            13938,
            11090,
            8542,
            22807,
            24585,
            5686,
            12432,
            18070,
            120,
            11032,
            14086,
            15155,
            9965,
            9469,
            13293,
            2865,
            15978,
            231,
            23284,
            18100,
            9679,
            22829,
            15769,
            24737,
            8178,
            4008,
            5049,
            20082,
            1693,
            16171,
            15530,
            20214,
            24176,
            3644,
            5931,
            10658,
            10290,
            16320,
            14161,
            8828,
            2419,
            12854,
            15818,
            18732,
            12273,
            16199,
            22999,
            22799,
            12429,
            13577,
            15179,
            14625,
            21635,
            9380,
            199,
            18810,
            23861,
            9413,
            1412,
            15731,
            22827,
            23419,
            15051,
            13814,
            17082,
            22565,
            10113,
            268,
            4537,
            14763,
            20533,
            18394,
            12085,
            19840,
            15060,
            16277,
            11913,
            11405,
            13169,
            7315,
            14147,
            18313,
            6965,
            13504,
            16267,
            16381,
            17401,
            7732,
            23643,
            19800,
            8408,
            14561,
            466,
            16049,
            23318,
            14405,
            12531,
            9541,
            22358,
            23653,
            15172,
            18495,
            17890,
            4692,
            23170,
            17797,
            12930,
            20305,
            20242,
            9396,
            12674,
            6275,
            11719,
            16523,
            1833,
            3106,
            50,
            24282,
            9881,
            18555,
            11174,
            10630,
            2896,
            9320,
            9458,
            14016,
            7817,
            2789,
            20075,
            16884,
            19505,
            24521,
            23238,
            693,
            10625,
            17259,
            17283,
            2875,
            5930,
            12615,
            1256,
            20330,
            5191,
            1437,
            4363,
            7666,
            22542,
            9249,
            20712,
            16617,
            14734,
            11540,
            22118,
            14111,
            20421,
            9455,
            24578,
            13677,
            10943,
            439,
            15713,
            3202,
            14372,
            22095,
            5797,
            12460,
            1779,
            16,
            18478,
            16098,
            16505,
            3556,
            2667,
            12244,
            24143,
            7574,
            5526,
            3381,
            8503,
            9114,
            23534,
            14813,
            18926,
            9932,
            16044,
            9340,
            21633,
            11850,
            232,
            2398,
            8410,
            20277,
            12548,
            12199,
            22782,
            18217,
            10785,
            902,
            18554,
            20013,
            2470,
            20821,
            16676,
            24640,
            19197,
            10212,
            9665,
            6522,
            22902,
            21629,
            3519,
            20933,
            12610,
            12537,
            4737,
            19016,
            14798,
            3015,
            14939,
            18787,
            19754,
            23368,
            14249,
            12557,
            16289,
            4712,
            4171
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "pending": false,
    "predictors": [
        "pmid",
        "py",
        "py2",
        "py3",
        "minpol",
        "rbal",
        "lnkmdist"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR12b_Gleditsch_Ward_Structural_problem_TRAIN",
    "scoreOptions": {
        "evaluationMethod": "kFold",
        "folds": 10,
        "splitsFile": "dataSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "searchOptions": {
        "solutionsLimit": 5
    },
    "selectedSolutions": {
        "d3m": [
            "28482"
        ]
    },
    "solutions": {
        "d3m": {
            "28482": {
                "created": "2019-11-13T05:11:13.470686+00:00",
                "details_url": "/d3m-service/stored-response/4aa41df34a7274e2d1627117de8e3cd14c3171781eee2503c5e01bfe",
                "hash_id": "4aa41df34a7274e2d1627117de8e3cd14c3171781eee2503c5e01bfe",
                "id": 28482,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:11:13.493356+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28482,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/cb40bf80-d840-4bd9-84b7-f341d0cbebda.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/fc1aaad0-cf5c-42c2-98b7-4814590c8cc7.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9922985434532166
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28484": {
                "created": "2019-11-13T05:11:15.806329+00:00",
                "details_url": "/d3m-service/stored-response/81ad57787a2e4c8d58941d52ab37b28e6ecc1d93afc26d919b36116f",
                "hash_id": "81ad57787a2e4c8d58941d52ab37b28e6ecc1d93afc26d919b36116f",
                "id": 28484,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:11:15.839121+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28484,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/85dc6bd5-57c2-4f97-89a9-d35a9112c3e7.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/325536d4-014b-4e5d-8489-930729c0541e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9922985434532166
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28510": {
                "created": "2019-11-13T05:11:50.015603+00:00",
                "details_url": "/d3m-service/stored-response/7d29c803a16f70b34ea25a88dffdb88d820934445bc412a8fad1938b",
                "hash_id": "7d29c803a16f70b34ea25a88dffdb88d820934445bc412a8fad1938b",
                "id": 28510,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:11:50.040382+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.1
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28510,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/b0ecc377-a24e-457c-b5d6-9dd4751bd514.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/75419468-0273-435f-a745-6d44b9f1904f.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5256614089012146
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.992824912071228
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7567567825317383
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.10071942210197449
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.17777778208255768
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28512": {
                "created": "2019-11-13T05:11:54.059564+00:00",
                "details_url": "/d3m-service/stored-response/211cd8b5dae2c11a2a5f74ce3b7e2a28c5ea6fe1eecece6532677a8f",
                "hash_id": "211cd8b5dae2c11a2a5f74ce3b7e2a28c5ea6fe1eecece6532677a8f",
                "id": 28512,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:11:54.084610+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.1
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28512,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/ac88320c-45fe-4c47-b0ad-42d59d983f35.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/e506b175-82bf-47ee-9f77-21dca18bcd63.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5256614089012146
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.992824912071228
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7567567825317383
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.10071942210197449
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.17777778208255768
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28538": {
                "created": "2019-11-13T05:16:57.449120+00:00",
                "details_url": "/d3m-service/stored-response/3905806f783613bbf76479fa6b88a7eda9f818867457b7628702906e",
                "hash_id": "3905806f783613bbf76479fa6b88a7eda9f818867457b7628702906e",
                "id": 28538,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:16:57.473057+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.13255083088598382
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "8"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "378"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.6863190757236832
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28538,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/f2f1f71d-b226-4684-ab5e-9fa3ed6ade94.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/77410c20-ace9-4398-b1a4-5e8bb2a1d032.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5615602850914001
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9981161952018738
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9605262875556946
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7877697944641113
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8656126260757446
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28543": {
                "created": "2019-11-13T05:17:26.657637+00:00",
                "details_url": "/d3m-service/stored-response/dadc576b854c069c038b7566d944dc12d50fc0b744bb5b229a9dfaff",
                "hash_id": "dadc576b854c069c038b7566d944dc12d50fc0b744bb5b229a9dfaff",
                "id": 28543,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T05:17:26.694183+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.13255083088598382
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "8"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "378"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.6863190757236832
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28543,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/6605fc1c-5ed5-4833-93a2-e86d410443cc.csv",
                    "partials": "/ravens_volume/test_output/TR12b_Gleditsch_Ward_Structural/temp/6745c35b-2fa8-42c7-9cd9-0624ee7ce9d2.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5615602850914001
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9981161952018738
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9605262875556946
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7877697944641113
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8656126260757446
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        }
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitOptions": {
        "outOfSampleSplit": true,
        "splitsDir": "/ravens_volume/test_data/TR12b_Gleditsch_Ward_Structural/TRAIN/problem_TRAIN",
        "splitsFile": "sampleSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "mido"
    ],
    "task": "classification",
    "unedited": true
}