{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_492/2019-11-09_22-48-30/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_492/2019-11-09_22-48-31/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_492/2019-11-09_22-48-31/tables/learningData.csv"
    },
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_492/2019-11-09_22-48-30/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_492/2019-11-09_22-48-31/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_492/2019-11-09_22-48-31/datasetDoc.json"
    },
    "evaluationMethod": "holdOut",
    "indices": {
        "all": [
            2215,
            5019,
            1654,
            4579,
            5922,
            4280,
            4301,
            2467,
            4126,
            4458,
            2845,
            2842,
            4269,
            1201,
            5904,
            1076,
            2436,
            2809,
            449,
            4737,
            5573,
            2703,
            5580,
            5730,
            3535,
            3684,
            5252,
            4673,
            4249,
            1018,
            2757,
            1110,
            5496,
            4473,
            2934,
            6914,
            2654,
            1095,
            7055,
            4181,
            2962,
            2661,
            5368,
            2066,
            4331,
            1082,
            6661,
            349,
            6273,
            4962,
            1342,
            6249,
            1262,
            1056,
            1075,
            4121,
            4749,
            1377,
            2123,
            3946,
            5259,
            5092,
            4580,
            2557,
            3608,
            2560,
            6971,
            2447,
            495,
            1012,
            3275,
            6177,
            5373,
            6860,
            2457,
            5091,
            6179,
            4342,
            6780,
            5805,
            2374,
            4261,
            4592,
            5001,
            4225,
            4616,
            1775,
            2533,
            6970,
            603,
            3210,
            6894,
            38,
            2075,
            5879,
            234,
            298,
            816,
            3934,
            3385,
            4705,
            1791,
            714,
            3184,
            5407,
            6590,
            78,
            1917,
            6265,
            1744,
            3987,
            3443,
            2154,
            2985,
            5179,
            3610,
            374,
            4675,
            1992,
            7154,
            6191,
            602,
            4678,
            6694,
            1921,
            335,
            893,
            5901,
            2413,
            2244,
            5709,
            27,
            3136,
            7020,
            5883,
            3682,
            789,
            7096,
            6635,
            5321,
            2767,
            5679,
            2357,
            2508,
            2294,
            174,
            5274,
            43,
            888,
            6091,
            291,
            2382,
            4483,
            3585,
            445,
            1122,
            7127,
            6047,
            6122,
            3299,
            4496,
            22,
            703,
            2881,
            5388,
            2210,
            6725,
            4687,
            2506,
            6509,
            5408,
            5543,
            423,
            2642,
            6435,
            6584,
            1412,
            132,
            4378,
            6623,
            905,
            2706,
            4216,
            3849,
            2407,
            2228,
            3677,
            295,
            525,
            5951,
            6316,
            4052,
            2947,
            6592,
            6105,
            6972,
            5256,
            5983,
            7118,
            2764,
            3071,
            5057,
            6777,
            5336,
            4981,
            3960,
            3623,
            4021,
            492,
            1325,
            4608,
            206,
            4503,
            5127,
            5141,
            11,
            5324,
            3884,
            1131,
            912,
            1756,
            1481,
            1910,
            4568,
            931,
            4653,
            5975,
            3125,
            2655,
            1050,
            7133,
            1729,
            512,
            812,
            3295,
            4961,
            6976,
            1525,
            159,
            4810,
            5644,
            2837,
            5708,
            3730,
            4911,
            104,
            4191,
            4300,
            3048,
            3314,
            3913,
            1302,
            2474,
            4578,
            357,
            6927,
            6215,
            936,
            4834,
            1915,
            2885,
            5560,
            2716,
            2698,
            373,
            6427,
            2704,
            4044,
            1469,
            4739,
            1515,
            5968,
            5588,
            5096,
            5309,
            4715,
            6450,
            1877,
            965,
            5089,
            6237,
            2834,
            4570,
            3999,
            5289,
            6943,
            3230,
            5967,
            654,
            311,
            1475,
            1324,
            4202,
            5896,
            2740,
            924,
            544,
            2343,
            2597,
            2162,
            838,
            2775,
            6986,
            5416,
            3743,
            6103,
            3300,
            2580,
            2427,
            783,
            4186,
            1628,
            2300,
            1843,
            2951,
            5042,
            2952,
            6915,
            6892,
            4372,
            5714,
            929,
            7023,
            1238,
            6670,
            5608,
            7125,
            5121,
            1716,
            1548,
            6143,
            671,
            906,
            1656,
            3909,
            3301,
            6402,
            678,
            3942,
            1606,
            1938,
            1113,
            6888,
            5239,
            4835,
            3138,
            3880,
            2201,
            3840,
            4124,
            2365,
            784,
            6357,
            5038,
            2623,
            5712,
            2587,
            5491,
            4043,
            7037,
            5003,
            887,
            1579,
            3291,
            3694,
            6101,
            1901,
            5402,
            6464,
            6816,
            3892,
            5353,
            2748,
            909,
            3180,
            1410,
            6703,
            2647,
            701,
            3213,
            5682,
            3334,
            4888,
            743,
            5234,
            3341,
            1402,
            1261,
            3243,
            1718,
            6715,
            3854,
            5432,
            4187,
            146,
            3081,
            2358,
            2289,
            323,
            7002,
            5054,
            2472,
            4925,
            4305,
            4232,
            3171,
            3322,
            737,
            1890,
            5470,
            2495,
            6744,
            1345,
            5645,
            1518,
            2927,
            2891,
            6253,
            1288,
            2531,
            2639,
            2454,
            5869,
            2537,
            1796,
            1753,
            6374,
            1011,
            6403,
            4172,
            4765,
            2095,
            4430,
            3403,
            6196,
            5704,
            1055,
            3003,
            1514,
            3392,
            5359,
            6617,
            5148,
            2478,
            6679,
            2938,
            5291,
            48,
            946,
            4312,
            2032,
            1002,
            5267,
            3801,
            5735,
            4959,
            5661,
            5049,
            6305,
            1701,
            5609,
            4530,
            6506,
            6292,
            5429,
            5173,
            1434,
            5606,
            5072,
            516,
            881,
            699,
            3270,
            7021,
            4815,
            5393,
            1297,
            982,
            5872,
            1826,
            5533,
            3518,
            4177,
            4099,
            4171,
            6180,
            5146,
            4515,
            3775,
            6877,
            4346,
            5537,
            3875,
            2053,
            2188,
            1214,
            5942,
            5539,
            6430,
            5292,
            2240,
            1020,
            2041,
            2168,
            4852,
            3152,
            6572,
            3885,
            786,
            3567,
            3597,
            6851,
            6788,
            2524,
            2920,
            6216,
            1070,
            1816,
            197,
            649,
            1507,
            6358,
            3146,
            1694,
            44,
            3036,
            5749,
            6810,
            2225,
            2970,
            4133,
            5330,
            3673,
            2435,
            3255,
            879,
            5006,
            5218,
            226,
            5966,
            6673,
            6325,
            1924,
            3156,
            5018,
            309,
            2800,
            2967,
            578,
            3668,
            3538,
            5341,
            2674,
            612,
            3078,
            5319,
            1991,
            4115,
            2329,
            4672,
            3389,
            2626,
            3242,
            2812,
            4003,
            3713,
            1898,
            799,
            6222,
            5013,
            687,
            2936,
            6201,
            1652,
            3128,
            978,
            6952,
            5663,
            2204,
            5558,
            6900,
            117,
            2847,
            7041,
            6424,
            5085,
            884,
            6505,
            3576,
            4289,
            3161,
            5273,
            1567,
            5571,
            3948,
            2599,
            4922,
            3188,
            3104,
            4143,
            1546,
            3758,
            6328,
            3493,
            1912,
            720,
            1222,
            2414,
            1871,
            2708,
            1364,
            5521,
            3164,
            1401,
            859,
            4692,
            3525,
            7027,
            3720,
            3400,
            370,
            341,
            6546,
            17,
            1493,
            6825,
            6332,
            5378,
            861,
            2619,
            1582,
            1502,
            193,
            5104,
            352,
            6564,
            4462,
            6686,
            6858,
            6953,
            1450,
            3381,
            1195,
            5744,
            5930,
            735,
            1873,
            4363,
            5724,
            3502,
            4095,
            6790,
            275,
            3815,
            2468,
            148,
            2916,
            6429,
            2570,
            4691,
            1250,
            5233,
            2282,
            5115,
            1881,
            3737,
            3388,
            5384,
            1508,
            3157,
            6085,
            5406,
            6013,
            4793,
            447,
            14,
            5419,
            987,
            37,
            6007,
            3916,
            6153,
            6605,
            6752,
            5476,
            5109,
            6490,
            5723,
            3014,
            2130,
            1103,
            6741,
            6246,
            1705,
            6022,
            5510,
            2742,
            6778,
            5031,
            25,
            5190,
            5552,
            1162,
            477,
            3214,
            4892,
            6950,
            3253,
            1650,
            4934,
            3342,
            3133,
            1360,
            5766,
            1231,
            3897,
            2141,
            2700,
            3074,
            1781,
            5767,
            3533,
            4204,
            4066,
            4443,
            2815,
            727,
            2050,
            6913,
            668,
            5483,
            3782,
            1209,
            752,
            2960,
            3729,
            2057,
            4276,
            1878,
            6344,
            4071,
            5381,
            6126,
            4352,
            5383,
            4419,
            1471,
            4618,
            3902,
            1188,
            863,
            5585,
            3986,
            4944,
            3127,
            5467,
            5132,
            4603,
            3256,
            4345,
            2118,
            1439,
            5067,
            3344,
            2923,
            1832,
            2950,
            1735,
            3294,
            4576,
            4421,
            3110,
            4723,
            3010,
            5685,
            4935,
            1374,
            6251,
            2984,
            5821,
            5523,
            382,
            5900,
            1585,
            5770,
            235,
            4513,
            1851,
            6166,
            2078,
            1104,
            1157,
            2993,
            3822,
            4467,
            3738,
            1905,
            6685,
            266,
            2099,
            2941,
            2582,
            3206,
            1464,
            5000,
            2547,
            555,
            2035,
            6458,
            6446,
            4983,
            1805,
            4083,
            3386,
            150,
            4954,
            2759,
            2595,
            4455,
            6228,
            1417,
            1575,
            3333,
            995,
            1213,
            5338,
            6093,
            1636,
            1557,
            5158,
            2440,
            6560,
            5845,
            5603,
            5058,
            2662,
            2614,
            573,
            4490,
            4158,
            4872,
            6387,
            3335,
            569,
            6501,
            1981,
            787,
            4299,
            488,
            2183,
            1630,
            5017,
            4441,
            4772,
            1330,
            5958,
            6431,
            24,
            399,
            5658,
            5399,
            4092,
            367,
            156,
            2863,
            6541,
            6094,
            685,
            3776,
            711,
            2263,
            661,
            791,
            4942,
            3527,
            910,
            7106,
            2295,
            4140,
            898,
            1260,
            3000,
            273,
            5855,
            766,
            4831,
            3405,
            7149,
            6738,
            6602,
            5950,
            6384,
            6961,
            6710,
            4762,
            5339,
            6203,
            6754,
            501,
            2959,
            6558,
            5629,
            2656,
            4355,
            5398,
            809,
            4760,
            2584,
            1848,
            1520,
            5836,
            3252,
            6753,
            3893,
            209,
            3789,
            4478,
            7097,
            7126,
            5489,
            6940,
            4266,
            2519,
            2400,
            2801,
            1477,
            4522,
            834,
            1936,
            188,
            901,
            4142,
            5455,
            3077,
            4039,
            4717,
            79,
            4781,
            6802,
            6704,
            2898,
            2441,
            57,
            1249,
            4134,
            3166,
            620,
            2293,
            5509,
            3284,
            5143,
            2538,
            823,
            2229,
            2879,
            3479,
            3895,
            7049,
            1391,
            1608,
            454,
            3418,
            4153,
            4429,
            5555,
            2388,
            536,
            595,
            3162,
            5460,
            448,
            3433,
            6444,
            5938,
            3936,
            7076,
            7119,
            377,
            6225,
            3234,
            4884,
            1254,
            7146,
            2148,
            514,
            6849,
            6231,
            3059,
            4891,
            1079,
            5981,
            2825,
            3941,
            3819,
            4456,
            5998,
            4841,
            7064,
            6537,
            2692
        ],
        "test": [
            4146,
            5561,
            725,
            3079,
            6068,
            6920,
            5326,
            2340,
            5009,
            4127,
            3220,
            4692,
            6777,
            4126,
            3359,
            6818,
            5492,
            4015,
            773,
            5992,
            371,
            2122,
            1870,
            5304,
            90,
            2188,
            5360,
            3731,
            4627,
            3761,
            2249,
            3241,
            3014,
            1979,
            2588,
            3776,
            6657,
            6714,
            6550,
            5998,
            2270,
            7124,
            3656,
            451,
            6517,
            302,
            635,
            6696,
            4759,
            5206,
            3380,
            6146,
            252,
            3039,
            1585,
            7062,
            4772,
            4879,
            4494,
            1343,
            2955,
            124,
            1625,
            5926,
            1290,
            2796,
            776,
            6134,
            6816,
            3740,
            4750,
            3013,
            6224,
            2587,
            3479,
            4429,
            5649,
            6627,
            5833,
            779,
            2058,
            1399,
            3276,
            3042,
            1669,
            3375,
            4623,
            2911,
            6110,
            1916,
            388,
            6938,
            5565,
            3910,
            6820,
            3989,
            2971,
            6446,
            5941,
            2841,
            381,
            2959,
            5794,
            2948,
            6676,
            5773,
            4188,
            3311,
            1632,
            3888,
            148,
            987,
            29,
            6407,
            2234,
            5339,
            1363,
            6135,
            6640,
            2657,
            526,
            811,
            4312,
            535,
            1670,
            6683,
            6826,
            2714,
            1520,
            502,
            5286,
            5922,
            113,
            5175,
            1837,
            5889,
            140,
            849,
            7102,
            2705,
            5744,
            224,
            1906,
            3598,
            5950,
            1235,
            2014,
            3542,
            4041,
            4518,
            951,
            2738,
            1330,
            5335,
            661,
            4050,
            2537,
            5036,
            3160,
            3343,
            2425,
            6628,
            854,
            4434,
            1116,
            4035,
            1139,
            3304,
            5777,
            1106,
            1889,
            4309,
            4808,
            2224,
            4121,
            5664,
            6204,
            5154,
            917,
            806,
            4320,
            5738,
            2640,
            938,
            4237,
            6097,
            1351,
            3619,
            6013,
            3733,
            6815,
            3388,
            1736,
            7084,
            601,
            5027,
            5057,
            5640,
            159,
            613,
            1370,
            660,
            4166,
            4994,
            939,
            5145,
            5663,
            4932,
            5921,
            1564,
            3460,
            5067,
            3508,
            2929,
            1666,
            2619,
            6739,
            420,
            2983,
            4244,
            6626,
            825,
            4473,
            2535,
            5765,
            4346,
            5999,
            4991,
            4076,
            1277,
            4430,
            3182,
            1529,
            3648,
            1578,
            1042,
            4271,
            4675,
            4712,
            1377,
            2182,
            3580,
            1031,
            4809,
            684,
            2769,
            4400,
            2570,
            2838,
            1751,
            1536,
            1085,
            4556,
            6530,
            4661,
            7030,
            2939,
            5170,
            840,
            1580,
            3202,
            4674,
            33,
            6231,
            4119,
            4676,
            8,
            1654,
            5038,
            1891,
            1270,
            2972,
            1513,
            642,
            2455,
            4655,
            731,
            6226,
            5291,
            6483,
            4337,
            188,
            2355,
            3471,
            4858,
            31,
            771,
            5173,
            5852,
            4088,
            1220,
            541,
            2426,
            2853,
            6225,
            3891,
            5619,
            3027,
            3184,
            2585,
            5279,
            923,
            6119,
            1008,
            4017,
            2148,
            3051,
            244,
            6718,
            472,
            4281,
            6736,
            4658,
            4730,
            1547,
            5128,
            414,
            6269,
            4397,
            6108,
            826,
            1688,
            30,
            2243,
            2213,
            1460,
            2553,
            6423,
            4463,
            1595,
            4561,
            1246,
            295,
            3411,
            5486,
            4077,
            5420,
            7053,
            3426,
            5964,
            429,
            5292,
            2752,
            7099,
            5982,
            2038,
            3937,
            2735,
            65,
            6047,
            1983,
            5993,
            4993,
            4694,
            6039,
            7021,
            831,
            454,
            142,
            227,
            361,
            2719,
            70,
            6659,
            4197,
            3651,
            3162,
            1063,
            1357,
            2604,
            1702,
            6288,
            4640,
            3110,
            3677,
            396,
            994,
            6893,
            1267,
            1939,
            2306,
            6085,
            1845,
            912,
            2938,
            6929,
            4832,
            2644,
            1172,
            3960,
            7101,
            2518,
            7085,
            5073,
            3417,
            2171,
            3992,
            2672,
            6,
            2560,
            5613,
            3050,
            5707,
            1531,
            7105,
            5577,
            5137,
            4731,
            2189,
            5990,
            5218,
            1926,
            2303,
            2650,
            6465,
            872,
            5645,
            5386,
            2027,
            2797,
            4425,
            3786,
            6112,
            6123,
            4732,
            2029,
            2407,
            4643,
            4943,
            4347,
            3900,
            409,
            7137,
            4752,
            5113,
            1083,
            6028,
            317,
            3950,
            4360,
            574,
            2652,
            3943,
            1571,
            6500,
            6611,
            6276,
            976,
            1722,
            5445,
            5201,
            2285,
            2468,
            6708,
            4480,
            1019,
            3021,
            5579,
            5489,
            1961,
            2241,
            2661,
            4608,
            1819,
            6171,
            1319,
            5693,
            1086,
            1563,
            2200,
            4013,
            2266,
            3294,
            3019,
            4928,
            3453,
            3567,
            1456,
            3222,
            5451,
            978,
            3443,
            3563,
            1121,
            520,
            2795,
            6600,
            2031,
            4160,
            2635,
            6800,
            5793,
            3700,
            6625,
            6109,
            1332,
            1831,
            1248,
            557,
            1315,
            5607,
            6968,
            6998,
            2843,
            6693,
            2359,
            1326,
            6852,
            3735,
            1386,
            4846,
            217,
            1216,
            5092,
            4310,
            6936,
            1369,
            5616,
            4506,
            3682,
            5920,
            4396,
            6233,
            5470,
            4693,
            4466,
            1771,
            4298,
            4686,
            4877,
            4557,
            4769,
            3828,
            1281,
            1766,
            847,
            5943,
            3836,
            5333,
            4105,
            3156,
            6340,
            3955,
            2404,
            5911,
            2658,
            5023,
            5854,
            3424,
            1189,
            1545,
            2247,
            3520,
            641,
            88,
            6358,
            238,
            1192,
            532,
            4615,
            7025,
            5433,
            2861,
            2630,
            4639,
            3885,
            828,
            333,
            5354,
            6406,
            5702,
            4995,
            3192,
            12,
            347,
            6707,
            3890,
            7007,
            2708,
            4992,
            5556,
            3073,
            2111,
            4563,
            2643,
            1327,
            6542,
            548,
            3601,
            3723,
            5516,
            4031,
            3066,
            3166,
            2262,
            187,
            621,
            4662,
            1840,
            4550,
            4749,
            1098,
            14,
            7113,
            559,
            1364,
            1815,
            3991,
            6150,
            3325,
            1045,
            4530,
            1168,
            4631,
            156,
            2932,
            4812,
            5900,
            5667,
            7092,
            6287,
            2293,
            4818,
            4389,
            1540,
            864,
            2470,
            378,
            4021,
            4074,
            2381,
            575,
            2081,
            5141,
            1448,
            2481,
            4927,
            3780,
            322,
            6774,
            1511,
            1835,
            6405,
            6038,
            34,
            5676,
            5398,
            6160,
            5242,
            1644,
            2011,
            5183,
            3284,
            2731,
            5049,
            1957,
            4862,
            6078,
            1206,
            3672,
            3434,
            666,
            7069,
            495,
            5633,
            1467,
            2966,
            6752,
            1145,
            1237,
            6842,
            2943,
            4957,
            873,
            296,
            2030,
            5927,
            2632,
            863,
            6986,
            6052,
            3904,
            1657,
            3582,
            4513,
            5530,
            4084,
            4311,
            6860,
            624,
            456,
            4746,
            1830,
            539,
            5301,
            3357,
            2898,
            7138,
            5124,
            3428,
            4056,
            6822,
            2006,
            72,
            3315,
            1833,
            695,
            6117,
            3059,
            4097,
            718,
            4288,
            5257,
            2194,
            4441,
            5450,
            4447,
            1013,
            4224,
            3481,
            5980,
            2161,
            6875,
            5848,
            5234,
            4937,
            5615,
            1361,
            2550,
            6307,
            3788,
            5040,
            878,
            308,
            6864,
            66,
            7019,
            1391,
            2572,
            4660,
            7089,
            5770,
            584,
            3348,
            888,
            2958,
            2100,
            916,
            2805,
            6070,
            6452,
            3457,
            44,
            4834,
            5592,
            899,
            223,
            2755,
            4265,
            5868,
            4987,
            608,
            3759,
            3352,
            5752,
            6688,
            3083,
            5621,
            4734,
            1262,
            3320,
            1453,
            3353,
            4514,
            4194,
            7145,
            5722,
            1848,
            4695,
            3322,
            2346,
            949,
            2920,
            6096,
            3775,
            6139,
            450,
            3935,
            7136,
            543,
            1213,
            3750,
            3305,
            4671,
            1334,
            2847,
            4654,
            4804,
            1843,
            893,
            5198,
            5225,
            5122,
            6297,
            509,
            4247,
            733,
            1824,
            5694,
            2137,
            4164,
            6532,
            2946,
            5363,
            3251,
            4527,
            5724,
            5598,
            2152,
            2923,
            6071,
            2043,
            1590,
            5655,
            69,
            3448,
            6754,
            4744,
            2417,
            5712,
            1928,
            4316,
            20,
            6928,
            6411,
            6092,
            713,
            5010,
            1455,
            4911,
            2162,
            2070,
            4140,
            6454,
            6584,
            4805,
            6553,
            3594,
            4774,
            2702,
            3242,
            6283,
            4270,
            36,
            1555,
            4109,
            1995,
            5790,
            5560,
            6156,
            1422,
            5904,
            282,
            5631,
            5264,
            1087,
            5080,
            6154,
            3635,
            2877,
            6990,
            2579,
            1568,
            521,
            4406,
            6363,
            2653,
            5568,
            3842,
            7116,
            1003,
            4946,
            2799,
            3779,
            6641,
            1573,
            1892,
            5197,
            867,
            5340,
            2516,
            4162,
            1922,
            5375,
            6439,
            1170,
            2067,
            2917,
            1867,
            4431,
            3879,
            3213,
            6381,
            119,
            5612,
            4476,
            2126,
            5002,
            3892,
            352,
            5646,
            5246,
            1712,
            6944,
            6203,
            3181,
            5862,
            152,
            1108,
            4388,
            3639,
            4340,
            394,
            4649,
            4287,
            3000,
            6908,
            2664,
            2602,
            1974,
            1247,
            2091,
            1261,
            1622,
            3028,
            1785,
            3495,
            241,
            7082,
            1379,
            5139,
            3856,
            812,
            1656,
            979,
            5331,
            1949,
            6636,
            5269,
            4872,
            6668,
            1411,
            6464,
            2580,
            6510,
            634,
            871,
            1526,
            841,
            3944,
            843,
            2350,
            3545,
            6327,
            6456,
            3688,
            4133,
            3681,
            6094,
            220,
            4205,
            6907,
            1035,
            5527,
            2460,
            5353,
            4027,
            380,
            4148,
            4314,
            5898,
            5796,
            6257,
            3965,
            5683,
            4355,
            3119,
            257,
            4424,
            5132,
            4443,
            3074,
            4917,
            2429,
            5634,
            6023,
            6886,
            346,
            5704,
            4848
        ],
        "train": [
            7034,
            1923,
            1417,
            4791,
            6650,
            689,
            4981,
            3264,
            2921,
            6813,
            1727,
            3592,
            6222,
            5653,
            1202,
            5280,
            5041,
            2502,
            3810,
            4519,
            387,
            2286,
            896,
            814,
            196,
            5465,
            1081,
            922,
            2384,
            3329,
            3809,
            2160,
            6878,
            6587,
            1599,
            478,
            3560,
            2441,
            3547,
            3456,
            5144,
            3549,
            7093,
            3747,
            1190,
            7042,
            1447,
            5075,
            3613,
            1647,
            6326,
            4373,
            1964,
            5679,
            2120,
            3945,
            4845,
            3382,
            1866,
            1256,
            4200,
            832,
            2863,
            970,
            4524,
            45,
            3030,
            2405,
            4572,
            255,
            5762,
            3403,
            3175,
            5477,
            2231,
            393,
            4040,
            3818,
            1739,
            6184,
            1911,
            3126,
            6252,
            2897,
            6175,
            2275,
            4481,
            2506,
            6259,
            6538,
            5318,
            6961,
            3001,
            3061,
            6702,
            563,
            2944,
            1753,
            627,
            6102,
            6074,
            1440,
            3185,
            3707,
            640,
            2954,
            5661,
            3638,
            643,
            3703,
            40,
            3756,
            4165,
            6107,
            234,
            4142,
            4900,
            1419,
            5914,
            6932,
            4413,
            1931,
            3591,
            6832,
            6201,
            4802,
            4700,
            94,
            3898,
            2061,
            5118,
            5879,
            1111,
            2751,
            4297,
            3333,
            5408,
            4414,
            4893,
            540,
            2341,
            6602,
            2815,
            1577,
            5290,
            5254,
            3839,
            7070,
            6392,
            6948,
            6870,
            3017,
            2716,
            6186,
            3540,
            4172,
            6211,
            943,
            300,
            1743,
            1679,
            1972,
            2117,
            6765,
            4811,
            4558,
            89,
            1636,
            3742,
            2692,
            3172,
            3784,
            2101,
            6727,
            5196,
            5410,
            3143,
            4770,
            6036,
            5732,
            4078,
            6974,
            4464,
            2906,
            505,
            5310,
            3800,
            4585,
            4190,
            5193,
            1999,
            4472,
            6773,
            3138,
            3415,
            4022,
            6755,
            4768,
            2421,
            5604,
            7086,
            741,
            1404,
            2391,
            5314,
            3108,
            2,
            3600,
            4885,
            2276,
            3058,
            2511,
            2400,
            619,
            6431,
            4293,
            406,
            3607,
            809,
            6552,
            1724,
            4068,
            5956,
            5778,
            5535,
            602,
            3127,
            4509,
            5374,
            797,
            2869,
            1260,
            5273,
            449,
            2659,
            2143,
            1619,
            3274,
            5979,
            5226,
            1527,
            2510,
            2072,
            4810,
            4680,
            807,
            614,
            4044,
            0,
            6261,
            364,
            740,
            808,
            4267,
            2244,
            4763,
            6220,
            4173,
            4919,
            1910,
            3345,
            5512,
            3764,
            1349,
            1134,
            2363,
            2001,
            4286,
            3210,
            27,
            7098,
            820,
            2882,
            354,
            5669,
            7006,
            4575,
            4616,
            3781,
            6589,
            7002,
            6819,
            327,
            6633,
            3787,
            941,
            1094,
            4697,
            1057,
            907,
            6370,
            1857,
            6237,
            3729,
            3161,
            5131,
            5789,
            6941,
            6236,
            397,
            1627,
            1221,
            6924,
            460,
            494,
            3579,
            6844,
            4740,
            6764,
            1559,
            637,
            5174,
            4444,
            4202,
            4274,
            2083,
            6461,
            3826,
            676,
            6058,
            6291,
            1389,
            2166,
            2289,
            6280,
            3120,
            3452,
            6614,
            3134,
            5528,
            2414,
            4889,
            5285,
            5442,
            3283,
            2620,
            6414,
            727,
            4412,
            5217,
            6546,
            4898,
            6031,
            668,
            2108,
            5740,
            3034,
            3618,
            2519,
            6926,
            4930,
            1492,
            4250,
            4206,
            4167,
            2135,
            1907,
            3445,
            21,
            6281,
            7149,
            5158,
            6467,
            6200,
            2394,
            7004,
            4571,
            3716,
            6404,
            2721,
            3296,
            3435,
            431,
            2828,
            3768,
            2393,
            6569,
            606,
            2440,
            4902,
            4522,
            649,
            7151,
            6364,
            6099,
            1318,
            6498,
            6726,
            4626,
            717,
            5185,
            5748,
            2490,
            4533,
            1242,
            1157,
            5487,
            1289,
            5899,
            1496,
            6420,
            4358,
            4594,
            6942,
            884,
            6805,
            4647,
            7040,
            7140,
            3832,
            4103,
            3116,
            1532,
            5459,
            1714,
            946,
            4199,
            508,
            3155,
            2540,
            1324,
            1049,
            6345,
            3838,
            7148,
            3123,
            3386,
            5912,
            177,
            46,
            3455,
            6745,
            77,
            5488,
            961,
            2562,
            1295,
            2089,
            6583,
            6003,
            1747,
            4588,
            1873,
            869,
            2706,
            61,
            1761,
            6797,
            2085,
            5809,
            6744,
            4090,
            3715,
            703,
            6138,
            1011,
            4918,
            17,
            4683,
            3835,
            5392,
            5219,
            193,
            3653,
            1387,
            1763,
            1598,
            3504,
            4390,
            1060,
            1149,
            6182,
            2066,
            2356,
            116,
            6609,
            4353,
            114,
            1839,
            1115,
            2668,
            1027,
            3649,
            3109,
            5268,
            1026,
            6978,
            5828,
            2463,
            6706,
            538,
            1996,
            2691,
            1877,
            6373,
            846,
            4057,
            688,
            6933,
            2880,
            1676,
            1047,
            5282,
            3986,
            4751,
            7065,
            724,
            1795,
            2558,
            3499,
            3216,
            5736,
            5767,
            2136,
            3830,
            6733,
            4668,
            1802,
            6843,
            2893,
            331,
            4387,
            915,
            815,
            2445,
            315,
            5637,
            7100,
            906,
            5103,
            1103,
            204,
            5425,
            715,
            3313,
            2093,
            1932,
            1487,
            243,
            3278,
            6534,
            447,
            1309,
            2876,
            4018,
            2472,
            6430,
            6073,
            3848,
            2008,
            225,
            5213,
            5709,
            258,
            5215,
            5541,
            4722,
            4598,
            984,
            813,
            422,
            6910,
            5397,
            7000,
            4926,
            6400,
            2497,
            6433,
            6207,
            3086,
            5551,
            2956,
            3565,
            7114,
            2941,
            1942,
            4059,
            1745,
            1944,
            708,
            3812,
            2037,
            501,
            4198,
            4362,
            1376,
            560,
            430,
            5266,
            5624,
            6955,
            1899,
            2199,
            6671,
            1825,
            5935,
            2236,
            5479,
            3526,
            3883,
            7044,
            6147,
            2053,
            5275,
            6595,
            2358,
            6462,
            3418,
            4049,
            6105,
            307,
            5585,
            2144,
            3285,
            3662,
            7057,
            738,
            3702,
            3533,
            4093,
            6678,
            1078,
            6277,
            2982,
            2849,
            6314,
            4953,
            2177,
            1214,
            2291,
            28,
            6784,
            6427,
            1934,
            3277,
            6061,
            1583,
            2844,
            5997,
            1058,
            5923,
            2069,
            1678,
            5756,
            2176,
            5052,
            123,
            5758,
            2561,
            6057,
            1179,
            3574,
            1552,
            4416,
            2969,
            2908,
            2634,
            5101,
            6010,
            7090,
            3933,
            2312,
            2857,
            6700,
            122,
            5364,
            3029,
            3633,
            5030,
            3552,
            2836,
            3752,
            2314,
            2513,
            2835,
            4325,
            3886,
            1204,
            4130,
            5021,
            146,
            3336,
            6418,
            163,
            335,
            1494,
            5104,
            2673,
            1605,
            6290,
            611,
            1958,
            6120,
            4037,
            1947,
            4689,
            6009,
            2049,
            1186,
            6570,
            4856,
            4456,
            6568,
            6445,
            2045,
            3506,
            4878,
            309,
            1649,
            3603,
            4208,
            1298,
            5171,
            5394,
            3358,
            3887,
            6793,
            5239,
            6769,
            3899,
            2475,
            5241,
            6188,
            1849,
            2084,
            4420,
            7130,
            160,
            6705,
            6270,
            4232,
            4781,
            7111,
            199,
            2127,
            6689,
            2348,
            5970,
            6894,
            1258,
            7054,
            835,
            3593,
            4138,
            6158,
            248,
            3211,
            6858,
            4227,
            473,
            1617,
            1339,
            4800,
            2332,
            171,
            5111,
            4357,
            6501,
            6337,
            5376,
            6141,
            837,
            2840,
            6677,
            5055,
            6839,
            6399,
            3847,
            2834,
            633,
            4092,
            3474,
            2736,
            6322,
            3718,
            6005,
            245,
            4718,
            3401,
            6185,
            2524,
            6857,
            2454,
            5369,
            1897,
            765,
            2820,
            5181,
            1360,
            5867,
            4475,
            6115,
            4326,
            1759,
            365,
            3072,
            2509,
            2780,
            3976,
            3125,
            1151,
            5106,
            2981,
            4622,
            3478,
            2827,
            3291,
            2382,
            1987,
            3753,
            2984,
            4098,
            589,
            178,
            4213,
            5946,
            5434,
            2044,
            7063,
            4319,
            659,
            3467,
            3546,
            459,
            228,
            2209,
            5338,
            6218,
            4890,
            5454,
            4609,
            2989,
            5134,
            5090,
            112,
            2685,
            2338,
            5096,
            5675,
            5444,
            5815,
            4239,
            5319,
            5846,
            1263,
            5706,
            5580,
            1124,
            2698,
            2446,
            6459,
            4094,
            632,
            3721,
            2740,
            4191,
            3772,
            226,
            2392,
            6565,
            3511,
            7077,
            4526,
            1483,
            5695,
            3971,
            1232,
            909,
            6950,
            5416,
            6599,
            2486,
            4315,
            3290,
            5065,
            2900,
            108,
            3561,
            4978,
            1331,
            2371,
            6250,
            1699,
            673,
            1558,
            2361,
            5874,
            1480,
            2071,
            4511,
            5161,
            437,
            3816,
            4356,
            2787,
            3695,
            570,
            4682,
            4102,
            6964,
            1768,
            1079,
            3047,
            1898,
            4377,
            5357,
            5688,
            5918,
            3666,
            1333,
            5460,
            5872,
            515,
            4054,
            4083,
            550,
            434,
            4619,
            6170,
            1449,
            5938,
            3438,
            4151,
            4679,
            2347,
            5792,
            3558,
            4580,
            3016,
            3572,
            1154,
            5204,
            2927,
            7091,
            2507,
            3512,
            5812,
            6969,
            6198,
            3165,
            2500,
            6914,
            1000,
            305,
            3959,
            1017,
            4998,
            6608,
            2974,
            3897,
            1173,
            1038,
            2715,
            1550,
            3922,
            1062,
            1737,
            6177,
            5236,
            6197,
            3368,
            1228,
            458,
            1896,
            5755,
            3655,
            7107,
            3144,
            5305,
            6228,
            3585,
            5715,
            3685,
            4952,
            71,
            4600,
            7038,
            2529,
            1099,
            2028,
            3995,
            2712,
            1304,
            5437,
            2233,
            201,
            4308,
            1344,
            1677,
            3475,
            4529,
            3844,
            4369,
            5519,
            3178,
            6789,
            1902,
            184,
            3492,
            552
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "wdi.popurb.mi",
        "ythbul4",
        "log1p(bnk.unrest)",
        "log1p(bnk.strikes)",
        "log1p(nvc.dosregt)",
        "nvc.ongoing",
        "civilwar"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10c_DENSE_Chen_Ulf_Resource_Mobilization_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "d3m": [
            "26955"
        ]
    },
    "solutions": {
        "d3m": {
            "26919": {
                "created": "2019-11-10T03:48:34.608313+00:00",
                "details_url": "/d3m-service/stored-response/798cf24445dfc2cc7bab552624a175945b94456b8bb20bdd86bdce4a",
                "hash_id": "798cf24445dfc2cc7bab552624a175945b94456b8bb20bdd86bdce4a",
                "id": 26919,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T03:48:34.631613+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26919,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/405a680a-feb1-4577-8b79-0b98ea5d781b.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/20eaaba0-d26d-4f39-b190-8531d5ab8ab7.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/9e1375cb-8dd9-49f8-9efe-e44462f4734d.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26929": {
                "created": "2019-11-10T03:48:35.839005+00:00",
                "details_url": "/d3m-service/stored-response/0a565a037b17984ebac2bd61cabd346b5ae327099f6b7961e8ec5596",
                "hash_id": "0a565a037b17984ebac2bd61cabd346b5ae327099f6b7961e8ec5596",
                "id": 26929,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T03:48:35.940534+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26929,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/ec87233b-d8cc-47d3-b39a-dd91db0183e7.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/9ddd5d6c-6ac5-4a72-9eca-f0d91290fc6a.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/2462f05f-1919-4117-8a7b-b9e04915ca20.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26953": {
                "created": "2019-11-10T03:48:44.068667+00:00",
                "details_url": "/d3m-service/stored-response/7e804e9dab8585477f5fc17d47f9886eeff17e5b432d8c859a2c8555",
                "hash_id": "7e804e9dab8585477f5fc17d47f9886eeff17e5b432d8c859a2c8555",
                "id": 26953,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T03:48:44.090775+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26953,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/648f03d0-8a17-46b7-b3e9-2f73112ba68a.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/1e8fe081-7504-4fa0-8f1c-0305a8823606.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/9daa4897-d6d6-4956-a6c4-38f3a134aa0d.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5157194316387177
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9962962865829468
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9351145029067993
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8799999952316284
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9056939482688904
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26955": {
                "created": "2019-11-10T03:48:45.026394+00:00",
                "details_url": "/d3m-service/stored-response/d48b034a2359fefb379a750ced19b03df76b391afce42c4577af9a28",
                "hash_id": "d48b034a2359fefb379a750ced19b03df76b391afce42c4577af9a28",
                "id": 26955,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T03:48:45.045950+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26955,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/b8aab416-86a8-4ef5-8301-514ba8180c12.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/48598f5a-78da-4def-af5e-44b47ca64425.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/3b801cab-d39a-4955-8c64-65b6e725d2ab.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5157194316387177
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 1
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "rook": {}
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": false,
    "subTask": "multiClass",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "trainTestRatio": 0.35,
    "unedited": true
}