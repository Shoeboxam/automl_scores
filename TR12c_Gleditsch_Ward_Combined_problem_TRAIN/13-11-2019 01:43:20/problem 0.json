{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_522/2019-11-13_01-36-50/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_522/2019-11-13_01-36-51/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_522/2019-11-13_01-36-51/tables/learningData.csv"
    },
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_522/2019-11-13_01-36-50/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_522/2019-11-13_01-36-51/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_522/2019-11-13_01-36-51/datasetDoc.json"
    },
    "indices": {
        "all": [
            23090,
            21096,
            4051,
            27761,
            30887,
            13461,
            19515,
            17159,
            12731,
            22342,
            28964,
            33202,
            16610,
            6952,
            14517,
            23299,
            26907,
            31690,
            11898,
            22309,
            4333,
            7659,
            8758,
            20217,
            27440,
            5833,
            33989,
            25562,
            10174,
            35985,
            32752,
            4256,
            4495,
            20171,
            2964,
            17129,
            10301,
            24934,
            11007,
            10475,
            8399,
            7828,
            34683,
            25567,
            35219,
            19941,
            18059,
            32335,
            22129,
            25512,
            4168,
            13005,
            3117,
            24680,
            35352,
            30090,
            14022,
            33883,
            21656,
            18199,
            23491,
            20187,
            19742,
            25824,
            34902,
            33627,
            394,
            17153,
            24543,
            8368,
            27654,
            35571,
            20768,
            17362,
            30717,
            24966,
            26518,
            6856,
            35592,
            1813,
            31193,
            27112,
            13649,
            22013,
            582,
            14834,
            35899,
            8659,
            11814,
            29163,
            35923,
            11196,
            34032,
            12886,
            26570,
            14655,
            20791,
            14293,
            13266,
            22754,
            35655,
            32288,
            13256,
            28153,
            32850,
            28097,
            7280,
            32257,
            22234,
            28336,
            23859,
            7283,
            3909,
            8557,
            25278,
            15357,
            35670,
            27144,
            27740,
            7858,
            4317,
            27959,
            25349,
            30027,
            19955,
            27832,
            29982,
            22232,
            16893,
            24796,
            28343,
            27057,
            34295,
            13925,
            16127,
            23463,
            9466,
            9431,
            1660,
            20819,
            27317,
            11712,
            11835,
            19584,
            7741,
            14244,
            31674,
            5690,
            871,
            19189,
            33850,
            7468,
            22272,
            32691,
            5355,
            3345,
            24022,
            5313,
            30784,
            6945,
            33312,
            35890,
            32575,
            9350,
            25677,
            10296,
            20916,
            35968,
            20475,
            31344,
            35124,
            21771,
            18877,
            24419,
            1938,
            9475,
            1058,
            35466,
            4627,
            5256,
            8641,
            19021,
            21165,
            3946,
            29487,
            11882,
            460,
            17686,
            22946,
            24899,
            30371,
            34277,
            13385,
            13202,
            28631,
            29204,
            27067,
            31088,
            16439,
            30871,
            25360,
            28826,
            17607,
            18596,
            10555,
            2124,
            18172,
            17398,
            18962,
            27208,
            3809,
            13524,
            20047,
            16583,
            20467,
            9083,
            17913,
            27021,
            21585,
            30910,
            17500,
            6230,
            12149,
            29498,
            28157,
            21759,
            32760,
            31476,
            27822,
            7946,
            18513,
            25554,
            26407,
            16234,
            16936,
            2534,
            2901,
            20299,
            9630,
            22953,
            24431,
            13251,
            9126,
            1056,
            1020,
            11716,
            21684,
            31012,
            5130,
            5055,
            17037,
            33473,
            13036,
            22,
            34836,
            35073,
            472,
            3968,
            22640,
            12528,
            12588,
            4694,
            7246,
            29017,
            25158,
            16524,
            31736,
            23094,
            32820,
            1721,
            18833,
            33236,
            2537,
            21825,
            28383,
            5147,
            4997,
            14256,
            16585,
            30743,
            6870,
            29986,
            25006,
            12400,
            9231,
            21630,
            22102,
            9749,
            22971,
            7195,
            7345,
            21133,
            21140,
            19692,
            23591,
            7427,
            3041,
            15823,
            28142,
            17980,
            23857,
            7485,
            5628,
            6378,
            35710,
            4933,
            33513,
            12550,
            29257,
            7848,
            11492,
            23695,
            29387,
            17017,
            3520,
            24032,
            10316,
            33455,
            20870,
            4934,
            3222,
            7598,
            35313,
            21922,
            16232,
            7866,
            13866,
            30884,
            30247,
            16239,
            32671,
            8867,
            9255,
            10280,
            26449,
            12941,
            31244,
            29681,
            10809,
            11274,
            17450,
            27077,
            22471,
            25351,
            10611,
            30878,
            4584,
            6053,
            8177,
            20259,
            35409,
            30272,
            8262,
            18614,
            33020,
            21663,
            1368,
            22806,
            35739,
            17042,
            21920,
            9274,
            18300,
            33652,
            35284,
            33280,
            17206,
            9226,
            27422,
            1968,
            16349,
            13234,
            24788,
            662,
            22869,
            20556,
            1344,
            20085,
            34840,
            32738,
            26276,
            27603,
            19063,
            28211,
            35778,
            722,
            1050,
            13494,
            13818,
            25700,
            30161,
            23653,
            6353,
            20079,
            9507,
            8458,
            34035,
            16534,
            3861,
            30094,
            1884,
            3161,
            279,
            14953,
            11045,
            14946,
            28060,
            9081,
            11403,
            6632,
            5829,
            12018,
            2529,
            33939,
            32915,
            3958,
            12618,
            16816,
            20960,
            32562,
            27648,
            25523,
            32113,
            33458,
            30656,
            34927,
            5475,
            9729,
            245,
            22275,
            14126,
            7981,
            29069,
            23752,
            2517,
            28986,
            20018,
            27527,
            23779,
            2496,
            2644,
            20335,
            4206,
            24838,
            15242,
            24625,
            10629,
            21027,
            35138,
            12563,
            34900,
            24358,
            16950,
            15068,
            20699,
            10186,
            1376,
            4930,
            24745,
            29702,
            1941,
            27407,
            29540,
            34423,
            15117,
            16746,
            16643,
            35094,
            14166,
            35570,
            34975,
            13666,
            17121,
            32519,
            34678,
            2295,
            2548,
            29548,
            7954,
            17633,
            36067,
            32471,
            6540,
            30267,
            5083,
            34704,
            15838,
            12041,
            7238,
            11762,
            33207,
            11962,
            16517,
            33254,
            9714,
            631,
            34871,
            18760,
            22218,
            18384,
            8753,
            12852,
            31594,
            33739,
            14373,
            58,
            23087,
            15659,
            14427,
            3379,
            31127,
            8646,
            26024,
            9797,
            615,
            4692,
            21057,
            14476,
            30052,
            31527,
            4056,
            11943,
            15909,
            32395,
            25799,
            21271,
            29557,
            35442,
            13184,
            6133,
            35155,
            497,
            7375,
            22289,
            4531,
            1191,
            1462,
            11191,
            22151,
            11028,
            24212,
            3903,
            22363,
            7541,
            603,
            6445,
            35835,
            22566,
            16552,
            4228,
            32063,
            14591,
            6771,
            33479,
            21425,
            19208,
            14935,
            21923,
            33123,
            8192,
            15080,
            20176,
            10557,
            1268,
            1136,
            7591,
            34111,
            27165,
            4431,
            3168,
            26684,
            30441,
            1832,
            10355,
            32144,
            32065,
            17917,
            4624,
            1182,
            12615,
            23162,
            10278,
            25041,
            5916,
            12675,
            2385,
            22204,
            23086,
            13492,
            21568,
            24908,
            9760,
            3438,
            13920,
            32727,
            8655,
            34875,
            26458,
            35811,
            21508,
            28834,
            13030,
            25597,
            12460,
            16117,
            7044,
            19517,
            35850,
            23343,
            29819,
            32745,
            27211,
            7186,
            21542,
            6627,
            496,
            23513,
            18802,
            19486,
            5823,
            20488,
            3785,
            27593,
            23895,
            34126,
            15749,
            9038,
            14855,
            10695,
            22943,
            16195,
            24394,
            11858,
            30793,
            13598,
            14214,
            27322,
            20624,
            1366,
            13660,
            27114,
            26202,
            32839,
            13908,
            31098,
            25258,
            29418,
            17125,
            31718,
            18156,
            28277,
            15250,
            15138,
            33548,
            8159,
            8097,
            7218,
            9160,
            14849,
            17768,
            23148,
            33001,
            33098,
            16480,
            6539,
            34729,
            18410,
            33272,
            4161,
            22912,
            12411,
            31459,
            1730,
            18390,
            8580,
            5602,
            342,
            28046,
            14754,
            10075,
            31126,
            8314,
            29139,
            9732,
            33788,
            19942,
            35411,
            28752,
            5262,
            1604,
            19741,
            611,
            22776,
            34731,
            11686,
            18414,
            26026,
            22022,
            2647,
            30177,
            30639,
            2344,
            23896,
            23456,
            7463,
            33390,
            27923,
            5725,
            18616,
            19921,
            19248,
            14558,
            32349,
            28742,
            15304,
            12788,
            8818,
            25015,
            2855,
            10290,
            6682,
            29632,
            33460,
            33316,
            17713,
            22393,
            7930,
            17896,
            5828,
            13360,
            21121,
            27213,
            10196,
            35531,
            32061,
            24556,
            30705,
            15256,
            3513,
            26359,
            1894,
            17280,
            1392,
            12397,
            12002,
            22710,
            14426,
            11389,
            16151,
            13103,
            11993,
            34598,
            9458,
            14428,
            7478,
            8270,
            11246,
            22645,
            14181,
            28502,
            17678,
            29882,
            16401,
            33601,
            24425,
            10625,
            23417,
            29924,
            35161,
            27386,
            18232,
            9211,
            14330,
            17359,
            10821,
            34370,
            19344,
            30,
            26728,
            14814,
            23333,
            1452,
            5493,
            20451,
            3100,
            29209,
            14397,
            776,
            27875,
            10800,
            5048,
            6357,
            35266,
            21052,
            952,
            21506,
            13994,
            8146,
            28948,
            30156,
            8193,
            6911,
            22143,
            7224,
            29693,
            27805,
            11812,
            3722,
            1351,
            15934,
            8822,
            11305,
            17520,
            32967,
            19710,
            27856,
            332,
            35086,
            28572,
            3770,
            1445,
            15548,
            7461,
            18752,
            27055,
            14005,
            20150,
            20132,
            30597,
            33692,
            3435,
            18327,
            31553,
            7091,
            28892,
            8178,
            31601,
            29560,
            33019,
            19919,
            28208,
            12227,
            19033,
            5273,
            24779,
            13405,
            28145,
            18324,
            10112,
            25458,
            10040,
            8805,
            893,
            31652,
            33789,
            1740,
            33144,
            14925,
            33394,
            5068,
            28756,
            3433,
            32212,
            26622,
            28168,
            8049,
            10727,
            225,
            11053,
            21338,
            27262,
            12849,
            5919,
            7310,
            23121,
            15604,
            11225,
            623,
            35972,
            21909,
            34525,
            11034,
            18938,
            7938,
            31624,
            19428,
            13578,
            4822,
            16446,
            1244,
            3772,
            20500,
            29442,
            19531,
            25125,
            23214,
            33898,
            20982,
            8771,
            9236,
            3614,
            12704,
            18490,
            24503,
            1304,
            14275,
            25545,
            12207,
            28910,
            8027,
            30640,
            8509,
            19432,
            10865,
            10009,
            5269,
            34040,
            22736,
            11584,
            13459,
            21510,
            18037,
            11112,
            12914,
            10139,
            20670,
            25413,
            8673,
            8473,
            25445,
            31152,
            2572,
            8172,
            6032,
            25596,
            16485,
            21502,
            4195,
            3227,
            1984,
            24164,
            419,
            29027,
            33288,
            2495,
            28331,
            8985,
            28072,
            20479,
            30827,
            3355,
            20619,
            23185,
            1225,
            28814,
            10391,
            26666,
            35929,
            34365,
            4227,
            27226,
            34633,
            33141,
            455,
            13583,
            16223,
            10244,
            35245,
            17384,
            26702,
            19168,
            19592,
            26727,
            4613,
            13424,
            25659,
            17650,
            10190,
            6976,
            6265,
            1034,
            28497,
            16462,
            21781,
            1443,
            12017,
            20857,
            17716,
            25642,
            29475,
            19501,
            30684,
            26358,
            1369,
            28895,
            806,
            16291,
            18163,
            5596,
            29996
        ],
        "test": [
            29205,
            33772,
            27053,
            30695,
            32274,
            29568,
            30582,
            34827,
            31919,
            25995,
            32260,
            33189,
            25081,
            28747,
            27470,
            31736,
            35763,
            32506,
            30990,
            27162,
            30412,
            26294,
            35977,
            28125,
            35915,
            25401,
            26558,
            33927,
            26316,
            29648,
            29755,
            34504,
            32143,
            27271,
            28380,
            33467,
            32585,
            26748,
            35108,
            25596,
            30561,
            26275,
            33595,
            26451,
            30780,
            27795,
            34075,
            33081,
            25194,
            25650,
            31831,
            35890,
            34393,
            26851,
            31226,
            36090,
            34241,
            26498,
            34534,
            35071,
            25637,
            29086,
            29623,
            30117,
            28390,
            35627,
            25587,
            35778,
            32367,
            34067,
            27641,
            28857,
            28938,
            35408,
            27287,
            36039,
            26569,
            26351,
            32487,
            30842,
            30728,
            34405,
            32115,
            34981,
            29753,
            28615,
            25353,
            33057,
            30040,
            30931,
            35524,
            29039,
            27164,
            27880,
            26589,
            25585,
            29333,
            32923,
            30112,
            26203,
            31923,
            34242,
            28863,
            27124,
            34292,
            33475,
            30541,
            33276,
            25237,
            35959,
            34955,
            31906,
            33801,
            28616,
            29678,
            35184,
            26485,
            31332,
            25817,
            33519,
            32116,
            32399,
            33165,
            26617,
            34510,
            35576,
            29827,
            32123,
            34390,
            35412,
            33309,
            26423,
            25267,
            27425,
            30851,
            30521,
            33196,
            31060,
            28468,
            25340,
            25208,
            26833,
            25753,
            28165,
            34238,
            28748,
            35018,
            35983,
            30800,
            35335,
            30133,
            35824,
            33024,
            30572,
            24919,
            25006,
            28955,
            29774,
            29557,
            25774,
            27945,
            31842,
            31082,
            31077,
            27303,
            31141,
            31296,
            32776,
            25448,
            32962,
            24829,
            31565,
            31173,
            32727,
            30243,
            30309,
            31122,
            28075,
            25415,
            29421,
            33431,
            28542,
            28892,
            31530,
            27770,
            25947,
            27172,
            26800,
            31340,
            31642,
            35274,
            35901,
            35517,
            32176,
            32163,
            34324,
            27073,
            25534,
            32253,
            32028,
            32910,
            26612,
            25249,
            35434,
            26440,
            31190,
            35733,
            29419,
            33381,
            27118,
            32282,
            26624,
            32280,
            30099,
            25123,
            30376,
            31611,
            35645,
            25653,
            28262,
            25403,
            26040,
            32792,
            29197,
            34524,
            25914,
            27462,
            32490,
            35734,
            33197,
            34288,
            30013,
            30580,
            25229,
            34261,
            26972,
            27378,
            29394,
            35585,
            34439,
            33933,
            35094,
            29941,
            35669,
            35457,
            29188,
            26547,
            33597,
            29371,
            34810,
            32893,
            32594,
            25148,
            32845,
            36059,
            31058,
            30807,
            31740,
            32230,
            32225,
            35560,
            33632,
            33899,
            34592,
            32267,
            28208,
            24811,
            34087,
            30469,
            30566,
            34974,
            26184,
            29885,
            26003,
            29479,
            26897,
            31038,
            27655,
            25532,
            32641,
            24799,
            26619,
            35186,
            29181,
            29943,
            27963,
            30748,
            31393,
            28131,
            27349,
            33229,
            25645,
            25115,
            29689,
            31616,
            30899,
            27322,
            24971,
            35047,
            26708,
            32720,
            31027,
            34041,
            29506,
            30118,
            31649,
            28423,
            25568,
            30216,
            30623,
            27634,
            34554,
            34531,
            28099,
            26776,
            25808,
            28282,
            32373,
            35003,
            32243,
            35809,
            25776,
            35371,
            35076,
            28157,
            30646,
            29033,
            33573,
            25796,
            31876,
            30607,
            30268,
            35935,
            26332,
            35954,
            34546,
            29351,
            31282,
            32574,
            27335,
            33428,
            29741,
            34694,
            26337,
            33978,
            27849,
            25080,
            27573,
            35522,
            35375,
            30586,
            28337,
            26384,
            25349,
            32142,
            28113,
            32802,
            31123,
            34803,
            34635,
            34756,
            29888,
            25918,
            26242,
            26137,
            31023,
            30832,
            26075,
            26940,
            28764,
            28466,
            25430,
            25801,
            29980,
            33295,
            28838,
            27442,
            24933,
            31638,
            30182,
            29349,
            31363,
            27704,
            35325,
            35247,
            34576,
            26895,
            27874,
            29991,
            28966,
            34033,
            25971,
            29588,
            31093,
            35947,
            33335,
            30486,
            28928,
            36001,
            26822,
            34477,
            27791,
            31533,
            30126,
            29811,
            34224,
            27029,
            35171,
            30742,
            34651,
            27218,
            24941,
            28786,
            32080,
            28050,
            34899,
            34582,
            31084,
            25687,
            32075,
            29731,
            29810,
            33992,
            33277,
            34966,
            25254,
            35066,
            34805,
            32058,
            31716,
            32324,
            29121,
            28179,
            31068,
            34824,
            26853,
            28071,
            34072,
            26023,
            32639,
            30330,
            28769,
            34169,
            32091,
            26952,
            30325,
            36072,
            32377,
            33026,
            32424,
            26885,
            33661,
            27391,
            25883,
            31270,
            29308,
            27659,
            35991,
            29437,
            35937,
            34723,
            31395,
            24965,
            35377,
            26185,
            31054,
            31647,
            34428,
            35368,
            26944,
            28844,
            31605,
            34545,
            33281,
            26835,
            35493,
            35631,
            26673,
            30829,
            31062,
            28510,
            26618,
            33720,
            32725,
            35805,
            32794,
            27106,
            35615,
            33493,
            33484,
            31365,
            25868,
            24937,
            31053,
            25907,
            30220,
            30508,
            27511,
            31567,
            33032,
            28401,
            26809,
            33588,
            34516,
            28894,
            34161,
            33035,
            25841,
            32266,
            29775,
            30982,
            26869,
            26345,
            27715,
            34377,
            34662,
            31870,
            32108,
            28634,
            29744,
            34345,
            31405,
            31570,
            30370,
            26201,
            33279,
            28670,
            25319,
            32378,
            35784,
            35438,
            34434,
            26240,
            25657,
            25557,
            25434,
            33001,
            34236,
            32622,
            26473,
            32014,
            33653,
            30585,
            28081,
            31210,
            31287,
            27992,
            28159,
            34395,
            32150,
            27932,
            30337,
            35253,
            24843,
            27001,
            32304,
            31108,
            25584,
            25529,
            32497,
            33897,
            25284,
            29038,
            26338,
            25323,
            35216,
            32631,
            33225,
            27710,
            27554,
            25662,
            25788,
            36048,
            27357,
            34969,
            27937,
            27016,
            33765,
            26733,
            29002,
            35420,
            31893,
            26712,
            29552,
            35787,
            34507,
            25244,
            35659,
            30466,
            34821,
            31972,
            33416,
            29984,
            29284,
            28114,
            27097,
            33046,
            30449,
            34835,
            27227,
            30932,
            34282,
            27789,
            25582,
            34787,
            29993,
            29597,
            31449,
            31868,
            35676,
            31973,
            30946,
            26347,
            29402,
            35899,
            28734,
            25236,
            34468,
            30029,
            32203,
            25863,
            30083,
            25797,
            31221,
            33350,
            29433,
            28811,
            35769,
            30544,
            26445,
            26751,
            29078,
            26248,
            26770,
            31789,
            30888,
            31501,
            35125,
            32722,
            27595,
            32242,
            32317,
            32745,
            29612,
            27565,
            30636,
            30431,
            29919,
            28545,
            30647,
            25763,
            29468,
            28625,
            33534,
            30425,
            34683,
            26079,
            28376,
            34567,
            30106,
            32003,
            30530,
            34885,
            32313,
            25372,
            33938,
            29453,
            33757,
            28398,
            28715,
            29179,
            36093,
            30215,
            25016,
            28018,
            33274,
            29268,
            35072,
            31253,
            33238,
            27013,
            24920,
            28580,
            26829,
            28265,
            33377,
            30256,
            26250,
            32879,
            32931,
            32865,
            30981,
            35033,
            29996,
            29282,
            32878,
            33549,
            26816,
            27667,
            25305,
            30396,
            25247,
            32148,
            29973,
            28126,
            28309,
            26486,
            32746,
            29843,
            29236,
            27060,
            26947,
            34142,
            31806,
            27506,
            30581,
            25497,
            29469,
            27475,
            32344,
            34364,
            32126,
            25969,
            34607,
            30915,
            27864,
            29527,
            26077,
            30227,
            35602,
            29533,
            27842,
            35295,
            32191,
            25734,
            27652,
            33813,
            25685,
            25492,
            29930,
            29455,
            30984,
            34938,
            30061,
            26026,
            33688,
            31097,
            33251,
            25923,
            35528,
            33329,
            26161,
            35742,
            34499,
            34351,
            33685,
            29148,
            31070,
            28774,
            36054,
            25555,
            26628,
            33142,
            25283,
            29298,
            34891,
            28803,
            31419,
            32224,
            34190,
            24820,
            25920,
            35633,
            33963,
            25621,
            26967,
            25238,
            25195,
            29719,
            31902,
            30629,
            35598,
            28922,
            27630,
            27548,
            33487,
            28105,
            34408,
            29860,
            28679,
            26087,
            24821,
            26115,
            31639,
            29108,
            34189,
            28479,
            26420,
            26798,
            25272,
            25432,
            26973,
            31159,
            29942,
            26378,
            29569,
            26889,
            25227,
            28069,
            28942,
            30858,
            29015,
            33531,
            27183,
            29079,
            28272,
            33007,
            28911,
            29675,
            26915,
            33857,
            30069,
            30603,
            30145,
            34639,
            34099,
            28430,
            34385,
            28969,
            33154,
            32289,
            35330,
            31557,
            32314,
            35838,
            29467,
            33590,
            34020,
            28440,
            28000,
            32984,
            31030,
            31695,
            33371,
            31361,
            25635,
            28880,
            26994,
            33953,
            32861,
            31550,
            25370,
            32773,
            35952,
            25331,
            33027,
            33342,
            26257,
            29112,
            26933,
            28142,
            25479,
            29729,
            28361,
            28532,
            32513,
            31892,
            30452,
            28729,
            34708,
            26884,
            30214,
            34471,
            27340,
            35075,
            31256,
            27323,
            32425,
            34006,
            35401,
            34185,
            31657,
            30428,
            34776,
            29066,
            35483,
            26583,
            30120,
            35211,
            31594,
            28527,
            30347,
            34743,
            32349,
            33937,
            34789,
            31947,
            30589,
            28842,
            25927,
            28176,
            35462,
            29261,
            25303,
            28719,
            32361,
            25893,
            30107,
            27036,
            24859,
            32682,
            27609,
            28600,
            26089,
            28063,
            27948,
            31785,
            28789,
            27838,
            35081,
            34562,
            31671,
            26826,
            31129,
            34684,
            33999,
            30377,
            29697,
            35662,
            35492,
            32735,
            32020,
            26746,
            34287,
            29344,
            26930,
            29329,
            27786,
            29098,
            33033,
            33752,
            34911,
            33439,
            26400,
            25726,
            26276,
            31816,
            27583,
            25530,
            34037,
            27143,
            27233,
            30876,
            29214,
            32558,
            26537,
            27856,
            25425,
            32942,
            31653,
            27610,
            31761,
            28818,
            32689,
            25771,
            33153,
            28280,
            26736,
            35594,
            29544,
            26287,
            35534,
            28762,
            34232,
            27042,
            26842,
            28087,
            25178,
            30159,
            24997,
            31689,
            31356,
            35283,
            33130,
            28348,
            27666,
            29299,
            31195,
            25181,
            30074,
            31095,
            30612,
            35819,
            34188,
            32390,
            26663,
            25299,
            30455,
            27260,
            26245
        ],
        "train": [
            6633,
            19583,
            23516,
            21682,
            9556,
            528,
            14105,
            12352,
            24118,
            20451,
            20730,
            13422,
            5267,
            1997,
            16011,
            17637,
            2341,
            5880,
            4394,
            5206,
            3857,
            24293,
            6404,
            17417,
            14425,
            7196,
            17996,
            17467,
            22670,
            18550,
            6607,
            3849,
            20484,
            20864,
            19485,
            355,
            18053,
            8214,
            19455,
            10844,
            8396,
            24085,
            17394,
            21919,
            572,
            11002,
            21638,
            7819,
            883,
            20285,
            6961,
            12887,
            23342,
            4720,
            4964,
            18816,
            15646,
            9625,
            9514,
            15283,
            24114,
            8662,
            24137,
            10286,
            18418,
            1452,
            20207,
            11611,
            1115,
            350,
            16621,
            21613,
            6693,
            1002,
            1058,
            18460,
            10095,
            19432,
            18065,
            2487,
            11742,
            18279,
            15820,
            18213,
            13916,
            23368,
            22606,
            20238,
            24138,
            6648,
            17876,
            3318,
            19349,
            35,
            5094,
            8161,
            21721,
            8790,
            18694,
            12179,
            20832,
            17728,
            13621,
            24396,
            11517,
            10429,
            16719,
            19953,
            21748,
            9344,
            7919,
            23712,
            11951,
            8965,
            2634,
            21399,
            18893,
            5201,
            5393,
            19057,
            5255,
            12350,
            4046,
            3881,
            9139,
            6475,
            1813,
            2816,
            22923,
            22985,
            21314,
            14542,
            4402,
            24302,
            16243,
            14045,
            12424,
            24587,
            20574,
            13937,
            18624,
            15088,
            8244,
            1333,
            24107,
            24298,
            18004,
            6325,
            3077,
            2040,
            11484,
            12926,
            6153,
            7963,
            12946,
            7304,
            4465,
            2600,
            1085,
            2063,
            11072,
            14539,
            23226,
            407,
            24741,
            5402,
            13384,
            22078,
            8912,
            5994,
            765,
            16006,
            13031,
            7558,
            7749,
            24102,
            375,
            16880,
            11932,
            8071,
            11140,
            4887,
            7776,
            24395,
            9270,
            9453,
            6785,
            23896,
            14401,
            5244,
            14399,
            22076,
            839,
            16444,
            18841,
            6668,
            12830,
            17295,
            18923,
            5294,
            10053,
            14133,
            22504,
            7480,
            21060,
            10222,
            4396,
            18038,
            12815,
            5111,
            16050,
            23220,
            696,
            24157,
            19480,
            7617,
            24532,
            7430,
            23321,
            7224,
            10930,
            17864,
            6790,
            17584,
            12908,
            1342,
            22921,
            12911,
            7976,
            4228,
            2446,
            24295,
            10034,
            15818,
            24360,
            16065,
            5469,
            19584,
            21899,
            22510,
            20380,
            6041,
            15413,
            11957,
            750,
            19133,
            1644,
            84,
            10228,
            2084,
            21750,
            14075,
            13989,
            24179,
            16984,
            9035,
            13901,
            5873,
            16013,
            108,
            10891,
            23708,
            20368,
            18108,
            15857,
            12315,
            5561,
            10083,
            20180,
            3341,
            20466,
            4406,
            22288,
            3614,
            3306,
            3497,
            22988,
            4125,
            20185,
            1232,
            18963,
            23403,
            4273,
            23432,
            1919,
            11839,
            10135,
            21507,
            2718,
            18317,
            8908,
            3843,
            12759,
            21556,
            22682,
            3503,
            4323,
            10014,
            25,
            15927,
            22466,
            3702,
            12494,
            9741,
            2846,
            22758,
            7483,
            21752,
            18049,
            11728,
            16086,
            21320,
            11557,
            3062,
            13370,
            18433,
            24779,
            11895,
            12778,
            23280,
            6903,
            23603,
            1402,
            20366,
            23202,
            5177,
            8392,
            11355,
            2435,
            7514,
            13161,
            21178,
            7002,
            13977,
            14340,
            20190,
            21233,
            17534,
            16028,
            11860,
            19737,
            4820,
            21336,
            9220,
            24050,
            11667,
            21434,
            5790,
            23500,
            15791,
            21796,
            1921,
            18526,
            8646,
            14813,
            1679,
            22105,
            22144,
            13797,
            15481,
            7835,
            6459,
            18283,
            13466,
            21389,
            6722,
            18522,
            2399,
            13809,
            5409,
            22149,
            23517,
            2851,
            1577,
            2212,
            17314,
            526,
            17550,
            15817,
            4318,
            23939,
            4058,
            9616,
            10594,
            13498,
            19360,
            610,
            13379,
            10297,
            8634,
            10834,
            14933,
            4114,
            2702,
            5990,
            7161,
            19911,
            23954,
            15706,
            20105,
            18602,
            11768,
            11023,
            21359,
            21744,
            4923,
            15356,
            16044,
            3879,
            3687,
            17362,
            1430,
            13815,
            14362,
            24639,
            12958,
            19499,
            23193,
            7263,
            10088,
            9831,
            19844,
            9352,
            21897,
            8235,
            487,
            5299,
            5773,
            3001,
            11085,
            9510,
            98,
            16491,
            309,
            24754,
            24018,
            16370,
            6345,
            17649,
            12002,
            2136,
            3439,
            22812,
            3775,
            4564,
            5361,
            20780,
            7383,
            7200,
            3603,
            16023,
            15416,
            18516,
            16456,
            7137,
            8312,
            17092,
            19210,
            12203,
            12519,
            14179,
            18087,
            20577,
            21088,
            3465,
            4325,
            3009,
            17501,
            19853,
            21252,
            24606,
            1139,
            47,
            10401,
            16282,
            3235,
            14760,
            2850,
            18945,
            8264,
            13192,
            15726,
            5855,
            14694,
            6101,
            1637,
            973,
            5587,
            21980,
            19256,
            7179,
            15994,
            15441,
            7403,
            17173,
            5851,
            244,
            11128,
            24410,
            16843,
            22807,
            1751,
            11522,
            5482,
            9797,
            22127,
            21801,
            21360,
            3031,
            15497,
            17784,
            11067,
            8523,
            16231,
            3531,
            6812,
            4555,
            22118,
            10738,
            18189,
            10356,
            11746,
            16387,
            19930,
            7439,
            10492,
            834,
            17564,
            20230,
            16678,
            5944,
            7608,
            9869,
            17071,
            11013,
            17334,
            14252,
            8635,
            18619,
            14673,
            5036,
            1554,
            18683,
            19876,
            2645,
            8197,
            7308,
            15788,
            23606,
            23310,
            15881,
            6880,
            20117,
            61,
            12987,
            7221,
            24664,
            18171,
            12742,
            13606,
            6566,
            18952,
            5653,
            11185,
            2272,
            7940,
            9526,
            5835,
            22344,
            8699,
            21155,
            201,
            2470,
            5996,
            209,
            17220,
            1769,
            2265,
            14447,
            12224,
            12004,
            16277,
            15654,
            5468,
            15907,
            12135,
            17294,
            3955,
            13670,
            7587,
            9822,
            9875,
            11155,
            21326,
            23930,
            18534,
            11209,
            3894,
            14667,
            12332,
            11767,
            19939,
            10162,
            20710,
            8726,
            15108,
            9162,
            15077,
            6016,
            15456,
            6748,
            23224,
            1100,
            74,
            4409,
            1566,
            2968,
            5688,
            17931,
            13182,
            10174,
            5671,
            10006,
            13497,
            21579,
            22339,
            15522,
            11980,
            9539,
            23706,
            19845,
            24273,
            13340,
            8391,
            8187,
            21490,
            24691,
            5026,
            19146,
            17197,
            14074,
            22390,
            19685,
            3502,
            21058,
            289,
            21177,
            12559,
            21068,
            23243,
            16543,
            23847,
            22299,
            2008,
            205,
            14062,
            23783,
            11689,
            21619,
            21704,
            288,
            10954,
            20946,
            19235,
            21193,
            18478,
            9105,
            8353,
            16781,
            19000,
            18979,
            1456,
            20317,
            14958,
            21487,
            13255,
            2331,
            4814,
            7647,
            20911,
            19487,
            17609,
            24036,
            18835,
            14485,
            20326,
            9479,
            11451,
            20566,
            18390,
            9783,
            18495,
            19834,
            5211,
            5297,
            13423,
            17130,
            7774,
            13984,
            23719,
            15397,
            20795,
            21269,
            3671,
            1730,
            9280,
            20371,
            4471,
            18046,
            6071,
            15042,
            15015,
            4899,
            16519,
            19807,
            7586,
            11472,
            4931,
            18366,
            16032,
            6692,
            18662,
            9005,
            17407,
            17625,
            6562,
            6967,
            21901,
            3701,
            23894,
            18479,
            3968,
            14112,
            7572,
            4166,
            24626,
            21086,
            7806,
            16171,
            5185,
            12795,
            20706,
            6479,
            16989,
            21678,
            9356,
            16539,
            10097,
            19089,
            8898,
            818,
            20381,
            11654,
            15045,
            21978,
            19770,
            24571,
            23632,
            24756,
            1001,
            23591,
            3876,
            15159,
            16555,
            22894,
            17121,
            18814,
            293,
            1407,
            7502,
            23975,
            18961,
            1268,
            15684,
            1721,
            23929,
            9470,
            9769,
            19505,
            7160,
            18224,
            24405,
            17150,
            8807,
            21241,
            191,
            24194,
            24434,
            19717,
            24531,
            4583,
            4741,
            18794,
            17479,
            416,
            22974,
            24540,
            1688,
            2568,
            23067,
            14711,
            9247,
            1682,
            4199,
            15581,
            19158,
            4843,
            5832,
            19002,
            6783,
            24595,
            8994,
            4357,
            19106,
            15620,
            5581,
            15187,
            11249,
            3785,
            2105,
            10304,
            20835,
            13922,
            14562,
            10799,
            12849,
            19321,
            4932,
            1113,
            21213,
            14176,
            7451,
            2712,
            9505,
            14679,
            3362,
            16957,
            13448,
            43,
            15176,
            15885,
            4898,
            16635,
            2552,
            9918,
            3753,
            8499,
            23617,
            17320,
            24243,
            10249,
            23357,
            16676,
            3633,
            19718,
            27,
            15037,
            10309,
            7417,
            10193,
            7124,
            2706,
            7498,
            15789,
            14665,
            10706,
            2907,
            13398,
            6084,
            7564,
            11102,
            870,
            17072,
            21166,
            24704,
            9031,
            20448,
            16200,
            21797,
            20223,
            9864,
            9857,
            14807,
            20567,
            13584,
            20522,
            15902,
            12738,
            11195,
            6953,
            3904,
            13030,
            22804,
            14607,
            8970,
            5471,
            17512,
            12813,
            2194,
            4009,
            4535,
            9817,
            14994,
            20017,
            3974,
            10306,
            7277,
            11995,
            17499,
            1049,
            16355,
            18134,
            15334,
            11450,
            12836,
            5072,
            9747,
            22435,
            21508,
            19555,
            16504,
            22349,
            9302,
            19712,
            13371,
            8714,
            24369,
            20827,
            6128,
            20617,
            6173,
            323,
            4691,
            7123,
            16300,
            10573,
            23569,
            6443,
            22993,
            18032,
            16516,
            4619,
            16554,
            22634,
            8834,
            20150,
            635,
            17029,
            1609,
            15586,
            22279,
            24362,
            19072,
            12331,
            11887,
            20073,
            14844,
            14780,
            224,
            20728,
            13769,
            24343,
            2308,
            18957,
            24206,
            21039,
            24260,
            8220,
            7655,
            9269,
            23885,
            10729,
            2897,
            2904,
            2723,
            13451,
            17112,
            2351,
            14664,
            172,
            15454,
            17689,
            685,
            3518,
            19470,
            23329,
            22372,
            21016,
            13956,
            13380,
            18846,
            24299,
            13347,
            13033,
            12450,
            8969,
            15589,
            4028,
            8957,
            19864
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "pending": false,
    "predictors": [
        "pmid",
        "py",
        "py2",
        "py3",
        "terriss",
        "riveriss",
        "mariss",
        "terrAtt",
        "rivAtt",
        "marAtt",
        "minpol",
        "rbal",
        "lnkmdist"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR12c_Gleditsch_Ward_Combined_problem_TRAIN",
    "scoreOptions": {
        "evaluationMethod": "kFold",
        "folds": 10,
        "splitsFile": "dataSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "searchOptions": {
        "solutionsLimit": 5
    },
    "selectedSolutions": {
        "d3m": [
            "28596"
        ]
    },
    "solutions": {
        "d3m": {
            "28568": {
                "created": "2019-11-13T06:36:56.425542+00:00",
                "details_url": "/d3m-service/stored-response/fb4582a348b72c2c1c5b425d326db054b266bce0975c0689dca8d0a3",
                "hash_id": "fb4582a348b72c2c1c5b425d326db054b266bce0975c0689dca8d0a3",
                "id": 28568,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T06:36:56.448202+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28568,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/4660a359-3345-4c14-9b58-6aa2d8fe4c2c.csv",
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/8d28e39b-9304-46fb-b7ae-73b22ffff227.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9922985434532166
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28570": {
                "created": "2019-11-13T06:37:00.788096+00:00",
                "details_url": "/d3m-service/stored-response/2257d22f101a524e8737531f9c2d12688c5dd06fa97eff239cb1a04e",
                "hash_id": "2257d22f101a524e8737531f9c2d12688c5dd06fa97eff239cb1a04e",
                "id": 28570,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T06:37:00.814910+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28570,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/617ed188-5c34-47a9-b353-e07573daa5e1.csv",
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/16c7c1e1-07e5-4636-9ee9-24694559f370.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9922985434532166
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28596": {
                "created": "2019-11-13T06:37:24.140354+00:00",
                "details_url": "/d3m-service/stored-response/4b16e834a39f8fee4a2dcfee8816768a080257f5e6bee142893f0755",
                "hash_id": "4b16e834a39f8fee4a2dcfee8816768a080257f5e6bee142893f0755",
                "id": 28596,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T06:37:24.164721+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28596,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/6ed1ba71-9c69-4761-a529-e268189f5d8d.csv",
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/aae01e46-1489-4f44-b2ac-639aa42a9633.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5899792909622192
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9980331063270569
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9090909361839294
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8273381590843201
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8662900328636169
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "28598": {
                "created": "2019-11-13T06:37:26.225055+00:00",
                "details_url": "/d3m-service/stored-response/78123014b23a001de5aa514ddb4e10ec9d2d148a9787ebc585aef0fc",
                "hash_id": "78123014b23a001de5aa514ddb4e10ec9d2d148a9787ebc585aef0fc",
                "id": 28598,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T06:37:26.249875+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 28598,
                "produce": {
                    "all": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/bda171e4-574e-46c3-b6aa-c08950cb343c.csv",
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/5e80f0cf-574b-4c07-aabf-3b870245ff8a.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5899792909622192
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9980331063270569
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9090909361839294
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8273381590843201
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8662900328636169
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        }
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitOptions": {
        "outOfSampleSplit": true,
        "splitsDir": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/problem_TRAIN",
        "splitsFile": "sampleSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "mido"
    ],
    "task": "classification",
    "unedited": true
}