{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            5458,
            6229,
            23551,
            13179,
            6002,
            11818,
            25834,
            26340,
            12899,
            15245,
            24166,
            7294,
            6323,
            7060,
            4683,
            11275,
            21598,
            20251,
            16473,
            12704,
            15133,
            21827,
            1988,
            25871,
            3345,
            18828,
            3209,
            9572,
            19112,
            2296,
            5214,
            13316,
            7686,
            22960,
            8611,
            24620,
            21982,
            10643,
            27038,
            17414,
            21782,
            21131,
            1486,
            4096,
            6506,
            4824,
            20240,
            12195,
            2890,
            1832,
            26531,
            7090,
            19611,
            13889,
            22389,
            7674,
            5477,
            8538,
            7779,
            9548,
            7859,
            18717,
            12237,
            1507,
            24099,
            1808,
            16235,
            11817,
            18621,
            18016,
            6535,
            24852,
            26230,
            25618,
            6902,
            124,
            6236,
            25057,
            1851,
            4496,
            7571,
            454,
            3899,
            14642,
            22694,
            12104,
            3940,
            6101,
            15254,
            14330,
            18225,
            305,
            26675,
            13062,
            7489,
            24158,
            2918,
            2817,
            9629,
            9703,
            21317,
            4434,
            15895,
            12128,
            5275,
            24589,
            11907,
            165,
            17981,
            23468,
            10525,
            14556,
            9647,
            26243,
            22722,
            27069,
            12894,
            14308,
            18397,
            23147,
            8759,
            11384,
            2466,
            20796,
            18625,
            19346,
            4466,
            16380,
            5327,
            19648,
            9813,
            6812,
            24544,
            4441,
            16250,
            1730,
            6317,
            12986,
            22139,
            14265,
            23908,
            21397,
            2058,
            8091,
            10430,
            21696,
            21823,
            7280,
            7869,
            5145,
            3367,
            24944,
            13727,
            16839,
            16564,
            19425,
            4051,
            14901,
            3618,
            21257,
            12010,
            22432,
            18153,
            16260,
            2727,
            8276,
            22763,
            10000,
            16434,
            5173,
            7951,
            7071,
            24981,
            1765,
            9926,
            26027,
            19016,
            8781,
            21538,
            17340,
            17458,
            2004,
            23845,
            25090,
            11125,
            11036,
            26106,
            5575,
            26616,
            18873,
            2693,
            10999,
            25963,
            22681,
            25712,
            14830,
            17561,
            14945,
            19136,
            10485,
            2154,
            7653,
            3875,
            22202,
            8747,
            22450,
            5209,
            21893,
            4857,
            26689,
            15061,
            17686,
            23843,
            22648,
            1511,
            3101,
            5943,
            15976,
            8031,
            11726,
            16583,
            4529,
            25093,
            2416,
            9806,
            23994,
            20478,
            20885,
            11372,
            25603,
            22078,
            2554,
            12253,
            20426,
            21577,
            3024,
            21040,
            11193,
            718,
            10290,
            6931,
            8281,
            6886,
            7657,
            785,
            19789,
            10170,
            19514,
            14960,
            22724,
            17641,
            5247,
            25606,
            5336,
            22936,
            25396,
            23977,
            16036,
            26418,
            16471,
            23978,
            21223,
            13823,
            18284,
            23213,
            15603,
            503,
            2815,
            15500,
            2541,
            728,
            8870,
            12984,
            20471,
            4553,
            19287,
            22533,
            5455,
            13218,
            4406,
            2177,
            14985,
            3490,
            25392,
            20597,
            13616,
            8852,
            17852,
            23475,
            20878,
            9817,
            13766,
            2913,
            25431,
            9701,
            20213,
            3666,
            6809,
            11004,
            25190,
            16624,
            26698,
            9743,
            1196,
            12834,
            5553,
            26871,
            9906,
            10245,
            7836,
            11470,
            1286,
            14487,
            1961,
            16273,
            9844,
            3408,
            18111,
            19889,
            22900,
            23647,
            20099,
            15099,
            26262,
            2495,
            25025,
            20937,
            18695,
            7907,
            24273,
            1636,
            20818,
            20135,
            26062,
            16438,
            26758,
            23372,
            17885,
            26888,
            517,
            22520,
            7284,
            25114,
            6397,
            13383,
            4075,
            4602,
            25881,
            24399,
            5809,
            4746,
            22601,
            6461,
            5898,
            17933,
            25639,
            24844,
            25373,
            4296,
            17219,
            19557,
            11482,
            1771,
            2728,
            25118,
            4345,
            5619,
            1768,
            8365,
            24123,
            24044,
            8427,
            14721,
            4622,
            24424,
            16024,
            3127,
            16980,
            14417,
            5985,
            14449,
            24254,
            3366,
            21575,
            5136,
            678,
            13011,
            16870,
            26103,
            2681,
            23131,
            22236,
            22183,
            21019,
            8711,
            23913,
            20746,
            22334,
            24117,
            6868,
            25284,
            22788,
            1373,
            3564,
            11909,
            18425,
            3520,
            24448,
            12403,
            26494,
            24542,
            4875,
            14149,
            11323,
            3495,
            874,
            19124,
            8865,
            23477,
            3715,
            25497,
            21093,
            6955,
            15765,
            23572,
            26718,
            24190,
            14950,
            13518,
            2475,
            171,
            11868,
            1032,
            18269,
            3037,
            9441,
            5782,
            18775,
            26745,
            8217,
            5200,
            4804,
            17705,
            25207,
            11014,
            14943,
            21887,
            23352,
            7200,
            6312,
            16822,
            6357,
            26955,
            7124,
            19326,
            8026,
            24102,
            13537,
            7197,
            1358,
            21712,
            21901,
            5773,
            23402,
            18857,
            1517,
            8024,
            24227,
            15293,
            11792,
            13548,
            11026,
            4460,
            12234,
            19056,
            23680,
            3418,
            7130,
            6771,
            24294,
            23341,
            12878,
            16170,
            15732,
            23245,
            10812,
            19627,
            23842,
            6520,
            16857,
            14059,
            14743,
            417,
            5928,
            12450,
            18332,
            11807,
            12473,
            1798,
            21179,
            21837,
            24677,
            9794,
            24522,
            10413,
            18764,
            14585,
            19565,
            9883,
            26125,
            18338,
            2314,
            2226,
            7320,
            9564,
            23925,
            12992,
            17571,
            25905,
            21716,
            1426,
            16495,
            11365,
            25828,
            10357,
            14897,
            11578,
            4239,
            19943,
            23697,
            23224,
            12111,
            6134,
            19575,
            5747,
            17950,
            8029,
            25553,
            24093,
            11351,
            562,
            9672,
            9984,
            800,
            18563,
            7081,
            3343,
            25066,
            10705,
            8466,
            26688,
            20105,
            17748,
            21863,
            17448,
            6934,
            14124,
            17800,
            7128,
            24733,
            19908,
            22294,
            23521,
            15226,
            16778,
            23918,
            16534,
            11566,
            13747,
            19413,
            3720,
            8787,
            11765,
            5959,
            5789,
            12480,
            23811,
            2905,
            6618,
            8304,
            12493,
            17270,
            706,
            6146,
            2023,
            6711,
            9032,
            17135,
            308,
            26829,
            26753,
            22707,
            6314,
            13780,
            17669,
            17551,
            12958,
            19502,
            13366,
            22905,
            16975,
            20922,
            23200,
            5511,
            11090,
            15988,
            9754,
            1073,
            18837,
            7353,
            9934,
            14479,
            12121,
            23198,
            8032,
            3682,
            9684,
            14795,
            20864,
            26416,
            19642,
            8129,
            18343,
            17596,
            18393,
            2239,
            24784,
            22597,
            220,
            22587,
            2837,
            14471,
            26048,
            25285,
            6989,
            8156,
            16992,
            14163,
            3745,
            7699,
            8720,
            10567,
            7234,
            13086,
            15766,
            4283,
            25457,
            2698,
            2188,
            8901,
            13078,
            6128,
            24858,
            10772,
            12343,
            17674,
            26269,
            22476,
            8255,
            21005,
            110,
            7994,
            3245,
            19585,
            8209,
            20944,
            3246,
            7459,
            25240,
            22168,
            26643,
            15129,
            19029,
            24065,
            3080,
            23957,
            11129,
            5972,
            12009,
            3346,
            23516,
            8646,
            22609,
            3769,
            15770,
            23968,
            2231,
            2829,
            645,
            23907,
            2261,
            5343,
            12025,
            3350,
            25989,
            24453,
            6274,
            6913,
            17723,
            5647,
            196,
            18419,
            26399,
            21695,
            15749,
            5351,
            4208,
            26687,
            5665,
            6978,
            22209,
            19806,
            22438,
            25875,
            14800,
            20302,
            14976,
            4368,
            25770,
            18288,
            13178,
            8357,
            10076,
            5426,
            10776,
            23173,
            22487,
            18473,
            20373,
            10032,
            2348,
            13718,
            14068,
            3434,
            24144,
            25718,
            21588,
            15850,
            9509,
            5766,
            9038,
            22135,
            20721,
            12419,
            22892,
            21498,
            26937,
            13646,
            4425,
            18712,
            11993,
            564,
            13425,
            21036,
            22092,
            104,
            13149,
            8105,
            13010,
            19673,
            13381,
            4900,
            8196,
            6575,
            15472,
            23166,
            14352,
            22499,
            5353,
            17346,
            18848,
            21743,
            2940,
            9839,
            14577,
            23839,
            7423,
            9242,
            15894,
            26944,
            24037,
            5121,
            26873,
            13024,
            474,
            3680,
            11665,
            21173,
            17145,
            10679,
            16566,
            9505,
            1133,
            5513,
            8935,
            5827,
            8521,
            24264,
            20512,
            13038,
            6405,
            1898,
            4916,
            24139,
            21865,
            8758,
            2944,
            18063,
            15430,
            18175,
            26588,
            6743,
            12189,
            18918,
            13244,
            1545,
            4928,
            26092,
            18009,
            2696,
            8686,
            21658,
            277,
            23409,
            11937,
            6344,
            14391,
            533,
            20667,
            137,
            9753,
            22387,
            18029,
            23018,
            7851,
            21346,
            14463,
            172,
            13524,
            16427,
            7308,
            17659,
            2766,
            22043,
            10974,
            10553,
            11106,
            19887,
            10889,
            16414,
            17953,
            15386,
            26951,
            4822,
            23454,
            13013,
            26962,
            1247,
            14648,
            18611,
            2197,
            25733,
            14181,
            25504,
            13709,
            2578,
            24926,
            6393,
            11986,
            24958,
            6796,
            20879,
            7801,
            15161,
            11332,
            4557,
            6024,
            11772,
            19115,
            23486,
            10270,
            19546,
            13112,
            12223,
            20443,
            18809,
            15981,
            18406,
            8343,
            11074,
            11118,
            17796,
            15884,
            20954,
            3026,
            11167,
            23850,
            20445,
            2586,
            14514,
            26164,
            4054,
            3082,
            19158,
            9319,
            8960,
            16932,
            14340,
            18594,
            25619,
            2864,
            7179,
            12977,
            26264,
            3072,
            10725,
            24078,
            3785,
            16004,
            1651,
            3014,
            20369,
            19347,
            21464,
            1072,
            1833,
            14997,
            3270,
            14177,
            12331,
            26428,
            24837,
            17790,
            9202,
            1981,
            2209,
            23593,
            26025,
            20686,
            9082,
            6548,
            9479,
            24527,
            25665,
            23961,
            13014,
            25188,
            12132,
            18576,
            16972,
            3791,
            10502,
            14660,
            21333,
            1735,
            11188,
            7790,
            16860,
            18146,
            21920,
            5836,
            23201,
            1005,
            17152,
            26308,
            23315,
            8877,
            8019,
            15578,
            20941,
            26521,
            17299,
            13222,
            11327,
            16198,
            5722,
            12573,
            76,
            9960,
            6098,
            15626,
            5648,
            14182,
            12020,
            11172,
            10227,
            14249,
            1044,
            27030,
            17967,
            4891,
            23294,
            5418,
            15844,
            8694,
            15307,
            4339,
            6958,
            227,
            24475
        ],
        "test": [
            22617,
            6225,
            1511,
            12674,
            9652,
            5895,
            15122,
            11018,
            16236,
            4064,
            12974,
            7757,
            6756,
            17510,
            8593,
            25824,
            3851,
            9992,
            12836,
            5886,
            60,
            25689,
            26160,
            4046,
            15259,
            16594,
            13377,
            5437,
            11162,
            14634,
            25849,
            9933,
            25230,
            16296,
            17375,
            25728,
            8220,
            15286,
            1754,
            8412,
            9894,
            6926,
            331,
            5435,
            6948,
            19426,
            12096,
            3053,
            13825,
            17388,
            7420,
            23808,
            20731,
            8241,
            9608,
            25048,
            5953,
            10033,
            23677,
            25965,
            11657,
            15554,
            10500,
            11117,
            7605,
            26273,
            19826,
            13574,
            9224,
            1730,
            18113,
            2374,
            18736,
            27025,
            4701,
            12841,
            14276,
            22934,
            20030,
            21949,
            14461,
            22064,
            13376,
            19214,
            11330,
            21256,
            25573,
            5348,
            1242,
            4936,
            9554,
            20819,
            25821,
            4792,
            15497,
            15131,
            15760,
            7800,
            11086,
            16497,
            22428,
            1579,
            3580,
            18964,
            20432,
            19472,
            10125,
            3374,
            9142,
            10778,
            2403,
            21179,
            3033,
            20040,
            4115,
            26192,
            8282,
            21876,
            26590,
            13805,
            25975,
            14795,
            1943,
            7201,
            20898,
            3452,
            20843,
            22358,
            18114,
            21332,
            19986,
            709,
            13890,
            13161,
            16556,
            21391,
            21888,
            15820,
            9099,
            18914,
            15975,
            8550,
            5430,
            24532,
            19733,
            20666,
            4604,
            17335,
            16259,
            14315,
            799,
            22470,
            15927,
            3948,
            5211,
            18717,
            748,
            438,
            3224,
            16711,
            2572,
            11284,
            23953,
            9899,
            14715,
            7099,
            18372,
            4545,
            10628,
            22727,
            2834,
            10384,
            26578,
            21188,
            19859,
            4040,
            20774,
            21014,
            217,
            25083,
            24047,
            994,
            20823,
            21320,
            3182,
            7653,
            18398,
            11360,
            25570,
            12423,
            9479,
            13812,
            6226,
            24366,
            10831,
            3833,
            26405,
            20718,
            19634,
            6165,
            12684,
            6892,
            25465,
            9077,
            14211,
            20634,
            4412,
            22536,
            20966,
            1587,
            4391,
            27081,
            719,
            11243,
            9707,
            24117,
            7126,
            15638,
            10198,
            23531,
            19442,
            3974,
            11263,
            20986,
            10469,
            24737,
            18723,
            565,
            16366,
            22622,
            3629,
            11281,
            19059,
            21505,
            9492,
            16398,
            8141,
            18053,
            9590,
            17755,
            24996,
            10534,
            1127,
            6384,
            11883,
            14908,
            598,
            7482,
            2029,
            22662,
            15005,
            14692,
            18418,
            17051,
            20429,
            6529,
            21880,
            5366,
            2110,
            9575,
            11540,
            6072,
            3351,
            18849,
            24899,
            6144,
            15088,
            18296,
            22686,
            18054,
            3760,
            20174,
            1284,
            9129,
            25432,
            23800,
            23024,
            914,
            7292,
            22061,
            3723,
            15236,
            21999,
            9932,
            20561,
            16614,
            3852,
            1302,
            11476,
            17872,
            22356,
            5109,
            18530,
            10906,
            15519,
            6765,
            22355,
            17227,
            10812,
            15359,
            27042,
            13131,
            7597,
            4637,
            23232,
            6029,
            2620,
            14419,
            1191,
            20227,
            3089,
            340,
            2930,
            7701,
            24869,
            24321,
            20265,
            10101,
            3782,
            7275,
            14096,
            23212,
            26251,
            10521,
            3193,
            21001,
            10011,
            26037,
            5538,
            22884,
            4769,
            9523,
            11758,
            4643,
            20632,
            13353,
            631,
            17263,
            763,
            21061,
            25240,
            19880,
            18769,
            26397,
            21097,
            14748,
            13832,
            651,
            5136,
            3431,
            8950,
            15245,
            1598,
            23738,
            1568,
            407,
            18078,
            11759,
            21629,
            24797,
            23991,
            19637,
            13939,
            22885,
            23335,
            6409,
            20883,
            11686,
            5759,
            19792,
            7673,
            17687,
            15945,
            4692,
            8474,
            27008,
            12706,
            3550,
            9274,
            25321,
            13570,
            663,
            16224,
            21185,
            8843,
            10468,
            22150,
            6860,
            14282,
            3081,
            19415,
            24342,
            16394,
            13901,
            15873,
            2582,
            3318,
            24911,
            11936,
            13604,
            11353,
            519,
            621,
            2719,
            5233,
            18494,
            20681,
            22400,
            17587,
            2575,
            4285,
            26392,
            23827,
            19530,
            25960,
            2868,
            27087,
            13931,
            25501,
            16802,
            20626,
            9053,
            15055,
            26003,
            16161,
            6944,
            19586,
            6673,
            21442,
            13448,
            69,
            7568,
            26995,
            5856,
            8187,
            5921,
            2122,
            24527,
            18283,
            23062,
            1847,
            9348,
            15091,
            14451,
            3400,
            5543,
            3354,
            2090,
            22636,
            24443,
            22583,
            13618,
            24948,
            24411,
            12840,
            8465,
            11863,
            22307,
            8601,
            1049,
            10974,
            25208,
            8240,
            26675,
            22593,
            26838,
            24819,
            24374,
            26616,
            6061,
            19159,
            14953,
            20046,
            8603,
            4137,
            11161,
            4168,
            25875,
            15174,
            2143,
            13063,
            9867,
            5766,
            25452,
            12589,
            17298,
            2107,
            17497,
            1505,
            4297,
            13504,
            16312,
            10488,
            2607,
            2639,
            5492,
            21348,
            19041,
            26191,
            19153,
            20871,
            4429,
            20458,
            3925,
            3465,
            10890,
            8127,
            20875,
            8833,
            4481,
            21334,
            26955,
            1925,
            76,
            24128,
            2733,
            5016,
            24764,
            1721,
            7267,
            23180,
            3061,
            6970,
            1541,
            18381,
            22667,
            4938,
            1480,
            1013,
            845,
            811,
            4946,
            7763,
            2323,
            2198,
            3401,
            16449,
            5318,
            6817,
            24864,
            17851,
            10929,
            17229,
            21821,
            2724,
            24605,
            12377,
            21189,
            5506,
            26788,
            14190,
            5814,
            14099,
            19245,
            11238,
            12086,
            15219,
            11880,
            6619,
            12331,
            26574,
            6682,
            153,
            16985,
            137,
            11964,
            1944,
            9944,
            10363,
            7727,
            14678,
            24625,
            26222,
            20444,
            13323,
            1322,
            8006,
            20345,
            14207,
            26420,
            19199,
            18594,
            10455,
            24988,
            10392,
            27045,
            2870,
            16265,
            16389,
            26821,
            21564,
            8225,
            17516,
            24188,
            25878,
            6259,
            20223,
            10464,
            24513,
            26610,
            14830,
            17221,
            26531,
            16512,
            20425,
            8000,
            14611,
            1011,
            12944,
            12925,
            22310,
            15313,
            24881,
            5710,
            7810,
            7588,
            16742,
            22143,
            17144,
            22753,
            23336,
            8770,
            22286,
            2906,
            11285,
            24317,
            2772,
            16691,
            5261,
            2044,
            13388,
            10416,
            24705,
            12494,
            21981,
            20720,
            25441,
            19173,
            19273,
            23568,
            22290,
            18962,
            20273,
            16039,
            17680,
            26253,
            21858,
            22419,
            10284,
            26679,
            9641,
            7755,
            7869,
            24646,
            22678,
            27043,
            21851,
            19505,
            19113,
            51,
            8690,
            6853,
            14671,
            17951,
            25705,
            22623,
            25098,
            21023,
            14741,
            2332,
            20315,
            24067,
            16640,
            16089,
            2791,
            15851,
            10817,
            3745,
            1252,
            7472,
            20424,
            9465,
            18944,
            14817,
            12539,
            24444,
            1180,
            25163,
            15877,
            2614,
            2188,
            5198,
            12892,
            6887,
            20190,
            3426,
            8462,
            25812,
            27006,
            22347,
            14869,
            1981,
            24174,
            10946,
            15841,
            6609,
            25657,
            11658,
            15774,
            2253,
            9369,
            2520,
            25059,
            24288,
            16737,
            18432,
            25470,
            23893,
            11260,
            2750,
            23880,
            20133,
            14468,
            4008,
            25740,
            25611,
            25268,
            5693,
            9874,
            22026,
            12354,
            27022,
            17585,
            20933,
            402,
            12734,
            17925,
            3911,
            13919,
            7564,
            829,
            64,
            16632,
            18596,
            11084,
            17301,
            16476,
            1444,
            17737,
            3372,
            26103,
            21667,
            16589,
            2956,
            7841,
            20861,
            26513,
            11969,
            219,
            8222,
            7817,
            14311,
            22654,
            5374,
            23720,
            5187,
            4057,
            2924,
            3169,
            6644,
            13486,
            15644,
            18135,
            3662,
            7261,
            19906,
            17528,
            22159,
            26639,
            6411,
            18607,
            7497,
            8135,
            14138,
            4806,
            22135,
            9475,
            9732,
            11413,
            3121,
            414,
            19615,
            14545,
            14403,
            19753,
            20224,
            20631,
            26904,
            21801,
            4507,
            16989,
            26450,
            25028,
            2169,
            12382,
            18518,
            2232,
            11109,
            20033,
            20512,
            24138,
            21931,
            19681,
            13047,
            5044,
            19974,
            22500,
            12360,
            18393,
            18584,
            17981,
            18506,
            23161,
            18111,
            24563,
            3951,
            23869,
            1469,
            22966,
            9862,
            18044,
            13740,
            2284,
            2021,
            23235,
            14497,
            14189,
            2398,
            3415,
            4415,
            18461,
            25731,
            26629,
            1983,
            3038,
            6128,
            24895,
            7730,
            25912,
            19760,
            23725,
            13588,
            25049,
            12063,
            15694,
            22705,
            8611,
            16450,
            18002,
            4446,
            16436,
            26302,
            4329,
            1765,
            11982,
            7423,
            12238,
            6664,
            5527,
            25105,
            10563,
            6317,
            7430,
            7138,
            13079,
            24029,
            20635,
            8460,
            23302,
            9982,
            10457,
            3022,
            18259,
            23943,
            21660,
            620,
            24136,
            25063,
            9105,
            13871,
            15485,
            8283,
            7775,
            10314,
            1992,
            17216,
            33,
            10960,
            10115,
            20800,
            16112,
            25746,
            25185,
            4035,
            3518,
            19831,
            25788,
            22949,
            23928,
            12643,
            23447,
            18082,
            15238,
            25716,
            23470,
            13497,
            20065,
            6602,
            1334,
            10615,
            6740,
            1607,
            23550,
            25298,
            2391,
            19885,
            24085,
            5169,
            20240,
            23273,
            26717,
            15275,
            16400,
            5988,
            17473,
            4955,
            23371,
            24064,
            7994,
            11397,
            13104,
            1557,
            14313,
            23940,
            20756,
            6481,
            20259,
            9374,
            16486,
            9580,
            16899,
            22542,
            8555,
            22696,
            8507,
            1362,
            10450,
            24274,
            24649,
            1911,
            3882,
            4228,
            19981,
            13778,
            16631,
            7442,
            21222,
            11275,
            13707,
            10138,
            14342,
            15749,
            2574,
            18238,
            10080,
            292,
            806,
            12703,
            21457,
            17764,
            18573,
            16238,
            9272,
            10990,
            5356,
            14240,
            19688,
            25999,
            4386,
            10623,
            10861,
            16741,
            5982,
            142,
            5334,
            22012,
            24706,
            17451,
            19596,
            7814
        ],
        "train": [
            12798,
            11303,
            13296,
            22008,
            3286,
            13076,
            4583,
            17759,
            8815,
            14104,
            7192,
            21100,
            15139,
            19987,
            17049,
            22952,
            21481,
            13292,
            10166,
            11214,
            9682,
            15465,
            13291,
            22798,
            3197,
            376,
            930,
            15467,
            19381,
            1038,
            26259,
            8636,
            22378,
            17260,
            1291,
            412,
            6786,
            22616,
            12047,
            1350,
            20965,
            9596,
            11985,
            25519,
            17297,
            8582,
            12844,
            7215,
            3222,
            13941,
            22906,
            13022,
            17189,
            4331,
            19912,
            25502,
            5705,
            2152,
            2061,
            23654,
            11757,
            1690,
            6888,
            10695,
            19457,
            22422,
            8631,
            14535,
            10685,
            17214,
            4722,
            5837,
            681,
            7006,
            13512,
            24278,
            17360,
            14723,
            13958,
            4830,
            10060,
            4229,
            11245,
            19365,
            18815,
            9920,
            5267,
            14932,
            2413,
            2713,
            19924,
            24455,
            4213,
            15316,
            14805,
            15942,
            4732,
            18581,
            13051,
            11960,
            23402,
            26329,
            13011,
            453,
            18569,
            10904,
            14561,
            11317,
            18147,
            25394,
            9637,
            13119,
            12966,
            15194,
            16731,
            17870,
            4598,
            15904,
            26185,
            1167,
            758,
            5045,
            26537,
            24325,
            6397,
            2854,
            12019,
            4181,
            18667,
            1188,
            12193,
            8309,
            13561,
            22161,
            19184,
            24412,
            16506,
            26069,
            20764,
            7071,
            3366,
            10689,
            14244,
            11838,
            9180,
            17979,
            22800,
            20226,
            10578,
            9034,
            26106,
            10975,
            11741,
            23064,
            21408,
            16529,
            7922,
            25741,
            21732,
            7962,
            7114,
            19952,
            5168,
            5852,
            13583,
            26900,
            7059,
            17251,
            9733,
            7784,
            17763,
            14385,
            25916,
            26471,
            11610,
            12773,
            18421,
            15772,
            5309,
            16576,
            16308,
            22900,
            10949,
            21262,
            2319,
            8146,
            17232,
            24681,
            5713,
            3450,
            3547,
            12101,
            16114,
            15585,
            11864,
            5733,
            9729,
            15642,
            6535,
            17447,
            23560,
            1146,
            696,
            12667,
            14443,
            3650,
            27032,
            21369,
            22455,
            22124,
            17825,
            3562,
            15310,
            23681,
            24639,
            24904,
            26579,
            27016,
            13764,
            21129,
            26221,
            9239,
            5101,
            24994,
            20946,
            13414,
            21167,
            15480,
            14250,
            16075,
            17422,
            26689,
            16575,
            7718,
            9573,
            9971,
            2153,
            21170,
            25651,
            24747,
            10581,
            26254,
            9176,
            19446,
            23507,
            10100,
            12390,
            21669,
            11929,
            15254,
            14185,
            17774,
            9934,
            16435,
            10859,
            12923,
            25623,
            17790,
            5150,
            3349,
            9603,
            17722,
            16967,
            2560,
            8540,
            6531,
            17502,
            11820,
            2040,
            9936,
            4577,
            24568,
            26340,
            8741,
            23048,
            16543,
            20167,
            20182,
            19197,
            1037,
            13838,
            5088,
            26472,
            1891,
            25889,
            17416,
            25307,
            10957,
            19107,
            11503,
            17730,
            16235,
            18344,
            3040,
            13731,
            14064,
            26496,
            16011,
            22487,
            1753,
            20416,
            26415,
            23404,
            10182,
            2047,
            8820,
            3386,
            15137,
            4164,
            969,
            13569,
            24425,
            7676,
            17058,
            6185,
            18851,
            19832,
            8352,
            17344,
            277,
            9989,
            25399,
            16083,
            12785,
            25739,
            9905,
            26338,
            20787,
            5902,
            18664,
            8732,
            24630,
            1304,
            11575,
            26690,
            6766,
            18323,
            5472,
            12906,
            19978,
            632,
            26687,
            25085,
            7156,
            43,
            765,
            1788,
            18309,
            6707,
            1134,
            24894,
            5133,
            26554,
            4880,
            19589,
            18167,
            18304,
            19075,
            7493,
            2885,
            24092,
            495,
            16300,
            18281,
            19064,
            6769,
            24222,
            16457,
            25440,
            5936,
            6646,
            18529,
            5830,
            26127,
            22829,
            15653,
            2866,
            259,
            22869,
            16665,
            9292,
            18010,
            11445,
            11801,
            2160,
            11056,
            6597,
            1333,
            9135,
            20648,
            16028,
            20832,
            26866,
            14234,
            1052,
            19539,
            2804,
            20008,
            20499,
            20866,
            7882,
            7027,
            15545,
            17061,
            15529,
            13847,
            22917,
            21028,
            3436,
            6838,
            21005,
            13892,
            14199,
            17196,
            5222,
            15101,
            11181,
            13373,
            8635,
            2406,
            9482,
            24201,
            21138,
            23749,
            8473,
            6857,
            25720,
            19851,
            19033,
            5090,
            6372,
            13136,
            10072,
            12977,
            3891,
            8056,
            1705,
            23213,
            20748,
            510,
            11637,
            19793,
            1898,
            12594,
            7329,
            15181,
            6004,
            11156,
            12403,
            4785,
            3325,
            18129,
            3036,
            2672,
            16725,
            3105,
            22607,
            16322,
            5598,
            4349,
            19138,
            23865,
            24217,
            17830,
            21412,
            1498,
            1745,
            11938,
            4201,
            22574,
            18779,
            21425,
            2002,
            120,
            25900,
            25530,
            27049,
            15097,
            23159,
            4418,
            9095,
            12630,
            20816,
            3353,
            17729,
            11830,
            17544,
            11400,
            10682,
            9471,
            19921,
            5003,
            8561,
            15846,
            18598,
            5892,
            25492,
            19388,
            16034,
            11141,
            16057,
            797,
            17244,
            8863,
            1742,
            9297,
            21316,
            12790,
            15785,
            26421,
            20614,
            16982,
            677,
            25468,
            5229,
            16561,
            14977,
            16642,
            20350,
            11955,
            7186,
            16088,
            11458,
            14971,
            6064,
            20914,
            3288,
            18577,
            12881,
            21662,
            6865,
            7942,
            12500,
            8323,
            6430,
            11352,
            6563,
            3704,
            15655,
            13058,
            17012,
            18050,
            24758,
            1555,
            190,
            11196,
            15296,
            11671,
            13005,
            15173,
            20002,
            18683,
            16888,
            18288,
            16261,
            5644,
            5671,
            21411,
            15883,
            21924,
            9023,
            11921,
            14764,
            22377,
            7106,
            7618,
            21707,
            1185,
            25407,
            211,
            7257,
            1573,
            5985,
            26814,
            9020,
            17513,
            11772,
            1208,
            4319,
            14289,
            1939,
            3708,
            8169,
            6243,
            4448,
            4689,
            11692,
            17138,
            11035,
            14738,
            13742,
            4590,
            23838,
            59,
            5273,
            18942,
            15068,
            12623,
            4374,
            15693,
            15403,
            15256,
            23764,
            6198,
            25901,
            1363,
            5250,
            8639,
            12368,
            6471,
            908,
            23933,
            22033,
            21977,
            19824,
            19707,
            22303,
            9289,
            4258,
            22444,
            19890,
            26440,
            18654,
            16144,
            17522,
            20219,
            26489,
            4225,
            13709,
            21991,
            10181,
            17909,
            17142,
            16996,
            19150,
            7940,
            13769,
            17676,
            9532,
            22708,
            3703,
            14317,
            5425,
            4133,
            12092,
            23246,
            3058,
            10617,
            15751,
            14588,
            4120,
            10891,
            15015,
            16413,
            14150,
            15741,
            17092,
            11318,
            17520,
            5726,
            18389,
            16557,
            21234,
            648,
            21456,
            11337,
            9100,
            23420,
            22151,
            26036,
            26909,
            24073,
            13068,
            26705,
            956,
            14423,
            6160,
            25462,
            14328,
            10169,
            1917,
            9978,
            3150,
            23314,
            4849,
            6310,
            418,
            12140,
            15090,
            19115,
            7045,
            25974,
            13114,
            962,
            17134,
            16171,
            13081,
            5204,
            22658,
            20476,
            14798,
            19440,
            25525,
            2602,
            21744,
            12577,
            24247,
            19447,
            7028,
            26099,
            8674,
            12983,
            18332,
            25050,
            3344,
            6967,
            12772,
            14656,
            10671,
            3090,
            3929,
            7471,
            17164,
            7669,
            7088,
            7909,
            23322,
            2369,
            10132,
            4599,
            26972,
            26944,
            20000,
            14804,
            3251,
            15902,
            8939,
            3807,
            20123,
            21303,
            21856,
            13633,
            15914,
            22253,
            10745,
            19983,
            8066,
            9939,
            14171,
            20262,
            20274,
            21586,
            16210,
            7726,
            24976,
            14885,
            13865,
            9941,
            15436,
            12067,
            4954,
            3666,
            26994,
            24437,
            8070,
            7868,
            26649,
            4368,
            19190,
            1987,
            5375,
            24106,
            20594,
            24148,
            6715,
            11157,
            6327,
            7548,
            25737,
            2476,
            15171,
            24600,
            16612,
            8168,
            12826,
            19416,
            21068,
            23406,
            18714,
            10797,
            5115,
            20306,
            12473,
            19600,
            26541,
            13317,
            8711,
            6247,
            19403,
            2529,
            2065,
            15026,
            9600,
            4927,
            5038,
            15117,
            18417,
            22796,
            20397,
            1810,
            20436,
            3002,
            24034,
            9699,
            19864,
            8090,
            22359,
            8854,
            16023,
            10839,
            9848,
            1228,
            5614,
            6561,
            23592,
            352,
            16417,
            7511,
            2304,
            19975,
            8938,
            13761,
            18201,
            20245,
            16187,
            9570,
            6374,
            22492,
            1889,
            9961,
            678,
            24961,
            21195,
            15710,
            17385,
            20798,
            1128,
            24640,
            19323,
            4760,
            13288,
            19088,
            21388,
            21699,
            19289,
            2977,
            9311,
            14085,
            20007,
            1840,
            12662,
            11091,
            26061,
            1770,
            20334,
            13153,
            16294,
            23980,
            26125,
            9738,
            18945,
            14957,
            8990,
            21272,
            19887,
            19958,
            13382,
            18592,
            2434,
            22995,
            22190,
            8235,
            24885,
            10305,
            5419,
            15287,
            7978,
            7204,
            14690,
            14299,
            8402,
            16316,
            9392,
            13268,
            2224,
            23950,
            10405,
            24216,
            19623,
            301,
            22640,
            19889,
            2382,
            19823,
            22250,
            23492,
            27009,
            12764,
            22112,
            25144,
            8841,
            10412,
            14197,
            3407,
            4652,
            13876,
            10611,
            15687,
            13572,
            2324,
            12420,
            933,
            20824,
            25463,
            2864,
            14134,
            12676,
            1908,
            25416,
            19603,
            17462,
            4918,
            26441,
            25481,
            12546,
            25086,
            4704,
            15464,
            1846,
            12859,
            10008,
            25932,
            12608,
            22575,
            1283,
            26504,
            8702,
            4356,
            3774,
            18424,
            1031,
            20537,
            12106,
            13128,
            11679,
            11980,
            18928,
            4310,
            1050,
            1461,
            25206,
            10921,
            2691,
            25207,
            15628,
            614,
            8669,
            13654,
            16954,
            7319,
            3554,
            20830,
            26562,
            26020,
            10710,
            3587,
            4617,
            15572,
            2480,
            1515,
            10909,
            12829,
            8434,
            22211,
            5995,
            2858,
            6350,
            17468,
            9208,
            14272,
            13784,
            5922,
            26699,
            2354,
            23323,
            13648,
            3519,
            22226,
            17365,
            1154
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "pmid",
        "py",
        "py2",
        "py3",
        "terriss",
        "riveriss",
        "mariss",
        "terrAtt",
        "rivAtt",
        "marAtt",
        "minpol",
        "rbal",
        "lnkmdist"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR12c_Gleditsch_Ward_Combined_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "auto_sklearn": [],
        "d3m": [
            "27485"
        ],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "auto_sklearn": {
            "9bb244bb-5c5b-42d1-9825-f7465f0e1bb3": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='cv',\n           resampling_strategy_arguments={'shuffle': False, 'folds': 10},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=600, tmp_folder=None)",
                "model": "AutoSklearnClassifier",
                "model_id": "9bb244bb-5c5b-42d1-9825-f7465f0e1bb3",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/79989c17-1a3a-4584-8543-6f34e04b44c5.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0dcbbd19-d272-47b7-b1aa-088dc2cc1475.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/78d4ff8e-de05-41dd-8ce3-745cdb5f8561.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fe211367-9194-404d-9e67-ac0d37004453.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/309f6235-8513-49ed-91a0-c8fe56165608.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a5cea462-4dae-4177-84ca-8d0e1631fe4d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4e2e8229-233c-4a57-b4a3-1556338977cb.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a4c6c6d3-6782-4d17-a9ea-4454f99642b1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9901852261825695
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0
                    }
                ],
                "search_id": "b0d13faf-2cb6-477b-be60-284041c075c3",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "27400": {
                "created": "2019-11-11T06:06:54.296966+00:00",
                "details_url": "/d3m-service/stored-response/09a21ceed5b6bf0d4af37c7ceaabf4c2e6b35e1bb937683610b437f2",
                "hash_id": "09a21ceed5b6bf0d4af37c7ceaabf4c2e6b35e1bb937683610b437f2",
                "id": 27400,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:06:54.317213+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27400,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/658cd756-de08-4102-94ad-dfbd4fb68e92.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/3f00a727-1f0d-48df-ac0a-6c427df071f7.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/7589d35e-cf14-4962-94c0-9f0465e14e95.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9901852011680603
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27408": {
                "created": "2019-11-11T06:06:56.057219+00:00",
                "details_url": "/d3m-service/stored-response/94b3ad7dba6199b55b59d0c6ace88836523a40b85175630f0cb5c164",
                "hash_id": "94b3ad7dba6199b55b59d0c6ace88836523a40b85175630f0cb5c164",
                "id": 27408,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:06:56.114326+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27408,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/77fbd1e5-0f59-4a7a-b7b3-4ecc4a517da4.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/114d3b6a-07ab-489e-930d-edf28b786242.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/775ccdb2-1afc-4335-9bd6-c3f8e74c5edc.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9901852011680603
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27434": {
                "created": "2019-11-11T06:07:03.819014+00:00",
                "details_url": "/d3m-service/stored-response/ef14ab33bed8da566c9e47f383b0988eb1aa11e9d20c1867f44eb393",
                "hash_id": "ef14ab33bed8da566c9e47f383b0988eb1aa11e9d20c1867f44eb393",
                "id": 27434,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:07:03.842854+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "24"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27434,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/bdf871ff-de3d-41df-bede-174dbb15f3bb.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/6803833f-19c0-4558-a0dd-5e4fd007f5b4.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/cffcf312-2af3-4f00-8113-23f9a9efcd99.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5729716062545777
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.997454047203064
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9624413251876831
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7706766724586487
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.855949878692627
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27436": {
                "created": "2019-11-11T06:07:04.697241+00:00",
                "details_url": "/d3m-service/stored-response/188420a411bde57a8615fec5aa6bb049e461267bb5cbd69d292cf32b",
                "hash_id": "188420a411bde57a8615fec5aa6bb049e461267bb5cbd69d292cf32b",
                "id": 27436,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:07:04.797317+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "24"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27436,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/b44525c1-ee94-4a69-a03f-2420a6f637e7.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/c96ef3d8-f6d3-4d9f-ae36-39c6af0a4bf0.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/42974347-0583-49e9-a685-efda69397187.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5729716062545777
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.998727023601532
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9812206625938416
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8853383362293243
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9279749393463135
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27468": {
                "created": "2019-11-11T06:10:30.667903+00:00",
                "details_url": "/d3m-service/stored-response/d3bb029cd8ae77b8b5c9484d5f325aecdb9b02aeb0ac31f7efb8b999",
                "hash_id": "d3bb029cd8ae77b8b5c9484d5f325aecdb9b02aeb0ac31f7efb8b999",
                "id": 27468,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:10:30.694826+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "c6129373f12d8f13d08047c969ccfbe94ea26bc0659f1325331946cf4c3d8c35",
                                    "id": "08d0579d-38da-307b-8b75-6a213ef2972e",
                                    "name": "sklearn.preprocessing.data.MinMaxScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.min_max_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27468,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/c88750c2-03fd-4d6a-97f2-d2db8e2affaa.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/856b299f-b07a-49e6-850b-e0680efc9828.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/86193042-9628-48d6-8486-e6d35d090eea.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6001075148582459
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9972326755523682
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9170305728912354
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7894737124443054
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8484848737716675
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27485": {
                "created": "2019-11-11T06:10:44.230843+00:00",
                "details_url": "/d3m-service/stored-response/8fee7b06d79c1f3449768b4542ead0bd949168824c3d1600f2d31034",
                "hash_id": "8fee7b06d79c1f3449768b4542ead0bd949168824c3d1600f2d31034",
                "id": 27485,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T06:10:44.256454+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "16",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "c6129373f12d8f13d08047c969ccfbe94ea26bc0659f1325331946cf4c3d8c35",
                                    "id": "08d0579d-38da-307b-8b75-6a213ef2972e",
                                    "name": "sklearn.preprocessing.data.MinMaxScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.min_max_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27485,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/b8f79d3c-12dd-4545-8b6d-b48d0fb02140.csv",
                    "test": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/498297c3-4f40-4b76-99ae-c97a44c5d62a.csv",
                    "train": "/ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/temp/8426508f-50ae-4e0d-ba2c-437d9075128b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6001075148582459
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9972326755523682
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9170305728912354
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7894737124443054
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8484848737716675
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "0d9ea102-1674-454d-bc94-e9eace4dedd5": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "0d9ea102-1674-454d-bc94-e9eace4dedd5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/434159ca-4a47-4457-b5e6-25fe8883903f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3f3e58d2-ef77-4aab-998b-e95d533af678.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/db6069b0-d878-454c-989e-9c3564d63477.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ae84138e-891d-456f-a00c-67723591c489.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8a0dc5c0-c142-49c4-9900-97b3b881a1a0.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/daa8ec2a-f4da-4862-8877-64a106a86dac.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2f89ce6c-3984-4eab-ba3c-0fd17872317f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0fffd791-ea86-45ac-aa42-ea5e801ed4b1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.6926008100441893
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9883034462401299
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.4015444015444015
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.39097744360902253
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.39619047619047615
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "198d0cdd-4a86-4afb-92f8-8248ef327059": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "198d0cdd-4a86-4afb-92f8-8248ef327059",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/15ef7da8-3d95-410c-a5e5-3b256d17b847.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/862416ad-7390-4950-a80e-d128fa394a21.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1d44236e-3eb5-4409-aac2-1558582d70bb.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/efdedfd6-a6c5-47eb-a831-8f8d4bc7a934.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e96ae324-c236-400d-b307-89b6a2552f7f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/10c66bd4-080c-4d37-88ec-f150774342a8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3f2b04ec-27ee-4e39-8672-1f5eb4113a82.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fe136013-362a-4212-a464-4054989cfe0e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.7502960057021373
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9919932108331488
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.6118721461187214
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.5037593984962406
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.5525773195876288
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "1a129ae0-c769-497b-9121-e907ce81a4c6": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "1a129ae0-c769-497b-9121-e907ce81a4c6",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c5b7aef1-3344-4dbe-a741-437fb16635ea.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1e2a4947-17c7-4df8-9e89-8fb0cbf9b17b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aa59c13d-7131-4ee9-9d9f-5c8e89c68a00.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/826c6a62-6f20-4822-a496-a89c9da3b41d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/55498f6b-65c3-4f5a-b11a-c44555f35b0d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dca9cd95-51a4-47c9-8301-25f2ccec1817.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a17a7869-c520-46b5-b79a-b31ac74342f9.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f09d90e0-8fdb-4319-bae4-6f57a888e97a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.8852729248221164
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.85019555752343
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.05718954248366013
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.9210526315789473
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.10769230769230768
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "38f8f1d5-5cf5-4ae9-a9d6-e6976129f647": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "38f8f1d5-5cf5-4ae9-a9d6-e6976129f647",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/da090043-6032-4a0c-be3c-6f8a9dc3acb4.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7b2ef5a0-5634-421b-a57a-e9fd7c74448f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3b35b6bd-0e8b-4ff4-bad1-0e7f1ac95873.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b3296db1-b838-4d83-8a98-6cb31285a8ba.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/478cce3f-154e-4b8d-98e6-c9b9cb6db6c8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c6339595-3715-4531-89f3-ca1334ec83d4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c67de614-01ce-4bcd-8bee-2f942acf1373.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/16a26223-9326-457d-87c6-8dc5fdb158b0.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.71260886229585
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.991070769684894
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.5588235294117647
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.42857142857142855
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.4851063829787233
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "48bb018b-0239-435d-9385-e1ad2aa47e64": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "48bb018b-0239-435d-9385-e1ad2aa47e64",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b46f31c2-d73c-4cbf-a6a2-067394671fef.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8a361db5-51da-44b6-b7b9-e815f43f9054.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2ab1203e-20f8-4222-9dc2-369e9ab4cc99.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f5890c0e-5c26-4cd5-ab71-c27927719253.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b382a2b7-8e92-4ae7-b722-b40d55752f9f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/260c4156-3923-45d1-9118-4e43fff6e95d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b6b30a70-d1e9-42bb-9446-5e1330f50449.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c9e162ad-3ea6-4fcb-9e3f-dae854883dec.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.9163592671498391
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9596708729983027
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.17970565453137102
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.8721804511278195
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.2980089916506101
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "6ec2e013-372b-40d9-8ed6-ee77a7a8f829": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "6ec2e013-372b-40d9-8ed6-ee77a7a8f829",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/83b8007f-a44b-4de3-a809-7cd61e89cc41.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e6a0daf1-3843-4755-b7de-e33236c71872.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5237d604-048e-4693-afb7-c52071e3b241.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/090f65db-7700-421c-862d-edd52065a890.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/035c9976-f45b-420e-b994-1c8b009aa83b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/069e3c10-557b-4156-893d-f935643c3829.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/03e4827a-c3fa-4a85-a3be-99b75942a22c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/17261a0c-f0e7-4c31-8321-ac5013e9daa1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.8919346641308892
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.8486458563943621
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.05745269958467928
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.9360902255639098
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.1082608695652174
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "8e880ed0-c560-4df7-b603-09814e4e81d9": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "8e880ed0-c560-4df7-b603-09814e4e81d9",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c7e8cccd-cfce-406d-801b-ec8cd9f61269.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5e8669ef-6f38-42f9-9836-409f5921333c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b7047bc3-d3aa-4b59-bbfe-2483dc94909d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/198ac40f-aa46-41c8-a34f-746623f8dba3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0a9f8866-119e-4cf6-9ce3-b8916d3e06f4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/71d470b4-596b-46c5-aaf9-631e0cf8b303.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/81a14b5a-d958-49af-bb32-7108e9890480.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cabeae2e-26f7-4208-aa1a-690cf9fe733c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.9215716571948579
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9294517009814773
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.11397748592870544
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.9135338345864662
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.20266889074228525
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "a0da8908-9c78-4990-9a1f-d09313f95b8e": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "a0da8908-9c78-4990-9a1f-d09313f95b8e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/00490a76-88bb-48a8-8a98-68d61696de77.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c6c4bba-0c76-4cb4-a9e8-7bffcce370f0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aac4f156-1e5b-44bc-aded-f9c9f3a08640.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/951a6345-9598-4d53-8467-23a80cf9e6e9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/96477e92-f1aa-4e0c-a517-be08b4e6a446.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a95b9009-a46c-44c0-ac85-c93b5c833c8e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/20dbc537-dca8-4832-a359-769464fd7f70.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4e12d9e7-f2ab-4157-9404-67bcbc515f20.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.7135942404827093
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9893365803261752
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.45454545454545453
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.4323308270676692
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.44315992292870904
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "eb16c879-1cd0-4425-bfa5-34769d8e9b31": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "eb16c879-1cd0-4425-bfa5-34769d8e9b31",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/09da727c-4436-4029-95cd-87547fa146c2.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2d6b8add-b523-4367-8632-08d125ef59b2.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0bf264e9-0dad-4b25-ac5b-876f10e8dc8e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8c57bda9-7288-4252-8bd9-bf4779445cb5.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c5abac4-5628-4064-95ea-1281b8ed58e2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60d2aa86-1c5e-4ceb-bbb8-f89cf4b1c00a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/659a3ecb-f9c5-4e07-9339-602d69fbe728.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d586ecf0-0577-4709-b9c2-6e4ddffedfde.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.7917052842271127
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9929156519814036
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.6554621848739496
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.5864661654135338
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.6190476190476191
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            },
            "eef14345-85d2-4b92-b6a5-7eb53d525f7c": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "eef14345-85d2-4b92-b6a5-7eb53d525f7c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d6e8546-8db9-4a5e-8a87-2e695666eb7a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dfc0b2e1-373f-4c8b-96b6-532697a12f2f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2086d5ef-d234-4b97-9a02-de269484068e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/74b41708-60f0-4558-a595-c001f82f6ef8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/86f1ed35-7897-4157-8a16-4c07ed4a1195.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/02a82230-8f9b-4b6c-b0f2-ff466fe34358.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/93c17a4f-045c-4cad-aa2d-d2164b166e1f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9729b2eb-a092-4f31-89ee-ca8a27619631.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.9089525404657866
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9929156519814036
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.6016483516483516
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.8233082706766918
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.6952380952380952
                    }
                ],
                "search_id": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
                "system": "h2o"
            }
        },
        "mlbox": {
            "496caea5-9734-4e02-8640-cd9fb79a458e": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "496caea5-9734-4e02-8640-cd9fb79a458e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6cce7275-51c1-4bad-9fe8-79475d7151b0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dbc047fc-bc8f-42b8-82f2-4d8459148eac.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bbec0008-f1d2-4290-a99b-47b68fe09fae.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/53edc66c-9047-4b6e-9db7-449cb9181b38.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8cda2276-4b5c-44ec-a2ce-4a17277b46fa.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8cc33ff8-a8a1-40a4-83fa-a440e2f5de98.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/630944e1-2bc5-4b8c-91cb-4498edd35b93.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60ea5219-1621-4a68-aa5b-4ef674a0227d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5038669173087483
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9573463213047008
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.10038182628926774
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.04131138228252833
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.044844795757544215
                    }
                ],
                "search_id": "5ce621ee-c562-4144-ad8b-14447829d243",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "1341df20-3f97-4888-975f-1056a55173f3": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7f9e85851358>",
                "model": "Ensemble",
                "model_id": "1341df20-3f97-4888-975f-1056a55173f3",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/237be984-9827-4408-a084-9a1a1ca52e2c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d586f44b-bfa8-4e5e-9259-2cd62c52a4bd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/77d847e2-07f4-40dc-9251-82b7600745f9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3f109f40-91c9-4b5d-8722-9dbe4ed2d856.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/210549a0-300b-48a9-89ce-ab133690a1a0.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/da3e4e8c-e34d-432f-94bb-ec574680e53b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "a68efbb0-8d1b-4eb5-a314-2a86f475a288",
                "system": "mljar-supervised"
            },
            "5e6cbc4a-8bae-448f-9fd2-726763b325f5": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f9e857fc048>",
                "model": "Xgboost",
                "model_id": "5e6cbc4a-8bae-448f-9fd2-726763b325f5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5fc3ac6c-9db8-4cf2-a3c1-67ce41e85819.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/701ee1d4-c8c6-44ad-a2b5-a0bbc780876d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/098870d0-c209-4cb9-b15d-bafa6c340424.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/72b59e2c-4799-4f41-826c-ff729356dcb7.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/83693708-048b-4ed1-b7ad-25115e4d4666.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/31b73a16-9056-4718-8722-4c04fcd9ec0b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7dac00f7-2bde-4c1e-adc1-8e2fda4c95a9.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/36d18f27-1c61-40f2-89d4-58e8d47cb94d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9901852261825695
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0
                    }
                ],
                "search_id": "a68efbb0-8d1b-4eb5-a314-2a86f475a288",
                "system": "mljar-supervised"
            },
            "c4cf7690-d18e-4153-99d1-2091f454953b": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f9f9ce81470>",
                "model": "Xgboost",
                "model_id": "c4cf7690-d18e-4153-99d1-2091f454953b",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/99d9b547-b2c5-4061-aac1-826221e98760.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/23fd535b-d998-4be8-b934-2932f4ef876c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/85b605de-9c42-4a13-b9a3-5844dbef192b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3b5719d8-dee0-4437-942d-5e43e4221752.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f0be24a5-5e1a-4284-89b6-627da3741df3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/db07d4d8-8398-4326-b85e-94c369785404.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/704c4b70-5f71-4409-afcf-59e8755e14cf.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60949448-fef1-402f-8782-fad7c04d4f6f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9901852261825695
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0
                    }
                ],
                "search_id": "a68efbb0-8d1b-4eb5-a314-2a86f475a288",
                "system": "mljar-supervised"
            },
            "e037637d-3ca6-4de9-a636-e9cb58be00b1": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f9e85f57eb8>",
                "model": "Xgboost",
                "model_id": "e037637d-3ca6-4de9-a636-e9cb58be00b1",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4ee01cb9-2994-4f74-95e2-8f88185b96ec.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/addfee68-630e-4168-8118-559cb04eb898.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ad5be8ae-42f9-4cef-9cbc-49a8ec13214b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/98bdd1e6-6105-4861-8185-b213f8ecb9b3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7d5f19d3-462a-4442-bddc-8c73f4985a04.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9b5f276b-88c1-481c-8b77-5f85f5184d8a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9320a8c0-264b-4c5a-9235-92fa6c73af0f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5981754c-baa8-4b63-aad7-bb522193c336.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9901852261825695
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0
                    }
                ],
                "search_id": "a68efbb0-8d1b-4eb5-a314-2a86f475a288",
                "system": "mljar-supervised"
            }
        },
        "rook": {},
        "tpot": {
            "001b6ff2-c0cb-49db-830e-e9b3d14b213e": {
                "description": "Pipeline(memory=None,\n     steps=[('randomforestclassifier', RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=None, max_features=0.4, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=12, min_samples_split=4,\n            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n            oob_score=False, random_state=None, verbose=0,\n            warm_start=False))])",
                "model": "Pipeline",
                "model_id": "001b6ff2-c0cb-49db-830e-e9b3d14b213e",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bc1554cd-5ba7-4508-a3ac-94d936c75b4d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cf2c0446-35ae-4011-b800-2c1e21a73fc0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR12c_Gleditsch_Ward_Combined/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b17dc475-6fa9-4675-b0e2-d0205e434094.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f89b680c-c8d6-4eaf-8154-e16ec188bc0f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/test/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/71b630c8-ba80-497e-99d2-002ea5d1e9b4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3c2f0069-6b38-43f9-a41e-d688b0582b3f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/train/ws_505/2019-11-11_00-26-13/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/320bc2ba-1793-459b-8c5a-01ec1e8a7bbf.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0425a2f8-c99b-4f3c-ad95-466c547d634b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR12c_Gleditsch_Ward_Combined/additional_inputs/partials/ws_505/2019-11-11_00-26-12/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "mido",
                        "value": 0.5127524507507427
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "mido",
                        "value": 0.9897424544314073
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "mido",
                        "value": 0.1345143215577132
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "mido",
                        "value": 0.026212886592194392
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "mido",
                        "value": 0.042871209082290855
                    }
                ],
                "search_id": "2752eeda-e146-4551-9e71-99740eb8b0fe",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "auto_sklearn": {
            "message": "search complete",
            "searchId": "b0d13faf-2cb6-477b-be60-284041c075c3",
            "thinking": false
        },
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "message": "search complete",
            "searchId": "08d1936b-cf3f-4d51-9019-2aff9d9556f0",
            "thinking": false
        },
        "mlbox": {
            "message": "search complete",
            "searchId": "5ce621ee-c562-4144-ad8b-14447829d243",
            "thinking": false
        },
        "mljar-supervised": {
            "message": "search complete",
            "searchId": "a68efbb0-8d1b-4eb5-a314-2a86f475a288",
            "thinking": false
        },
        "tpot": {
            "message": "search complete",
            "searchId": "2752eeda-e146-4551-9e71-99740eb8b0fe",
            "thinking": false
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "mido"
    ],
    "task": "classification",
    "timeBoundSearch": 10,
    "unedited": true
}