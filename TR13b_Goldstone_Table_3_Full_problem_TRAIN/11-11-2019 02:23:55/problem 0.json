{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            107,
            192,
            292,
            287,
            380,
            101,
            43,
            108,
            139,
            346,
            198,
            34,
            325,
            320,
            382,
            398,
            59,
            90,
            2,
            204,
            57,
            227,
            84,
            363,
            54,
            317,
            174,
            308,
            396,
            295,
            446,
            1,
            305,
            4,
            166,
            105,
            451,
            53,
            102,
            216,
            202,
            453,
            167,
            367,
            154,
            191,
            340,
            162,
            17,
            338,
            206,
            302,
            118,
            423,
            316,
            391,
            19,
            303,
            286,
            38,
            142,
            135,
            249,
            24,
            388,
            284,
            220,
            230,
            360,
            253,
            50,
            81,
            7,
            197,
            29,
            77,
            318,
            28,
            224,
            276,
            355,
            259,
            407,
            74,
            231,
            120,
            311,
            158,
            214,
            172,
            157,
            110,
            307,
            262,
            217,
            329,
            12,
            233,
            241,
            389,
            26,
            452,
            394,
            218,
            113,
            186,
            339,
            442,
            97,
            143,
            82,
            91,
            378,
            418,
            147,
            288,
            94,
            448,
            13,
            279,
            223,
            261,
            347,
            168,
            395,
            27,
            258,
            297,
            25,
            215,
            44,
            341,
            190,
            11,
            410,
            377,
            175,
            266,
            222,
            194,
            306,
            248,
            250,
            14,
            33,
            454,
            270,
            67,
            283,
            415,
            61,
            438,
            372,
            402,
            450,
            60,
            32,
            289,
            36,
            62,
            319,
            392,
            178,
            348,
            127,
            35,
            368,
            106,
            281,
            161,
            8,
            126,
            313,
            124,
            68,
            22,
            76,
            237,
            349,
            282,
            103,
            72,
            455,
            183,
            429,
            265,
            379,
            71,
            0,
            405,
            376,
            119,
            51,
            207,
            109,
            247,
            431,
            439,
            133,
            312,
            409,
            165,
            234,
            212,
            232,
            386,
            111,
            264,
            430,
            350,
            88,
            359,
            56,
            42,
            408,
            169,
            244,
            271,
            383,
            40,
            164,
            321,
            358,
            137,
            444,
            45,
            365,
            128,
            138,
            132,
            129,
            304,
            89,
            243,
            117,
            6,
            196,
            267,
            69,
            342,
            181,
            31,
            163,
            354,
            140,
            70,
            93,
            385,
            219,
            182,
            37,
            187,
            352,
            209,
            3,
            47,
            278,
            30,
            189,
            335,
            272,
            199,
            299,
            362,
            134,
            331,
            188,
            399,
            210,
            221,
            226,
            437,
            200,
            361,
            406,
            401,
            274,
            39,
            337,
            445,
            98,
            298,
            322,
            370,
            213,
            201,
            52,
            357,
            413,
            112,
            58,
            273,
            121,
            373,
            23,
            75,
            400,
            242,
            315,
            123,
            269,
            390,
            397,
            330,
            434,
            15,
            211,
            176,
            422,
            291,
            86,
            343,
            236,
            257,
            436,
            432,
            414,
            245,
            411,
            130,
            416,
            49,
            20,
            225,
            136,
            393,
            240,
            193,
            285,
            171,
            381,
            205,
            424,
            63,
            364,
            309,
            149,
            310,
            421,
            296,
            449,
            387,
            65,
            235,
            153,
            131,
            9,
            433,
            229,
            371,
            170,
            85,
            369,
            255,
            55,
            18,
            404,
            441,
            417,
            246,
            239,
            78,
            146,
            425,
            334,
            353,
            419,
            79,
            87,
            114,
            156,
            148,
            96,
            332,
            95,
            435,
            294,
            10,
            16,
            185,
            314,
            41,
            145,
            412,
            122,
            177,
            333,
            440,
            301,
            324,
            238,
            366,
            328,
            252,
            280,
            254,
            151,
            428,
            263,
            184,
            260,
            195,
            290,
            92,
            21,
            46,
            426,
            155,
            374,
            125,
            268,
            293,
            100,
            152,
            251,
            159,
            141,
            228,
            208,
            66,
            351,
            64,
            116,
            327,
            443,
            173,
            160,
            48,
            427,
            144,
            73,
            420,
            345,
            115,
            99,
            256,
            104,
            83,
            384,
            150,
            277,
            326,
            447,
            356,
            344,
            203,
            403,
            336,
            375,
            5,
            275,
            300,
            323,
            180,
            179,
            80
        ],
        "test": [
            412,
            78,
            59,
            90,
            49,
            198,
            331,
            425,
            144,
            350,
            383,
            382,
            361,
            384,
            327,
            22,
            402,
            249,
            336,
            403,
            364,
            247,
            132,
            252,
            159,
            5,
            369,
            12,
            118,
            293,
            392,
            154,
            297,
            8,
            411,
            272,
            330,
            441,
            122,
            15,
            142,
            428,
            6,
            179,
            68,
            381,
            373,
            155,
            4,
            113,
            253,
            54,
            419,
            96,
            301,
            246,
            81,
            299,
            340,
            37,
            65,
            348,
            102,
            21,
            141,
            344,
            455,
            71,
            205,
            372,
            157,
            160,
            421,
            26,
            225,
            171,
            395,
            365,
            60,
            274,
            311,
            170,
            432,
            135,
            100,
            220,
            124,
            319,
            74,
            278,
            134,
            445,
            452,
            309,
            20,
            1,
            224,
            448,
            75,
            239,
            56,
            55,
            76,
            45,
            354,
            254,
            200,
            219,
            326,
            52,
            417,
            64,
            313,
            206,
            300,
            281,
            196,
            107,
            245,
            10,
            213,
            298,
            240,
            7,
            221,
            400,
            175,
            191,
            261,
            355,
            276,
            14,
            435,
            377,
            371,
            415,
            339
        ],
        "train": [
            227,
            287,
            228,
            146,
            172,
            303,
            153,
            46,
            422,
            284,
            341,
            112,
            444,
            388,
            416,
            328,
            390,
            414,
            17,
            117,
            320,
            51,
            47,
            342,
            82,
            197,
            121,
            190,
            208,
            166,
            25,
            62,
            127,
            238,
            406,
            357,
            310,
            409,
            150,
            94,
            109,
            58,
            98,
            271,
            83,
            318,
            86,
            275,
            211,
            367,
            161,
            353,
            33,
            374,
            273,
            337,
            295,
            13,
            80,
            315,
            93,
            370,
            114,
            288,
            335,
            398,
            322,
            266,
            317,
            32,
            285,
            262,
            397,
            379,
            418,
            149,
            204,
            250,
            345,
            214,
            282,
            185,
            138,
            279,
            235,
            450,
            329,
            223,
            306,
            162,
            195,
            77,
            36,
            346,
            140,
            87,
            291,
            226,
            314,
            430,
            265,
            358,
            259,
            277,
            352,
            67,
            183,
            294,
            120,
            145,
            128,
            111,
            236,
            420,
            169,
            119,
            16,
            216,
            363,
            163,
            42,
            115,
            41,
            9,
            230,
            131,
            368,
            366,
            61,
            263,
            385,
            251,
            2,
            69,
            321,
            429,
            0,
            43,
            156,
            147,
            257,
            19,
            413,
            440,
            426,
            454,
            312,
            393,
            391,
            407,
            165,
            443,
            110,
            201,
            91,
            399,
            193,
            389,
            316,
            376,
            38,
            405,
            105,
            351,
            362,
            280,
            3,
            258,
            181,
            218,
            349,
            244,
            439,
            431,
            126,
            286,
            123,
            27,
            242,
            453,
            129,
            29,
            79,
            222,
            143,
            148,
            447,
            137,
            424,
            70,
            269,
            394,
            356,
            442,
            380,
            177,
            290,
            229,
            182,
            63,
            305,
            30,
            289,
            343,
            23,
            167,
            324,
            108,
            232,
            386,
            404,
            202,
            130,
            92,
            401,
            88,
            133,
            212,
            256,
            187,
            151,
            446,
            241,
            116,
            437,
            215,
            423,
            186,
            410,
            396,
            434,
            270,
            323,
            207,
            48,
            73,
            338,
            139,
            308,
            101,
            18,
            436,
            231,
            347,
            199,
            168,
            11,
            158,
            408,
            89,
            375,
            307,
            57,
            97,
            433,
            136,
            292,
            34,
            44,
            176,
            264,
            35,
            451,
            449,
            268,
            260,
            209,
            180,
            359,
            255,
            192,
            234,
            248,
            103,
            210,
            85,
            237,
            334,
            189,
            53,
            40,
            28,
            104,
            203,
            427,
            84,
            152,
            188,
            174,
            95,
            283,
            50,
            333,
            164,
            387,
            296,
            31,
            332,
            360,
            106,
            438,
            66,
            173,
            325,
            304,
            233,
            72,
            39,
            24,
            194,
            184,
            125,
            302,
            267,
            217,
            99,
            378,
            243,
            178
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "sftptv2a3",
        "sftptv2a4",
        "sftptv2a5",
        "sftptv2a2",
        "sftptv2a6",
        "logim",
        "maccat",
        "disp4cat",
        "stratidc",
        "log_gdpc",
        "logtpop",
        "logmtn",
        "feanctig",
        "floil",
        "sftpdur2",
        "ethherf",
        "relhrel",
        "anocracy",
        "democracy"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR13b_Goldstone_Table_3_Full_problem_TRAIN",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "auto_sklearn": [
            "9fa44b23-bae4-4026-9081-cb549324bba4"
        ],
        "d3m": [],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "auto_sklearn": {
            "9fa44b23-bae4-4026-9081-cb549324bba4": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='cv',\n           resampling_strategy_arguments={'shuffle': False, 'folds': 10},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=600, tmp_folder=None)",
                "model": "AutoSklearnClassifier",
                "model_id": "9fa44b23-bae4-4026-9081-cb549324bba4",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/179cf90d-2369-4f45-9e9f-3b03ec10d713.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e5fa199c-e08e-444a-8e2b-b1c27e877064.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e8a2aa17-49d2-44bb-9f47-8472612c19ce.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a52faac6-beb5-4f83-9034-03418ca6795d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f7480db4-07cb-415d-bf00-a6867f87fab3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d57597ac-b60a-45b5-9aa4-1d460d03f20e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d637cdf-38e7-469f-841d-d5df10e5f6cc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3181353a-688b-40d4-9084-3a9ab6ea4b76.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.708904670321079
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.831140350877193
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.7888793163464217
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.46168926103136626
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.5687174450770264
                    }
                ],
                "search_id": "53a38a81-9af1-422b-b571-4227e62bb310",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "27537": {
                "created": "2019-11-11T07:12:48.841898+00:00",
                "details_url": "/d3m-service/stored-response/96dc4b706c79311cbc5f777c86419290175678282c408837ef666e98",
                "hash_id": "96dc4b706c79311cbc5f777c86419290175678282c408837ef666e98",
                "id": 27537,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:12:48.899152+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27537,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/709462f1-54db-49af-b88f-06082d9278c7.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/2ea2b51f-3f76-4a08-a937-87a545d81c20.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/461a4d4b-dc7e-42f7-a1db-4e9495d50ce0.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7478070259094238
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27539": {
                "created": "2019-11-11T07:12:50.290345+00:00",
                "details_url": "/d3m-service/stored-response/f2c21d374e6e3f2baf702e97b0bd8d78ee8d464a6062ba6786f5eac5",
                "hash_id": "f2c21d374e6e3f2baf702e97b0bd8d78ee8d464a6062ba6786f5eac5",
                "id": 27539,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:12:50.318286+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27539,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/9649a52c-0b57-431b-997c-e29595af63c9.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/3ac1886a-60f2-4150-9d3f-b2670bbf9e1c.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/06a4b80b-c963-4e8c-a1ff-6946dd00c7d4.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7478070259094238
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27571": {
                "created": "2019-11-11T07:12:54.128726+00:00",
                "details_url": "/d3m-service/stored-response/708b1ae1eb4e014dcb4583ed04772bc9c79b5aaecd1c51a4494d01e1",
                "hash_id": "708b1ae1eb4e014dcb4583ed04772bc9c79b5aaecd1c51a4494d01e1",
                "id": 27571,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:12:54.152836+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "entropy"
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "10"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "5"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "12"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "46"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d8571a6f70248ceba46c2231a0afeaebaced127bdd7b0ebf087367461c0ad09d",
                                    "id": "1dd82833-5692-39cb-84fb-2455683075f3",
                                    "name": "sklearn.ensemble.forest.RandomForestClassifier",
                                    "pythonPath": "d3m.primitives.classification.random_forest.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27571,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/b509f662-e157-42e0-8a1b-52de112d959f.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/a1512809-a5fe-46c1-ba68-49bf3f18d6af.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/84df635f-fe2a-42da-a7b4-4a5ddecfeb5f.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.645392894744873
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8640350699424744
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8732394576072693
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.539130449295044
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6666666865348816
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27573": {
                "created": "2019-11-11T07:12:54.952096+00:00",
                "details_url": "/d3m-service/stored-response/f878b2422715a2936a1ca6765aa595f368deb432cd105b1ca7412fb0",
                "hash_id": "f878b2422715a2936a1ca6765aa595f368deb432cd105b1ca7412fb0",
                "id": 27573,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:12:54.970809+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.8.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "entropy"
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "10"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "5"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "12"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "46"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d8571a6f70248ceba46c2231a0afeaebaced127bdd7b0ebf087367461c0ad09d",
                                    "id": "1dd82833-5692-39cb-84fb-2455683075f3",
                                    "name": "sklearn.ensemble.forest.RandomForestClassifier",
                                    "pythonPath": "d3m.primitives.classification.random_forest.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27573,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/d9d95d26-87d7-4e41-8b48-ae75497ce059.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/6c585426-4384-4580-8e2f-ebad61da5672.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/2b7ed9c8-1856-4870-9185-c9b7a28c650a.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.645392894744873
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.875
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8911651968955994
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.573913037776947
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6979166865348816
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27605": {
                "created": "2019-11-11T07:13:04.293268+00:00",
                "details_url": "/d3m-service/stored-response/3a1a8e1fe88b83142591cf6364e859029edd19e832a80eefc88b9e75",
                "hash_id": "3a1a8e1fe88b83142591cf6364e859029edd19e832a80eefc88b9e75",
                "id": 27605,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:13:04.320274+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.1
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27605,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/9fde7022-8388-4e62-b77f-6a3a9e5be7d6.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/330a342f-0789-433c-80ab-d5e8eee26538.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/50fa6d41-9a06-468f-92db-09bf8125865c.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6479284524917602
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9144737124443054
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9130434989929199
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.730434775352478
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8115941882133484
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27609": {
                "created": "2019-11-11T07:13:04.810220+00:00",
                "details_url": "/d3m-service/stored-response/cb4bf28747d7c2beb0f29563c174031cdacda15119b531ea79e676c0",
                "hash_id": "cb4bf28747d7c2beb0f29563c174031cdacda15119b531ea79e676c0",
                "id": 27609,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:13:04.906756+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "learning_rate": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.1
                                                }
                                            }
                                        }
                                    },
                                    "max_depth": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "min_child_weight": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "subsample": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 1
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "92c2ba639ead09cba5626c5e81f4e57a55e4bccb25cfc5d16d0c945a936a104d",
                                    "id": "fe0841b7-6e70-4bc3-a56c-0670a95ebc6a",
                                    "name": "XGBoost GBTree classifier",
                                    "pythonPath": "d3m.primitives.classification.xgboost_gbtree.DataFrameCommon",
                                    "version": "0.1.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27609,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/d33955f3-c187-4961-bdef-8c5f16a89c4d.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/c2d4643f-3404-4af7-83df-f5efa96b15d5.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/89393a9c-40a2-421b-8de0-b76d85bdaa3a.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6479284524917602
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9265350997447968
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9509037733078003
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7478260695934296
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8371696472167969
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27639": {
                "created": "2019-11-11T07:14:54.208229+00:00",
                "details_url": "/d3m-service/stored-response/e6ca3051e9064f9d272e2d7a6fa13f7295dd04f11a06502ad6cd06e5",
                "hash_id": "e6ca3051e9064f9d272e2d7a6fa13f7295dd04f11a06502ad6cd06e5",
                "id": 27639,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:14:54.242974+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "19",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.005469650469763744
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27639,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/2d1ef27e-3501-4af1-807a-2567f4b13ad6.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/f6618f5a-fae8-453f-b565-0cbefd24c975.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/a028a565-cb11-41a1-b7c0-a0b7f943e39e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6587490797042846
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.905701756477356
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8600000143051147
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.747826099395752
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.800000011920929
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27643": {
                "created": "2019-11-11T07:14:55.033687+00:00",
                "details_url": "/d3m-service/stored-response/9c50d198371d2d5089b67fbcb0591707d6c7dc1d39a04d184b8a211a",
                "hash_id": "9c50d198371d2d5089b67fbcb0591707d6c7dc1d39a04d184b8a211a",
                "id": 27643,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:14:55.056828+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "20",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.005469650469763744
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27643,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/cda14c73-0017-4bd3-ad37-6f2eae010fda.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/3c6fa0c7-e596-4cd8-8e43-c9f4417d5df0.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/f9ff4342-8737-4e5f-9345-eb735a12ac1f.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6587490797042846
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9155701696872711
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8845454752445221
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7652173936367035
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8205607533454895
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27673": {
                "created": "2019-11-11T07:15:25.707388+00:00",
                "details_url": "/d3m-service/stored-response/7cd78f75b631e1a1651db9b9602c203c0d711cf8d2c819880c547eba",
                "hash_id": "7cd78f75b631e1a1651db9b9602c203c0d711cf8d2c819880c547eba",
                "id": 27673,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:15:25.728877+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "25",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00010790845139965897
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27673,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/ddd9755e-a025-41cd-b0d6-0d62230872aa.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/8d20a427-623a-4271-81b4-70c7ea415054.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/bf73b665-7533-45c0-85e1-35374bd2de8f.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6752162933349609
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.844298243522644
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.761904776096344
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5565217137336731
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.643216073513031
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27682": {
                "created": "2019-11-11T07:15:27.324503+00:00",
                "details_url": "/d3m-service/stored-response/9609832db3f5746ff2d8de6732f43d6dc4f1aef7ebbfd078823e5f6d",
                "hash_id": "9609832db3f5746ff2d8de6732f43d6dc4f1aef7ebbfd078823e5f6d",
                "id": 27682,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:15:27.367870+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "28",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00010790845139965897
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27682,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/bf059a6e-1c5f-4321-96c8-4d3c8270b94f.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/7d4e1510-5a9f-47f7-9f17-5204b72c77f3.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/aee92dd6-79ff-4e29-a401-748c1c1d7132.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6752162933349609
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.844298243522644
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.761904776096344
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5565217137336731
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.643216073513031
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27707": {
                "created": "2019-11-11T07:16:36.665024+00:00",
                "details_url": "/d3m-service/stored-response/c03ba472534b9581e734c53ebdd2a723cf0b101860b7528f968dbc4b",
                "hash_id": "c03ba472534b9581e734c53ebdd2a723cf0b101860b7528f968dbc4b",
                "id": 27707,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:16:36.690716+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "31",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00028915405990490874
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27707,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/2cfd7b73-c1bb-4898-9971-95e29be1099f.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/bc29c532-5fa0-4636-acf1-e6a32494061b.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/b33f1614-81e4-4ef7-a47f-3232b1187709.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6766247391700745
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8486841917037964
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.773809552192688
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5652173757553101
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6532663106918335
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27711": {
                "created": "2019-11-11T07:16:37.366786+00:00",
                "details_url": "/d3m-service/stored-response/94becbd11f16b387f42d69dd699321b638666444b6bd5b6ac0974d16",
                "hash_id": "94becbd11f16b387f42d69dd699321b638666444b6bd5b6ac0974d16",
                "id": 27711,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:16:37.389455+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "32",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "dual": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "max_iter": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1000"
                                                }
                                            }
                                        }
                                    },
                                    "penalty": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "l1"
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00028915405990490874
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "eccb8d2f1f309e548bd76068aafc4097ed7f2abfc1d5924bdd6825a131acfc0e",
                                    "id": "b9c81b40-8ed1-3b23-80cf-0d6fe6863962",
                                    "name": "sklearn.linear_model.logistic.LogisticRegression",
                                    "pythonPath": "d3m.primitives.classification.logistic_regression.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27711,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/0979bbfd-b460-4af6-b2ae-34f965b4391e.csv",
                    "test": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/c0661d01-3738-45b5-a1c1-cee043cb23d0.csv",
                    "train": "/ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/temp/0853710a-a69c-4b70-b101-2a254f6679dc.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6766247391700745
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8541666567325592
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8024891912937164
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5608695447444916
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6599664986133575
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "317bddd0-ac7a-4305-bc58-8e32cc257c1f": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "317bddd0-ac7a-4305-bc58-8e32cc257c1f",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dcdbb427-716f-48fb-9126-390f56063c49.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/be3994e3-14ea-4707-99d0-441646929e9b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7d254c9a-57a1-4d8c-8749-e03472562c95.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/467627f3-e81e-4f47-afb4-562098715abd.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9b3b91c4-83d5-48f5-b193-09c550f00077.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/16b65e32-7cc4-4f35-a8b1-006b0b4df500.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8142037485656
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.881578947368421
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8210526315789474
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6782608695652174
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.7428571428571429
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "43071d5b-1762-43f0-bbd3-28522fbdd8a9": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "43071d5b-1762-43f0-bbd3-28522fbdd8a9",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/14b40d26-903e-497c-8413-66b2ab6b78d7.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e2219b3a-2185-4514-83d4-16b3cca23b0c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c509aa35-c0f3-40ec-b926-58ead395cb5a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3046d1f1-caf1-424c-a94e-a1cd4252619d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/545ec789-3574-4d4e-884c-6dcbef6f5931.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f27cc8b3-efb4-498b-adb5-77bbb6a98765.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/13d9984c-b98c-41d3-be30-a767f8ddcb25.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f08451ef-79a2-45a8-8560-64b634741e6f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.740430957541757
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7324561403508771
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.48066298342541436
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7565217391304347
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.5878378378378378
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "6bb9cd57-b20a-4c8c-b719-0a0f039febd1": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "6bb9cd57-b20a-4c8c-b719-0a0f039febd1",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c3819aa4-97a8-438f-b593-8233750a5b8b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/01d555eb-b15b-40d0-9690-70152a0dea65.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c6fb53c3-b729-4873-be0b-eb1dc5a8fa93.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a2ebf508-fddd-44bd-98de-8c1dc5c78b80.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5f418535-3c7e-45e6-b3ec-1ed8bc459a65.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/559f76c6-da78-4e8f-8704-040edd2370e4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7865df9f-947d-4e33-a9c5-e05c6464f717.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0850f305-d00e-4b44-9ff9-d249495a672a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.86344511028943
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.9035087719298246
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8256880733944955
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.782608695652174
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.8035714285714286
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "7ce2c082-fa68-4bd8-a6e3-d1455c37eab1": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "7ce2c082-fa68-4bd8-a6e3-d1455c37eab1",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e5511c50-4a1c-478b-be40-8d5bc2a3119b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ba62499f-758f-49ef-899d-5b2111550777.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e459e01a-ee6a-4a95-8828-39cd8e60575f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a6d6b151-0a5e-40a5-940a-ddc4f311917e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/35747490-80b9-4a32-b1fe-f692e1cf0926.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7d30c57d-879d-4681-8e69-3032361966cb.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/02c3c4fe-d2ad-401e-868f-0bf46027c426.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cb4c6d32-4cb6-44aa-96a9-d51c0bbcc26d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8035318118067066
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.831140350877193
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.6417910447761194
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7478260869565218
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.6907630522088354
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "9f505671-593b-4129-bdd6-7137ffc68d57": {
                "description": "drf-unsupervised",
                "model": "drf-unsupervised",
                "model_id": "9f505671-593b-4129-bdd6-7137ffc68d57",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9e68ffe5-472f-47e5-bf61-7caac042c56b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f4851bed-7802-4193-a4a1-af195f1c582f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/be22b54a-2180-432a-aa80-bba63b40bb56.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60927121-2b25-477f-91db-368d3eb5f684.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1f4a8cab-dce8-46d0-b7a8-365d32c71c80.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7dfd232b-ab59-46a4-ac63-675694fec358.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2d748397-aefe-42c1-acf0-be4ef92858c3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a9cad8c1-e374-422d-97a0-b88c6cb954e3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8505546347061074
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.9100877192982456
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8936170212765957
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7304347826086957
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.8038277511961722
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "bbe1ac26-00fd-44a9-91cd-a638fed8e044": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "bbe1ac26-00fd-44a9-91cd-a638fed8e044",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1b79674f-68b4-42b3-ba33-f777d303f01e.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/91ce35a7-dd44-436d-91a3-9431f3a99559.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ee7d888e-9bf1-4933-a8cc-a54c34b67f81.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/55dcd1cb-55aa-4547-bf81-98c37e4a161f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0add0f1e-2e2f-4c42-b075-08437df835b9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ddf2028c-3a36-426d-bc45-bbbb3338b373.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/51f478fa-b86b-46f7-ab06-751f1757dd63.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/60c7d913-46da-4d35-a28c-28f3807fb25d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8679459390539335
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.918859649122807
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8979591836734694
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7652173913043478
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.8262910798122065
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "d2d84940-33f3-42e5-be9b-5b4e41796d47": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "d2d84940-33f3-42e5-be9b-5b4e41796d47",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ab6511ca-749a-49ab-9fde-5a0b0f051b42.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/72a2945a-a2ae-4283-8424-9a54ba542a53.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/eedd5dc7-7776-4a7f-9100-564352b38433.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f1c0993a-913b-44da-aa27-3d0c936309a9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2b417ca7-de2e-4806-a3e6-a6111505f5bc.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3d18cecf-9fee-41e1-be95-ab2f365b9d58.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/31c080f8-8715-467d-b32d-fbb667261eb6.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ce28e8a2-eabb-45df-b991-acb42405d404.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8385694249649368
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8706140350877193
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.7295081967213115
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7739130434782608
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.751054852320675
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "dae25df8-ef08-4220-9935-e3751783ef13": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "dae25df8-ef08-4220-9935-e3751783ef13",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f1cf733a-a03f-4821-8589-f6aef1e6ab5c.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d7be8aab-884e-481a-af6d-5aa5e100b643.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c137b5c0-f2d3-49e9-a811-fd316026a5a4.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/086823c7-c00a-4ca0-b276-ac7c4a10d0a3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e8a2b8fd-1a6a-455e-b9f7-c188ad857718.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/69f05ce9-b1a8-46fa-8b61-c9fc214fcf7f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3c39c34d-9a64-426e-8ae2-a78c14501afb.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/78682114-d4fc-45b7-9240-bc97f5de19ad.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8707254876960348
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.9100877192982456
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8425925925925926
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7913043478260869
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.8161434977578477
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "f3b36592-f4b1-49db-acd4-7342ff6fd785": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "f3b36592-f4b1-49db-acd4-7342ff6fd785",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a91d788a-9c54-4e8e-a261-e23e271f6b77.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6f7e874f-3ed5-413d-a980-64c6e0262b17.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/22036148-234b-43c1-a92e-4b9b5ecf87d1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aad6624c-51a6-45c4-9c5c-bd923908b7c2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/16a61517-6dcd-46f3-94f6-d55a30d5cdb7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3f6db10d-07ec-4b33-8ddc-6464b402a54d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.822899400739513
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8859649122807017
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8247422680412371
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6956521739130435
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.7547169811320755
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            },
            "f5fe300a-2d70-4be9-a855-22c7db3b7839": {
                "description": "glm-unsupervised",
                "model": "glm-unsupervised",
                "model_id": "f5fe300a-2d70-4be9-a855-22c7db3b7839",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/75c81238-686e-418f-a5e3-498984e89dc2.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/287ad981-ee8f-4f41-a251-ee4366870bd1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/160442fb-77a8-402f-a1f5-39b915e1ac15.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3499d44f-616b-4497-ae4d-e4c3e118bbbc.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/54da434a-098f-413a-b964-6aa03bdbc49a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/025238ce-c746-4ae9-b9f0-649f53562582.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.7358918781078669
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8377192982456141
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.7530864197530864
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.5304347826086957
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.6224489795918368
                    }
                ],
                "search_id": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
                "system": "h2o"
            }
        },
        "mlbox": {
            "36879669-6984-4c40-8b89-c321b05d3b62": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "36879669-6984-4c40-8b89-c321b05d3b62",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8b8020e1-c7a9-4b92-93ff-c6781640659f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1509c01f-4e9a-48b7-9973-e1d2cdef2223.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/21ace977-35f4-46a1-888d-8dd53cd0e712.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f6fc65e5-c9e3-40cd-bd3a-a0d7c00435c3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/41950698-1bab-4a74-b984-04e66eb23e04.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4ee62ace-6d43-4a7d-a3ce-a9098f6c8337.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8ffdf293-7504-4aa0-af8f-22bdeda40bcc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08751102-028c-408b-8187-9631f335157d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.6040728631963153
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7039473684210527
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.4142055678239889
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.40153176501860716
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.3941585855641641
                    }
                ],
                "search_id": "ef6eb08f-b11d-4c45-9854-6edeed9005b1",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "1c458a23-04ac-49b1-bdf0-47de2f4d6629": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f6aa9381ba8>",
                "model": "Xgboost",
                "model_id": "1c458a23-04ac-49b1-bdf0-47de2f4d6629",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2be282b9-c452-41ae-b7ca-2f441607af11.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dccb80fc-c902-4581-844a-5073844989bf.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3fc81221-532a-4418-8193-9012bd7d8c98.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/363569ae-bb1b-4435-98da-0d265110ba78.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bc31bf8b-848c-4d99-ad2e-4ce01f993cd4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b0827197-3740-4909-8ab5-26ac83b43561.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d08e37f2-f1dc-4b40-a669-e5bd09495c1b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8ce96809-702e-483b-b0de-13c70a0b2c38.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.5529323950473332
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7609649122807017
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.5274644945697577
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.13209396597554493
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.19881702118544228
                    }
                ],
                "search_id": "52bbb5a1-0377-4133-9879-3fe2743e952a",
                "system": "mljar-supervised"
            },
            "7bb3423c-d641-4496-81ca-b085abeb21e7": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7f6aa9c07748>",
                "model": "Ensemble",
                "model_id": "7bb3423c-d641-4496-81ca-b085abeb21e7",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e234d416-b3a4-4178-9382-1dccb462f205.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8617bd5a-a5cd-43da-9a8c-aadc679f89a9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a165ebbe-8726-463a-8e61-1c617bb3f04c.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/80192924-6d67-4784-9bdb-4afb5c3f75ac.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d4117ffa-0ee6-45b7-8afb-f093a062f917.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6d41119f-65ca-45c3-9472-36854c33f452.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "52bbb5a1-0377-4133-9879-3fe2743e952a",
                "system": "mljar-supervised"
            },
            "d645bf65-3d58-45cf-8df1-5e03cc716012": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f6aa9bf3c50>",
                "model": "Xgboost",
                "model_id": "d645bf65-3d58-45cf-8df1-5e03cc716012",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cef9f4f9-5100-44d5-95d2-d95cc75c4543.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/142ee277-a78c-459c-9b86-1da1e319cb6e.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1183cbff-55b2-4f85-8015-1bb4682c1d93.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/822316e3-3db3-4fc7-8dee-ba4ea5e8edc8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/07ae0ba3-86b0-498b-ae9e-24cfb570519a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fab89415-b1b6-4414-b27c-40962f0e436a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0d5c7799-400b-4642-9cea-2e2a4113be1b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dbf8c517-a2eb-48f0-a166-811668262c6b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.5529323950473332
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7609649122807017
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.5274644945697577
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.13209396597554493
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.19881702118544228
                    }
                ],
                "search_id": "52bbb5a1-0377-4133-9879-3fe2743e952a",
                "system": "mljar-supervised"
            },
            "e17de91d-693e-4ab1-a578-2e468c7e9337": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7f6b5f9d4e80>",
                "model": "Xgboost",
                "model_id": "e17de91d-693e-4ab1-a578-2e468c7e9337",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d675d21a-0eed-4ab7-b563-24a721869bc8.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/efad2916-1c00-4d05-8760-44ed014f40d9.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/858bc53f-214a-4ea3-8e6c-bd5e7df67a4d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/970f95a3-210b-4994-a155-3f05a8e5e50f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ba61c9c0-8957-4c3b-b35e-dc2646181afc.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8a7f421a-f056-41f5-b8c3-481958843d3c.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1eb51b07-f136-4408-bd28-d452c7979764.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9ed35565-6570-491e-850d-eaec11761fe5.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.5529323950473332
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7609649122807017
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.5274644945697577
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.13209396597554493
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.19881702118544228
                    }
                ],
                "search_id": "52bbb5a1-0377-4133-9879-3fe2743e952a",
                "system": "mljar-supervised"
            }
        },
        "rook": {},
        "tpot": {
            "2888d5b3-c552-4e6f-b0fe-2e5e331eb24c": {
                "description": "Pipeline(memory=None,\n     steps=[('logisticregression', LogisticRegression(C=15.0, class_weight=None, dual=True, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='warn',\n          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])",
                "model": "Pipeline",
                "model_id": "2888d5b3-c552-4e6f-b0fe-2e5e331eb24c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9fa1ba2d-9b61-4d58-af29-a0869e05c287.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ec85e18f-5c6d-4d11-a0ee-45ff54f1fcd1.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13b_Goldstone_Table_3_Full/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d51b7fed-a2a7-4bd3-a43f-ec84c32431ec.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/560f8979-8c71-4637-92e4-127731e54ef0.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/test/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/24e04e50-c6a8-4064-8e09-0408f42817fa.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0178d51e-fb12-4b3b-9ff2-eb37df2cd84d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/train/ws_507/2019-11-11_01-45-42/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/30f7d441-c82c-4a63-98cc-ebbe3e755b27.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/463038c2-097d-4455-8442-7d2a68cc4ea1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13b_Goldstone_Table_3_Full/additional_inputs/partials/ws_507/2019-11-11_01-45-41/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.7016994776379452
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8201754385964912
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.7483770189362294
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.46207137161084527
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.5612323264947714
                    }
                ],
                "search_id": "98ff9169-5492-4ff2-b26b-46df94ea4cf6",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "auto_sklearn": {
            "message": "search complete",
            "searchId": "53a38a81-9af1-422b-b571-4227e62bb310",
            "thinking": false
        },
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "message": "search complete",
            "searchId": "7cdfb6c4-d5cd-4c26-83c8-4e260669fbfb",
            "thinking": false
        },
        "mlbox": {
            "message": "search complete",
            "searchId": "ef6eb08f-b11d-4c45-9854-6edeed9005b1",
            "thinking": false
        },
        "mljar-supervised": {
            "message": "search complete",
            "searchId": "52bbb5a1-0377-4133-9879-3fe2743e952a",
            "thinking": false
        },
        "tpot": {
            "message": "search complete",
            "searchId": "98ff9169-5492-4ff2-b26b-46df94ea4cf6",
            "thinking": false
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "sftpcons"
    ],
    "task": "classification",
    "timeBoundSearch": 10,
    "unedited": true
}