{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10b_DENSE_Chen_Ulf_Grievances/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/partials/ws_488/2019-11-09_17-23-23/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/test/ws_488/2019-11-09_17-23-25/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/train/ws_488/2019-11-09_17-23-24/tables/learningData.csv"
    },
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10b_DENSE_Chen_Ulf_Grievances/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/partials/ws_488/2019-11-09_17-23-23/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/test/ws_488/2019-11-09_17-23-25/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/additional_inputs/train/ws_488/2019-11-09_17-23-24/datasetDoc.json"
    },
    "evaluationMethod": "holdOut",
    "indices": {
        "all": [
            2720,
            3346,
            2755,
            1093,
            2477,
            53,
            1382,
            943,
            1532,
            741,
            3476,
            1680,
            1455,
            3093,
            211,
            3475,
            790,
            2705,
            1109,
            186,
            2578,
            629,
            3203,
            2541,
            3243,
            1677,
            1220,
            3709,
            2473,
            3543,
            1970,
            496,
            1397,
            2774,
            2049,
            2042,
            1359,
            1308,
            3451,
            458,
            2867,
            2248,
            2960,
            1277,
            129,
            2728,
            646,
            1943,
            980,
            1164,
            2246,
            3661,
            1244,
            20,
            1764,
            373,
            694,
            2821,
            1335,
            1239,
            1570,
            468,
            1629,
            3538,
            3102,
            801,
            1503,
            2449,
            1553,
            1549,
            2065,
            2846,
            3322,
            884,
            326,
            583,
            2321,
            1367,
            169,
            1908,
            2993,
            2745,
            600,
            143,
            2376,
            3106,
            635,
            1166,
            424,
            3719,
            1322,
            3094,
            2219,
            3698,
            2442,
            2105,
            1962,
            3519,
            855,
            254,
            1606,
            202,
            797,
            2628,
            3058,
            18,
            2475,
            588,
            3442,
            1829,
            3372,
            1923,
            325,
            1743,
            623,
            2131,
            697,
            3158,
            1958,
            3640,
            2743,
            1500,
            842,
            2958,
            3580,
            3161,
            1287,
            1414,
            3220,
            65,
            1948,
            182,
            983,
            3347,
            1395,
            2964,
            2591,
            158,
            3452,
            1119,
            1824,
            3150,
            2228,
            1744,
            690,
            313,
            2956,
            3288,
            1702,
            3609,
            1347,
            2055,
            324,
            2588,
            1959,
            3076,
            1054,
            138,
            290,
            3336,
            2382,
            366,
            2746,
            1543,
            922,
            2727,
            2464,
            3260,
            1009,
            849,
            2307,
            2236,
            2258,
            2364,
            1820,
            1250,
            1213,
            1293,
            2264,
            822,
            1159,
            1377,
            2200,
            2667,
            3165,
            1953,
            2286,
            3619,
            711,
            1833,
            210,
            1614,
            2032,
            3558,
            2411,
            1932,
            1237,
            2161,
            3651,
            148,
            1223,
            847,
            818,
            3664,
            3305,
            1966,
            1827,
            314,
            2637,
            1044,
            963,
            81,
            350,
            3627,
            3655,
            331,
            2957,
            1317,
            528,
            2498,
            3593,
            1450,
            1265,
            2646,
            3078,
            3486,
            339,
            3124,
            2271,
            566,
            2984,
            1902,
            3618,
            739,
            2283,
            1754,
            931,
            64,
            2091,
            2938,
            3314,
            3348,
            728,
            891,
            3148,
            1087,
            2923,
            2940,
            1143,
            2631,
            1055,
            3195,
            2607,
            2090,
            3425,
            1304,
            440,
            488,
            1550,
            1806,
            615,
            3520,
            2433,
            3359,
            2768,
            738,
            3378,
            2678,
            3252,
            3290,
            3197,
            3460,
            2257,
            111,
            1865,
            2044,
            2504,
            1632,
            1426,
            3591,
            3140,
            1603,
            3168,
            378,
            1410,
            2060,
            1185,
            3208,
            764,
            1248,
            2129,
            3327,
            199,
            1750,
            3610,
            1012,
            2420,
            2070,
            1710,
            3713,
            3073,
            1161,
            3363,
            1412,
            2604,
            1504,
            3444,
            1716,
            2469,
            2156,
            3402,
            2799,
            1928,
            1411,
            1329,
            2973,
            2157,
            3670,
            301,
            1765,
            1565,
            422,
            1964,
            1198,
            1727,
            2648,
            647,
            2729,
            1413,
            562,
            1551,
            3183,
            2912,
            2332,
            2914,
            1399,
            561,
            3616,
            3447,
            2706,
            1510,
            1712,
            1844,
            1840,
            376,
            1595,
            3552,
            1957,
            1741,
            2144,
            2415,
            799,
            1251,
            1630,
            1321,
            3194,
            2566,
            3060,
            2690,
            2583,
            2434,
            2975,
            1895,
            1616,
            1268,
            2613,
            3188,
            937,
            1900,
            2117,
            3080,
            580,
            1477,
            68,
            2177,
            137,
            3259,
            1140,
            3578,
            348,
            1950,
            2849,
            3498,
            1886,
            719,
            2502,
            3272,
            700,
            678,
            3219,
            2419,
            1615,
            3275,
            497,
            586,
            3441,
            485,
            3471,
            244,
            737,
            1299,
            659,
            3291,
            1920,
            767,
            859,
            2184,
            2142,
            2842,
            1120,
            3584,
            356,
            2926,
            2206,
            3176,
            2682,
            968,
            1673,
            2817,
            2516,
            721,
            357,
            788,
            3623,
            1272,
            2358,
            1937,
            909,
            2864,
            1659,
            2603,
            1202,
            2883,
            250,
            1468,
            1292,
            732,
            856,
            2293,
            393,
            942,
            2377,
            3417,
            3426,
            1654,
            3069,
            1169,
            3269,
            1670,
            2181,
            2160,
            2272,
            385,
            0,
            109,
            379,
            3701,
            1154,
            638,
            149,
            1847,
            2835,
            2694,
            1348,
            3689,
            985,
            1280,
            3708,
            723,
            1353,
            2437,
            2099,
            500,
            2722,
            972,
            3568,
            2014,
            2832,
            2510,
            2138,
            359,
            2448,
            1775,
            1846,
            2253,
            3089,
            2635,
            3646,
            3383,
            3014,
            3303,
            201,
            3306,
            1956,
            906,
            1365,
            1564,
            3051,
            1737,
            1930,
            1755,
            1752,
            843,
            944,
            2085,
            3561,
            1004,
            1342,
            1077,
            1569,
            926,
            2221,
            3554,
            810,
            3729,
            1006,
            904,
            2119,
            3389,
            1572,
            928,
            467,
            960,
            1784,
            785,
            1759,
            1151,
            3151,
            2736,
            226,
            2976,
            3579,
            2265,
            781,
            2527,
            230,
            1619,
            1363,
            2486,
            2531,
            1721,
            1168,
            2757,
            2435,
            1378,
            2656,
            3581,
            1513,
            3109,
            3201,
            2861,
            2843,
            1068,
            1394,
            1684,
            1596,
            3002,
            2802,
            3369,
            2933,
            2643,
            633,
            2585,
            1739,
            3096,
            2075,
            1947,
            1751,
            3645,
            3037,
            608,
            341,
            470,
            2346,
            750,
            679,
            2809,
            605,
            1203,
            2407,
            1065,
            2685,
            1404,
            2360,
            1909,
            780,
            691,
            3667,
            3339,
            1885,
            2405,
            2764,
            3469,
            1338,
            306,
            2001,
            3614,
            570,
            1372,
            198,
            3343,
            1381,
            1205,
            3567,
            2459,
            2675,
            710,
            3277,
            3182,
            2626,
            3662,
            2371,
            872,
            3665,
            2896,
            1454,
            2,
            1496,
            1383,
            2918,
            3382,
            420,
            1035,
            2953,
            2137,
            2342,
            3536,
            959,
            1195,
            2216,
            1015,
            3500,
            3604,
            262,
            2244,
            296,
            39,
            475,
            2885,
            2268,
            1053,
            3244,
            1864,
            2367,
            3228,
            1005,
            1740,
            2691,
            489,
            3556,
            2353,
            1666,
            1019,
            2787,
            3430,
            354,
            1842,
            1217,
            618,
            2602,
            553,
            1396,
            1653,
            3388,
            676,
            132,
            3134,
            3682,
            1473,
            1661,
            2149,
            1868,
            399,
            1136,
            2589,
            3253,
            1481,
            1214,
            2335,
            1870,
            2281,
            361,
            3656,
            25,
            482,
            3179,
            3090,
            632,
            2944,
            2428,
            3637,
            302,
            3364,
            1756,
            2302,
            2837,
            2910,
            381,
            951,
            3428,
            2217,
            2436,
            915,
            1892,
            2520,
            1485,
            2182,
            2916,
            219,
            316,
            2186,
            1792,
            3375,
            662,
            1745,
            630,
            3617,
            3657,
            771,
            3484,
            2970,
            981,
            2668,
            417,
            338,
            1651,
            3138,
            368,
            2698,
            965,
            2708,
            2011,
            2547,
            3242,
            2497,
            2140,
            2440,
            1488,
            3432,
            294,
            2226,
            693,
            2295,
            898,
            3023,
            2899,
            3455,
            2803,
            3404,
            40,
            617,
            1997,
            2467,
            1368,
            1018,
            2822,
            1148,
            3225,
            367,
            299,
            2693,
            297,
            508,
            346,
            1511,
            2937,
            2015,
            2328,
            225,
            3602,
            1903,
            3376,
            720,
            1519,
            1719,
            1718,
            2594,
            1260,
            2400,
            1942,
            3212,
            3149,
            2826,
            1963,
            1910,
            817,
            2450,
            2934,
            2368,
            554,
            394,
            1819,
            2050,
            671,
            1182,
            3357,
            2549,
            2778,
            858,
            3687,
            1975,
            223,
            461,
            2499,
            1793,
            2146,
            1731,
            2576,
            349,
            1625,
            400,
            774,
            1809,
            2054,
            3267,
            258,
            239,
            1253,
            1114,
            2354,
            1480,
            31,
            3421,
            2185,
            509,
            1291,
            1848,
            3160,
            3045,
            1623,
            3005,
            1853,
            976,
            2687,
            1222,
            3361,
            2540,
            1631,
            1100,
            2345,
            1936,
            2148,
            518,
            729,
            1584,
            351,
            1344,
            2290,
            1979,
            2999,
            328,
            993,
            3178,
            3249,
            2741,
            1769,
            2393,
            257,
            1995,
            336,
            92,
            1664,
            2169,
            814,
            3022,
            484,
            477,
            1694,
            2038,
            1478,
            2543,
            1374,
            1279,
            3133,
            3518,
            3731,
            3258,
            2903,
            3648,
            3256,
            3281,
            1894,
            1231,
            3716,
            1106,
            1940,
            1679,
            1883,
            1498,
            3742,
            3173,
            319,
            80,
            2423,
            1117,
            602,
            2046,
            196,
            3036,
            3400,
            748,
            3513,
            684,
            920,
            1801,
            1732,
            2300,
            2538,
            888,
            2386,
            2599,
            2237,
            215,
            2784,
            727,
            2552,
            1802,
            463,
            2686,
            2491,
            1988,
            2911,
            1020,
            3734,
            452,
            1656,
            2997,
            1314,
            702,
            1693,
            3323,
            2458,
            139,
            2374,
            2425,
            1560,
            3196,
            1815,
            1978,
            1418,
            82,
            1050,
            10,
            2645,
            1405,
            2097,
            410,
            2369,
            472,
            1552,
            2391,
            1297,
            2605,
            2213,
            2800,
            755,
            1933,
            2132,
            1340,
            3067,
            3491,
            22,
            2989,
            733,
            3720,
            1935,
            2688,
            3254,
            1695,
            2560,
            651,
            712,
            166,
            2214,
            3733,
            1146,
            2925,
            3344,
            1233,
            1990,
            2813,
            1788,
            3694,
            1880,
            1531,
            134,
            2927,
            2985,
            190,
            1391,
            271,
            144,
            3622,
            2279,
            827,
            2572,
            387,
            1236,
            3132,
            2043
        ],
        "test": [
            654,
            1065,
            1473,
            3212,
            1748,
            578,
            454,
            547,
            499,
            3147,
            899,
            2370,
            3054,
            189,
            2962,
            299,
            2367,
            1070,
            443,
            2948,
            1992,
            2959,
            1939,
            3259,
            1922,
            2762,
            332,
            3634,
            2464,
            3234,
            2254,
            1129,
            2452,
            670,
            3653,
            3013,
            3425,
            1446,
            14,
            2350,
            195,
            2575,
            1700,
            2895,
            2295,
            2,
            2409,
            2655,
            88,
            1642,
            1550,
            840,
            961,
            2433,
            1572,
            122,
            570,
            3048,
            2049,
            1196,
            179,
            2382,
            648,
            764,
            2509,
            3427,
            3546,
            1961,
            3523,
            1680,
            3502,
            2551,
            3009,
            1846,
            1373,
            983,
            2373,
            138,
            316,
            3272,
            1811,
            2308,
            2994,
            1696,
            1349,
            2952,
            2075,
            3439,
            1318,
            2695,
            175,
            2929,
            567,
            3106,
            2172,
            3519,
            1094,
            3641,
            149,
            2677,
            2829,
            1780,
            2765,
            1300,
            1463,
            322,
            2726,
            720,
            2530,
            2629,
            2519,
            4,
            2790,
            710,
            2377,
            514,
            599,
            1232,
            2178,
            289,
            2986,
            3245,
            23,
            1467,
            1586,
            1991,
            76,
            3479,
            57,
            22,
            538,
            2320,
            15,
            53,
            896,
            410,
            1023,
            3015,
            3066,
            826,
            3516,
            2548,
            882,
            2064,
            1555,
            3561,
            3045,
            2545,
            934,
            1606,
            3101,
            1087,
            2250,
            2553,
            924,
            3357,
            652,
            3388,
            3092,
            2507,
            3495,
            1490,
            944,
            3587,
            1832,
            1738,
            1465,
            2949,
            9,
            2631,
            465,
            3648,
            2872,
            2907,
            1581,
            1872,
            480,
            398,
            1625,
            1756,
            1980,
            2420,
            1759,
            663,
            218,
            383,
            2249,
            2943,
            2727,
            1005,
            1032,
            530,
            791,
            248,
            202,
            1428,
            3662,
            3258,
            868,
            2164,
            2131,
            3253,
            3498,
            3698,
            2812,
            1357,
            2810,
            1505,
            2190,
            910,
            1118,
            3407,
            866,
            1021,
            1047,
            2831,
            1460,
            1794,
            276,
            1397,
            1242,
            2203,
            1220,
            1161,
            3729,
            566,
            380,
            2637,
            3518,
            1432,
            3610,
            1366,
            2722,
            1128,
            3724,
            109,
            2572,
            793,
            2559,
            3549,
            182,
            1533,
            1949,
            2183,
            2804,
            3122,
            17,
            1431,
            185,
            1548,
            2357,
            2785,
            3230,
            1861,
            2618,
            2047,
            1114,
            559,
            2100,
            2692,
            2580,
            1982,
            2410,
            1489,
            2235,
            1580,
            1525,
            2348,
            546,
            2184,
            64,
            405,
            1513,
            2478,
            3660,
            836,
            2715,
            2973,
            722,
            716,
            1368,
            1535,
            3275,
            2981,
            541,
            3580,
            49,
            1015,
            528,
            686,
            2044,
            3681,
            1462,
            188,
            2708,
            3090,
            841,
            320,
            159,
            3481,
            1632,
            687,
            825,
            2291,
            704,
            1363,
            481,
            2543,
            306,
            2112,
            1962,
            3082,
            37,
            1082,
            3575,
            2054,
            333,
            1829,
            98,
            3630,
            3295,
            1626,
            2279,
            898,
            2423,
            2632,
            2165,
            3594,
            1151,
            3573,
            1487,
            3059,
            1902,
            1271,
            1127,
            3537,
            1885,
            1371,
            252,
            3123,
            1003,
            219,
            2796,
            2285,
            2552,
            3176,
            3211,
            794,
            1732,
            1248,
            1100,
            3507,
            3313,
            1098,
            3566,
            2447,
            2148,
            2326,
            1275,
            3590,
            2597,
            1496,
            2102,
            2343,
            891,
            2381,
            2574,
            3480,
            2720,
            1887,
            3305,
            3204,
            1855,
            1140,
            1888,
            457,
            2476,
            1663,
            2233,
            3694,
            1826,
            2070,
            3733,
            1319,
            2025,
            1137,
            2412,
            1737,
            1662,
            1710,
            999,
            2770,
            1856,
            936,
            1362,
            3307,
            1511,
            832,
            3282,
            234,
            2925,
            1288,
            1,
            349,
            2833,
            1583,
            3601,
            2488,
            2784,
            2817,
            2293,
            2996,
            3359,
            290,
            245,
            2082,
            3702,
            977,
            3346,
            3029,
            666,
            170,
            3739,
            298,
            2993,
            3065,
            2406,
            3061,
            3449,
            3017,
            1567,
            1386,
            1084,
            1311,
            1390,
            2066,
            2055,
            2641,
            2844,
            1549,
            2132,
            1936,
            242,
            2819,
            3117,
            3067,
            2873,
            1119,
            965,
            3073,
            3542,
            527,
            3393,
            1643,
            3396,
            305,
            453,
            575,
            1299,
            1239,
            1367,
            196,
            2096,
            2013,
            1819,
            3663,
            1424,
            2126,
            92,
            1037,
            900,
            3598,
            503,
            3104,
            3693,
            678,
            3250,
            1927,
            661,
            1115,
            311,
            2792,
            690,
            3205,
            338,
            1276,
            3239,
            2062,
            211,
            638,
            1266,
            3483,
            2635,
            501,
            3181,
            3446,
            2378,
            2975,
            2678,
            3710,
            2200,
            2577,
            914,
            2255,
            1612,
            1836,
            2372,
            463,
            596,
            2470,
            2429,
            148,
            918,
            482,
            951,
            1560,
            2638,
            2735,
            2363,
            1051,
            308,
            1077,
            418,
            2104,
            2095,
            519,
            29,
            2048,
            361,
            2980,
            1529,
            3016,
            1093,
            719,
            3618,
            1999,
            3206,
            3567,
            2966,
            3338,
            682,
            3131,
            1839,
            3323,
            3469,
            2232,
            2521,
            955,
            1256,
            3164,
            2849,
            134,
            2143,
            2268,
            385,
            3149,
            1523,
            2416,
            728,
            1262,
            1989,
            104,
            1254,
            1806,
            3273,
            1652,
            369,
            411,
            989,
            2123,
            1793,
            3578,
            713,
            589,
            2972,
            3671,
            1436,
            2604,
            545,
            1284,
            10,
            775,
            3102,
            758,
            2514,
            1120,
            2194,
            3151,
            982,
            2359,
            1157,
            3379,
            3089,
            727,
            534,
            1116,
            1654,
            137,
            142,
            2316,
            879,
            2602,
            1475,
            938,
            2697,
            2436,
            3499,
            3010,
            751,
            317,
            69,
            483,
            1313,
            422,
            1898,
            688,
            748,
            1765,
            2596,
            998,
            191,
            529,
            224,
            1223,
            776,
            962,
            3543,
            117,
            227,
            2560,
            3742,
            399,
            1171,
            1317,
            533,
            3374,
            3466,
            2843,
            3194,
            2564,
            3463,
            1410,
            3080,
            39,
            2914,
            668,
            2537,
            3262,
            228,
            2345,
            326,
            1965,
            1610,
            3434,
            1396,
            347,
            295,
            1387,
            616,
            489,
            156,
            2587,
            2890,
            2434,
            2760,
            2340,
            582,
            3369,
            1712,
            1770,
            2990,
            488,
            569,
            2505,
            3331,
            1698,
            3616,
            2455,
            3319,
            34,
            543,
            2299,
            1287,
            927,
            768,
            2668,
            3620,
            3462,
            874,
            2063,
            3120,
            2078,
            711,
            2216,
            2911,
            2140,
            1150,
            1170,
            70,
            2041,
            3513,
            1002,
            598,
            452,
            1273,
            3547,
            3570,
            618,
            1503,
            3454,
            3500,
            1736,
            118,
            253,
            3404,
            3158,
            3311,
            3501,
            1785,
            2737,
            1544,
            2889,
            3321,
            259,
            2294,
            2779,
            3535,
            3051,
            2917,
            923,
            3362,
            2741,
            3380,
            1174,
            2919,
            2065,
            3157,
            1122,
            3716,
            304,
            3156,
            531,
            2456,
            779,
            3510,
            2978,
            1108,
            2360,
            692,
            1762,
            1850,
            1713,
            1587,
            2465,
            1355,
            2912,
            2800,
            3650,
            1269,
            3486,
            2657,
            1052,
            376,
            1327,
            2407,
            558,
            2039,
            3591,
            572,
            2010,
            2913,
            408,
            3356,
            3609,
            2540,
            1044,
            601,
            3490,
            1013,
            2196,
            2768,
            3723,
            346,
            641,
            192,
            1869,
            1377,
            3077,
            2379,
            2462,
            1728,
            2501,
            2694,
            467,
            581,
            493,
            1290,
            1554,
            526,
            3098,
            905,
            553,
            935,
            2653,
            3398,
            2275,
            169,
            1285,
            2110,
            1448,
            1997,
            643,
            1203,
            263,
            2617,
            856,
            2523,
            861,
            979,
            436,
            2666,
            1633,
            2188,
            565,
            683,
            214,
            3582,
            2840,
            1491,
            2147,
            3595,
            1957,
            1602,
            378,
            2128,
            2874,
            1237,
            446,
            2330,
            2717,
            2012,
            2111,
            3553,
            1658,
            154,
            3060,
            217,
            3014,
            3280,
            1014,
            3526,
            3389,
            3668,
            3021,
            1180,
            1749,
            1078,
            2319,
            548,
            1603,
            302,
            3139,
            2067,
            491,
            351,
            2672,
            2272,
            1559,
            2953,
            675,
            871,
            2310,
            958,
            712,
            1139,
            1733,
            2961,
            3438,
            1043,
            71,
            1651,
            701,
            1280,
            50,
            1912,
            895,
            725,
            1983,
            406,
            2705,
            2533,
            485,
            2780,
            1376,
            1364,
            3636,
            880,
            3198,
            1225,
            634,
            3603,
            2643,
            1493,
            520,
            3294,
            3704,
            3033,
            2193,
            3345,
            3596,
            1951,
            124,
            576,
            1185,
            296,
            2408,
            2313,
            615,
            2088,
            3058,
            2806,
            1042,
            3320,
            1601,
            427,
            1760,
            496,
            2486,
            1422,
            3437,
            2347,
            353,
            1292,
            2789,
            1474,
            3738,
            3707,
            2515,
            3288,
            1615,
            1110,
            1976,
            3633,
            1977,
            1647,
            1380,
            1324,
            500,
            1332,
            517,
            1791,
            2739,
            3344,
            2155,
            3581,
            2947,
            3423,
            1825,
            3452,
            3643,
            3574,
            3192,
            2201,
            3568,
            587,
            3035,
            1246,
            2361,
            1160,
            3734,
            2453,
            226,
            1504,
            883,
            1267,
            1420,
            706,
            1068,
            2627,
            3129,
            1771,
            1824,
            472,
            2411,
            3600,
            2613,
            1945,
            40,
            788,
            1109,
            1059,
            940,
            1804,
            1101,
            2771,
            1358,
            3419,
            1670,
            3621,
            1427
        ],
        "train": [
            3678,
            1777,
            2836,
            665,
            1486,
            835,
            1445,
            1963,
            197,
            705,
            1883,
            3244,
            2656,
            78,
            695,
            3132,
            3025,
            1781,
            2380,
            209,
            183,
            2881,
            2124,
            1056,
            79,
            1485,
            1447,
            407,
            846,
            1096,
            1995,
            872,
            1172,
            1878,
            3355,
            3464,
            244,
            1660,
            2661,
            1305,
            2851,
            3343,
            3138,
            1860,
            2168,
            770,
            902,
            1272,
            150,
            2287,
            1314,
            1809,
            135,
            3599,
            415,
            847,
            3646,
            2822,
            2921,
            3431,
            820,
            3141,
            3433,
            2228,
            1055,
            516,
            2582,
            1459,
            421,
            3447,
            1979,
            3611,
            1821,
            2296,
            3525,
            441,
            3521,
            1871,
            2267,
            1309,
            386,
            3592,
            2742,
            1426,
            1531,
            2108,
            2018,
            2480,
            38,
            1125,
            2821,
            440,
            2384,
            574,
            646,
            432,
            1769,
            2253,
            3012,
            3391,
            2763,
            2274,
            3303,
            2008,
            3110,
            1480,
            3420,
            1773,
            1476,
            3283,
            824,
            486,
            3238,
            3381,
            2710,
            1036,
            1699,
            3337,
            1890,
            3661,
            1558,
            1184,
            300,
            1865,
            283,
            1827,
            1578,
            280,
            2581,
            3309,
            1492,
            6,
            3664,
            1189,
            1048,
            423,
            3350,
            848,
            1515,
            823,
            2734,
            3624,
            2098,
            2405,
            121,
            3683,
            2439,
            2960,
            3175,
            3709,
            1526,
            1197,
            247,
            808,
            1990,
            622,
            1418,
            90,
            2355,
            3209,
            3135,
            1224,
            3050,
            532,
            3277,
            992,
            368,
            888,
            2721,
            464,
            1683,
            2827,
            515,
            1541,
            1640,
            1653,
            1689,
            3340,
            1600,
            2826,
            1797,
            3103,
            2944,
            2450,
            1835,
            2557,
            341,
            3494,
            606,
            1091,
            506,
            3068,
            3254,
            1714,
            2426,
            1592,
            2230,
            3185,
            1321,
            3415,
            86,
            984,
            2941,
            2484,
            2926,
            1176,
            315,
            1557,
            1054,
            2107,
            3410,
            2556,
            2620,
            3174,
            498,
            2171,
            2547,
            1752,
            3011,
            2116,
            1552,
            3639,
            790,
            721,
            1834,
            3665,
            2403,
            2241,
            87,
            746,
            2020,
            3450,
            603,
            3520,
            194,
            146,
            2166,
            697,
            3124,
            736,
            161,
            2989,
            2259,
            2053,
            3364,
            3267,
            1312,
            3178,
            1988,
            1212,
            1415,
            3572,
            1017,
            65,
            1020,
            3022,
            129,
            707,
            1593,
            1351,
            1011,
            215,
            2859,
            1722,
            3360,
            2942,
            3657,
            3714,
            2444,
            1165,
            2595,
            3617,
            1843,
            2243,
            3339,
            1168,
            3086,
            623,
            3674,
            2853,
            199,
            2699,
            2939,
            187,
            35,
            3414,
            2021,
            1106,
            2028,
            2206,
            612,
            2714,
            3656,
            99,
            610,
            2731,
            2046,
            2219,
            471,
            2579,
            3667,
            382,
            2781,
            657,
            1853,
            2554,
            2036,
            2698,
            644,
            241,
            255,
            3384,
            2679,
            1027,
            2601,
            540,
            2093,
            181,
            428,
            1389,
            1576,
            1585,
            1252,
            3183,
            3690,
            3170,
            816,
            3740,
            310,
            2909,
            2893,
            586,
            2740,
            1000,
            3053,
            1517,
            1494,
            2170,
            2689,
            19,
            2076,
            1279,
            878,
            2764,
            3249,
            745,
            909,
            2686,
            556,
            2662,
            1913,
            2251,
            293,
            1360,
            3651,
            1175,
            2777,
            730,
            2884,
            3177,
            2026,
            2058,
            734,
            3096,
            3315,
            3263,
            3057,
            1028,
            324,
            3514,
            858,
            2644,
            357,
            2438,
            3031,
            2300,
            1568,
            709,
            3451,
            2945,
            3366,
            147,
            1729,
            2121,
            1981,
            1143,
            74,
            2145,
            1031,
            3686,
            1041,
            2161,
            1880,
            236,
            2197,
            2845,
            3730,
            3669,
            54,
            1403,
            2495,
            1338,
            1384,
            3443,
            614,
            16,
            2935,
            850,
            3199,
            2606,
            143,
            1401,
            3387,
            784,
            542,
            787,
            1135,
            2608,
            265,
            2386,
            1928,
            2748,
            3397,
            151,
            1481,
            1537,
            3708,
            946,
            3160,
            518,
            903,
            1896,
            2848,
            916,
            474,
            2696,
            93,
            2534,
            3375,
            3100,
            1946,
            13,
            1774,
            604,
            1392,
            2931,
            3216,
            1277,
            2733,
            3287,
            2087,
            1145,
            438,
            162,
            3290,
            1561,
            80,
            1243,
            3505,
            1964,
            2322,
            1298,
            1952,
            3041,
            3689,
            1423,
            995,
            3517,
            1740,
            2138,
            930,
            505,
            131,
            2246,
            912,
            1757,
            624,
            3,
            1924,
            2709,
            2029,
            3482,
            55,
            2389,
            1244,
            1897,
            726,
            2865,
            2278,
            1440,
            2212,
            2459,
            2611,
            1341,
            1495,
            869,
            1111,
            1411,
            1058,
            1838,
            694,
            239,
            3390,
            2588,
            715,
            3231,
            750,
            963,
            1719,
            2924,
            769,
            600,
            56,
            3328,
            739,
            3348,
            3428,
            2383,
            3363,
            2482,
            696,
            95,
            1532,
            1398,
            573,
            3412,
            1763,
            1193,
            2772,
            997,
            637,
            3087,
            1908,
            367,
            1538,
            3172,
            763,
            2891,
            990,
            384,
            387,
            1325,
            3140,
            1591,
            1566,
            186,
            334,
            1623,
            3383,
            2850,
            2425,
            1461,
            27,
            1584,
            1234,
            2903,
            3585,
            2879,
            2220,
            3382,
            2828,
            43,
            969,
            3152,
            1904,
            3713,
            3023,
            1703,
            2700,
            2546,
            3540,
            2234,
            1379,
            3565,
            31,
            220,
            1813,
            3179,
            1940,
            1497,
            417,
            1955,
            1815,
            3399,
            2376,
            2185,
            1334,
            1195,
            3302,
            1208,
            2892,
            336,
            1024,
            1788,
            959,
            1339,
            3550,
            1667,
            1201,
            2529,
            1684,
            201,
            3034,
            2024,
            207,
            699,
            266,
            171,
            2497,
            3335,
            1102,
            84,
            2875,
            703,
            2032,
            2335,
            119,
            3741,
            2542,
            3018,
            2901,
            1435,
            1805,
            1382,
            231,
            1739,
            3030,
            2271,
            1519,
            2599,
            3468,
            3229,
            3052,
            592,
            740,
            1917,
            2985,
            1895,
            2122,
            3143,
            1743,
            3416,
            3002,
            2610,
            2979,
            1038,
            439,
            1206,
            3432,
            2494,
            2630,
            3006,
            3201,
            48,
            887,
            1308,
            3167,
            2057,
            1213,
            1614,
            2205,
            3735,
            2225,
            2612,
            1399,
            773,
            1874,
            2786,
            1499,
            754,
            1959,
            21,
            2038,
            1802,
            1187,
            781,
            1681,
            677,
            1842,
            2758,
            2037,
            3186,
            2336,
            1669,
            268,
            1852,
            524,
            3224,
            1687,
            442,
            2866,
            1573,
            2814,
            3046,
            2847,
            2213,
            2508,
            1970,
            198,
            2904,
            1948,
            469,
            845,
            1875,
            3705,
            3562,
            1343,
            681,
            3588,
            2803,
            3188,
            1851,
            3411,
            1310,
            466,
            650,
            630,
            2761,
            3444,
            2004,
            742,
            1608,
            3361,
            2413,
            2404,
            456,
            394,
            2325,
            490,
            3225,
            2321,
            3076,
            1152,
            145,
            1022,
            2042,
            2226,
            3655,
            3193,
            1637,
            1779,
            216,
            2674,
            2920,
            2825,
            363,
            3159,
            2778,
            1833,
            3265,
            1488,
            1978,
            1798,
            2396,
            223,
            956,
            1229,
            3127,
            430,
            1638,
            1430,
            3163,
            3465,
            922,
            1144,
            2837,
            230,
            1365,
            2051,
            63,
            2262,
            1854,
            3085,
            1881,
            689,
            1725,
            1034,
            12,
            3614,
            3210,
            3524,
            1353,
            2056,
            937,
            655,
            1354,
            1622,
            2861,
            222,
            275,
            1416,
            957,
            894,
            1876,
            2160,
            2681,
            1864,
            1546,
            2394,
            814,
            89,
            2158,
            102,
            3026,
            3264,
            2794,
            1905,
            3626,
            328,
            3070,
            451,
            373,
            2594,
            608,
            617,
            859,
            3136,
            876,
            3403,
            1803,
            853,
            2965,
            1329,
            3317,
            1935,
            359,
            2307,
            3296,
            1914,
            116,
            3028,
            2974,
            3712,
            584,
            1830,
            83,
            2281,
            2539,
            335,
            658,
            3368,
            2187,
            355,
            1641,
            243,
            1138,
            1569,
            1941,
            3278,
            414,
            24,
            303,
            2242,
            1457,
            1782,
            2693,
            611,
            2745,
            180,
            3485,
            2304,
            881,
            204,
            3654,
            60,
            568,
            1679,
            2808,
            1030,
            1709,
            3491,
            3039,
            1968,
            2963,
            8,
            1316,
            1413,
            2173,
            3148,
            1858,
            724,
            2397,
            3118,
            822,
            1477,
            1877,
            2719,
            831,
            738,
            510,
            206,
            2634,
            2153,
            1444,
            753,
            1844,
            2815,
            1468,
            1682,
            2983,
            1859,
            2958,
            1433,
            2092,
            1688,
            41,
            625,
            1790,
            487,
            62,
            2799,
            797,
            513,
            993,
            3563,
            2472,
            2544,
            928,
            2000,
            1010,
            1400,
            3625,
            1775,
            458,
            1064,
            477,
            271,
            431,
            2334,
            59,
            3005,
            1657,
            82,
            3255,
            3370,
            2437,
            3421,
            889,
            718,
            1258,
            2247,
            632,
            994,
            747,
            2461,
            2099,
            2927,
            3589,
            863,
            1909,
            2839,
            429,
            767,
            1132,
            2009,
            3037,
            2724,
            1595,
            2419,
            700,
            3024,
            2645,
            1200,
            1801,
            366,
            1514,
            1346,
            3726,
            1478,
            3329,
            2339,
            3538,
            1598,
            1437,
            1083,
            319,
            1692,
            3326,
            240,
            1378,
            1820,
            1455,
            375,
            1251,
            2713,
            1635,
            2030,
            2362,
            2838,
            3385,
            1866,
            509,
            783,
            3293,
            2072,
            1156,
            1155,
            892,
            2400,
            67
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "log(xxxcimr)",
        "wdi.gdpchg.s",
        "sqrt(wdi.cpi)",
        "log1p(bnn.yroff)",
        "elceleth.c",
        "dispota4.c",
        "cir.physint",
        "I(cir.physint^2)"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10b_DENSE_Chen_Ulf_Grievances_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR10b_DENSE_Chen_Ulf_Grievances/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "d3m": [
            "26643"
        ]
    },
    "solutions": {
        "d3m": {
            "26643": {
                "created": "2019-11-09T22:23:27.501582+00:00",
                "details_url": "/d3m-service/stored-response/bea5cf885aebbf0ea86403a78d75dc77f2fe9cfca6806bcaac9633a1",
                "hash_id": "bea5cf885aebbf0ea86403a78d75dc77f2fe9cfca6806bcaac9633a1",
                "id": 26643,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-09T22:23:27.531199+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26643,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/d6a58a5e-6887-4175-ade8-4353c6e77c61.csv",
                    "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/f001c9dc-35f9-468a-9353-cf42d0ae1f70.csv",
                    "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/cddad8b9-8fb5-4147-b8b7-597596b184b9.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9722148180007935
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26651": {
                "created": "2019-11-09T22:23:28.619841+00:00",
                "details_url": "/d3m-service/stored-response/823db8866b80b64cd70539041b1d72e4575f7e0501cd4fa5507fe33c",
                "hash_id": "823db8866b80b64cd70539041b1d72e4575f7e0501cd4fa5507fe33c",
                "id": 26651,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-09T22:23:28.743124+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "3",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26651,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/68b3e0e3-4f28-4b98-af95-bc62545eef5e.csv",
                    "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/e053336e-3f85-4453-ae39-3b171b02aea4.csv",
                    "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/2c0714bf-23a4-4ba3-9615-f6ef6a7c5547.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9722148180007935
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26677": {
                "created": "2019-11-09T22:27:10.374432+00:00",
                "details_url": "/d3m-service/stored-response/52f97f8a1a4efc59d472cb1a54d67c68e2165109c189e810eaf57b08",
                "hash_id": "52f97f8a1a4efc59d472cb1a54d67c68e2165109c189e810eaf57b08",
                "id": 26677,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-09T22:27:10.401777+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "4"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26677,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/2e6a1a2f-3afb-44b6-baad-630a8ae82801.csv",
                    "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/2ccabe3d-507c-4c5a-81c6-5fb4219aad07.csv",
                    "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/3cc0cd0c-485f-4e35-849f-21fe37ad877b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5050921857357025
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9917178750038147
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.929411768913269
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7596153616905212
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8359788656234741
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "26679": {
                "created": "2019-11-09T22:27:11.655118+00:00",
                "details_url": "/d3m-service/stored-response/65f48211766a37b4e125905be9977e4bf208e5b33d200741d4d858bb",
                "hash_id": "65f48211766a37b4e125905be9977e4bf208e5b33d200741d4d858bb",
                "id": 26679,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-09T22:27:11.733831+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.11.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
                                    "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
                                    "name": "sklearn.preprocessing.data.Normalizer",
                                    "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "left": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "right": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
                                    "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
                                    "name": "Concatenate two dataframes",
                                    "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "4"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.10.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 26679,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/f7d5af53-ff81-4cdf-9892-77421079182d.csv",
                    "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/288de2f5-066a-4668-ac52-3e9b7ec321da.csv",
                    "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/5e940e81-22e5-4b2a-8b15-c2eab4bc56b3.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5050921857357025
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9958589375019073
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9647058844566345
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8798076808452606
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9179894328117371
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "rook": {}
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": false,
    "subTask": "multiClass",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "trainTestRatio": 0.35,
    "unedited": true
}