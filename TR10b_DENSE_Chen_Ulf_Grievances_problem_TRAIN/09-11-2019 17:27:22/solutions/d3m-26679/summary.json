{
  "created": "2019-11-09T22:27:11.655118+00:00",
  "details_url": "/d3m-service/stored-response/65f48211766a37b4e125905be9977e4bf208e5b33d200741d4d858bb",
  "hash_id": "65f48211766a37b4e125905be9977e4bf208e5b33d200741d4d858bb",
  "id": 26679,
  "is_error": false,
  "is_finished": true,
  "modified": "2019-11-09T22:27:11.733831+00:00",
  "pipeline": {
    "context": "EVALUATION",
    "description": "",
    "digest": "",
    "id": "8",
    "inputs": [
      {
        "name": "input dataset"
      }
    ],
    "name": "",
    "outputs": [
      {
        "data": "steps.11.produce",
        "name": "output"
      }
    ],
    "steps": [
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "inputs.0"
              }
            }
          },
          "hyperparams": {
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
            "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
            "name": "Denormalize datasets",
            "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
            "version": "0.2.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.0.produce"
              }
            }
          },
          "hyperparams": {
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
            "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
            "name": "Extract a DataFrame from a Dataset",
            "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
            "version": "0.3.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.1.produce"
              }
            }
          },
          "hyperparams": {
            "parse_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "list": {
                      "items": [
                        {
                          "string": "http://schema.org/Integer"
                        },
                        {
                          "string": "http://schema.org/Float"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
            "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
            "name": "Parses strings into their types",
            "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
            "version": "0.5.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.2.produce"
              }
            }
          },
          "hyperparams": {
            "semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "list": {
                      "items": [
                        {
                          "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
            "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
            "name": "Extracts columns by semantic type",
            "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
            "version": "0.3.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.2.produce"
              }
            }
          },
          "hyperparams": {
            "semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "list": {
                      "items": [
                        {
                          "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
            "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
            "name": "Extracts columns by semantic type",
            "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
            "version": "0.3.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.3.produce"
              }
            }
          },
          "hyperparams": {
            "semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "list": {
                      "items": [
                        {
                          "string": "http://schema.org/Integer"
                        },
                        {
                          "string": "http://schema.org/Float"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
            "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
            "name": "Extracts columns by semantic type",
            "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
            "version": "0.3.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.5.produce"
              }
            }
          },
          "hyperparams": {
            "strategy": {
              "value": {
                "data": {
                  "raw": {
                    "string": "mean"
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
            "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
            "name": "sklearn.impute.SimpleImputer",
            "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
            "version": "2019.6.7"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.6.produce"
              }
            }
          },
          "hyperparams": {
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "5d058736c8014be14a7b82bf9e64e8af8233254454486bb648718708a6dc35f8",
            "id": "980b3a2d-1574-31f3-8326-ddc62f8fc2c3",
            "name": "sklearn.preprocessing.data.Normalizer",
            "pythonPath": "d3m.primitives.data_preprocessing.normalizer.SKlearn",
            "version": "2019.6.7"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.6.produce"
              }
            },
            "outputs": {
              "container": {
                "data": "steps.4.produce"
              }
            }
          },
          "hyperparams": {
            "degree": {
              "value": {
                "data": {
                  "raw": {
                    "int64": "2"
                  }
                }
              }
            },
            "include_bias": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            },
            "interaction_only": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
            "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
            "name": "sklearn.preprocessing.data.PolynomialFeatures",
            "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
            "version": "2019.6.7"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "left": {
              "container": {
                "data": "steps.7.produce"
              }
            },
            "right": {
              "container": {
                "data": "steps.8.produce"
              }
            }
          },
          "hyperparams": {
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "dea9e41d4dc0204d963ee01617416a6c5165c008ac717c09e59703dcee5d6cfd",
            "id": "aff6a77a-faa0-41c5-9595-de2e7f7c4760",
            "name": "Concatenate two dataframes",
            "pythonPath": "d3m.primitives.data_transformation.horizontal_concat.DataFrameConcat",
            "version": "0.2.0"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.9.produce"
              }
            },
            "outputs": {
              "container": {
                "data": "steps.4.produce"
              }
            }
          },
          "hyperparams": {
            "n_neighbors": {
              "value": {
                "data": {
                  "raw": {
                    "int64": "4"
                  }
                }
              }
            },
            "p": {
              "value": {
                "data": {
                  "raw": {
                    "int64": "2"
                  }
                }
              }
            },
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            },
            "weights": {
              "value": {
                "data": {
                  "raw": {
                    "string": "distance"
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
            "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
            "name": "sklearn.neighbors.classification.KNeighborsClassifier",
            "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
            "version": "2019.6.7"
          },
          "users": []
        }
      },
      {
        "primitive": {
          "arguments": {
            "inputs": {
              "container": {
                "data": "steps.10.produce"
              }
            },
            "reference": {
              "container": {
                "data": "steps.2.produce"
              }
            }
          },
          "hyperparams": {
            "use_semantic_types": {
              "value": {
                "data": {
                  "raw": {
                    "bool": true
                  }
                }
              }
            }
          },
          "outputs": [
            {
              "id": "produce"
            }
          ],
          "primitive": {
            "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
            "id": "8d38b340-f83f-4877-baaa-162f8e551736",
            "name": "Construct pipeline predictions output",
            "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
            "version": "0.3.0"
          },
          "users": []
        }
      }
    ],
    "users": []
  },
  "pipelineId": 26679,
  "produce": {
    "partials": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/f7d5af53-ff81-4cdf-9892-77421079182d.csv",
    "test": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/288de2f5-066a-4668-ac52-3e9b7ec321da.csv",
    "train": "/ravens_volume/test_output/TR10b_DENSE_Chen_Ulf_Grievances/temp/5e940e81-22e5-4b2a-8b15-c2eab4bc56b3.csv"
  },
  "scores": [
    {
      "fold": 0,
      "metric": {
        "k": 0,
        "metric": "ROC_AUC",
        "posLabel": ""
      },
      "randomSeed": 0,
      "value": {
        "raw": {
          "double": 0.5050921857357025
        }
      }
    },
    {
      "fold": 0,
      "metric": {
        "k": 0,
        "metric": "ACCURACY",
        "posLabel": ""
      },
      "randomSeed": 0,
      "value": {
        "raw": {
          "double": 0.9958589375019073
        }
      }
    },
    {
      "fold": 0,
      "metric": {
        "k": 0,
        "metric": "PRECISION",
        "posLabel": ""
      },
      "randomSeed": 0,
      "value": {
        "raw": {
          "double": 0.9647058844566345
        }
      }
    },
    {
      "fold": 0,
      "metric": {
        "k": 0,
        "metric": "RECALL",
        "posLabel": ""
      },
      "randomSeed": 0,
      "value": {
        "raw": {
          "double": 0.8798076808452606
        }
      }
    },
    {
      "fold": 0,
      "metric": {
        "k": 0,
        "metric": "F1",
        "posLabel": ""
      },
      "randomSeed": 0,
      "value": {
        "raw": {
          "double": 0.9179894328117371
        }
      }
    }
  ],
  "sent_to_user": true,
  "status": "COMPLETE",
  "systemId": "d3m"
}