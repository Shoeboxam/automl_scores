{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            313,
            248,
            360,
            47,
            120,
            302,
            369,
            130,
            43,
            373,
            5,
            144,
            413,
            356,
            414,
            226,
            233,
            297,
            64,
            241,
            71,
            262,
            66,
            288,
            51,
            45,
            57,
            278,
            423,
            197,
            362,
            90,
            218,
            29,
            367,
            85,
            174,
            209,
            223,
            363,
            391,
            269,
            437,
            142,
            265,
            242,
            388,
            368,
            95,
            325,
            361,
            408,
            185,
            131,
            137,
            52,
            392,
            386,
            4,
            345,
            173,
            67,
            430,
            75,
            76,
            399,
            221,
            263,
            334,
            16,
            0,
            453,
            34,
            351,
            270,
            322,
            296,
            281,
            393,
            311,
            323,
            441,
            146,
            383,
            293,
            13,
            264,
            56,
            14,
            429,
            415,
            443,
            7,
            337,
            320,
            171,
            372,
            70,
            42,
            276,
            204,
            100,
            357,
            9,
            60,
            170,
            359,
            308,
            416,
            435,
            26,
            295,
            50,
            103,
            157,
            23,
            150,
            44,
            227,
            384,
            6,
            172,
            433,
            161,
            417,
            454,
            55,
            448,
            412,
            400,
            80,
            38,
            328,
            282,
            284,
            220,
            217,
            243,
            436,
            379,
            53,
            48,
            18,
            382,
            11,
            344,
            428,
            176,
            96,
            377,
            286,
            438,
            219,
            148,
            444,
            153,
            180,
            273,
            331,
            91,
            211,
            192,
            10,
            167,
            119,
            28,
            327,
            17,
            238,
            283,
            206,
            32,
            252,
            15,
            194,
            434,
            389,
            164,
            214,
            247,
            54,
            225,
            73,
            431,
            374,
            175,
            375,
            117,
            409,
            307,
            93,
            447,
            258,
            271,
            122,
            427,
            181,
            292,
            350,
            229,
            74,
            272,
            145,
            319,
            201,
            143,
            86,
            166,
            394,
            250,
            257,
            306,
            20,
            407,
            421,
            396,
            106,
            116,
            280,
            156,
            128,
            240,
            58,
            88,
            253,
            355,
            163,
            210,
            366,
            188,
            380,
            336,
            160,
            115,
            285,
            353,
            159,
            208,
            59,
            316,
            364,
            371,
            98,
            196,
            92,
            405,
            339,
            191,
            112,
            291,
            259,
            33,
            246,
            118,
            89,
            193,
            147,
            207,
            182,
            25,
            184,
            12,
            177,
            418,
            245,
            432,
            81,
            440,
            21,
            30,
            235,
            186,
            300,
            419,
            254,
            36,
            187,
            205,
            287,
            330,
            387,
            179,
            155,
            450,
            425,
            318,
            290,
            22,
            94,
            304,
            324,
            190,
            124,
            141,
            35,
            37,
            87,
            378,
            61,
            198,
            312,
            446,
            317,
            105,
            97,
            343,
            114,
            125,
            31,
            169,
            455,
            420,
            215,
            216,
            298,
            261,
            439,
            77,
            83,
            390,
            403,
            346,
            126,
            139,
            260,
            385,
            84,
            27,
            329,
            340,
            46,
            395,
            289,
            310,
            266,
            236,
            178,
            104,
            19,
            397,
            275,
            132,
            267,
            230,
            158,
            352,
            222,
            202,
            102,
            62,
            256,
            135,
            341,
            189,
            332,
            41,
            410,
            111,
            277,
            309,
            365,
            335,
            69,
            68,
            255,
            3,
            212,
            39,
            268,
            140,
            101,
            228,
            99,
            445,
            401,
            162,
            239,
            237,
            151,
            127,
            78,
            79,
            224,
            301,
            299,
            449,
            134,
            231,
            232,
            406,
            24,
            347,
            8,
            376,
            72,
            303,
            251,
            314,
            183,
            2,
            249,
            315,
            305,
            1,
            65,
            165,
            129,
            200,
            136,
            195,
            138,
            121,
            333,
            442,
            274,
            404,
            244,
            82,
            370,
            113,
            168,
            154,
            108,
            152,
            109,
            213,
            451,
            279,
            402,
            338,
            107,
            321,
            123,
            349,
            40,
            398,
            63,
            294,
            348,
            452,
            149,
            426,
            411,
            381,
            199,
            342,
            358,
            49,
            203,
            354,
            234,
            133,
            110,
            326,
            422,
            424
        ],
        "test": [
            124,
            252,
            52,
            170,
            419,
            20,
            240,
            432,
            311,
            415,
            278,
            364,
            6,
            309,
            299,
            445,
            225,
            5,
            274,
            224,
            327,
            196,
            412,
            348,
            113,
            455,
            68,
            381,
            213,
            297,
            339,
            261,
            371,
            12,
            293,
            344,
            144,
            74,
            175,
            411,
            272,
            155,
            247,
            4,
            435,
            10,
            90,
            60,
            402,
            59,
            171,
            249,
            246,
            239,
            281,
            206,
            102,
            54,
            122,
            373,
            100,
            448,
            319,
            159,
            1,
            141,
            369,
            219,
            154,
            191,
            276,
            205,
            350,
            118,
            421,
            425,
            45,
            313,
            392,
            254,
            441,
            132,
            331,
            96,
            75,
            382,
            26,
            64,
            383,
            221,
            198,
            354,
            107,
            56,
            326,
            78,
            301,
            179,
            49,
            21,
            361,
            15,
            134,
            245,
            372,
            298,
            300,
            384,
            22,
            428,
            452,
            403,
            76,
            200,
            355,
            417,
            142,
            7,
            14,
            220,
            37,
            330,
            253,
            135,
            336,
            157,
            55,
            365,
            71,
            340,
            65,
            400,
            81,
            160,
            377,
            8,
            395
        ],
        "train": [
            77,
            306,
            334,
            337,
            204,
            423,
            443,
            232,
            51,
            80,
            231,
            186,
            310,
            24,
            103,
            440,
            210,
            321,
            201,
            294,
            238,
            29,
            40,
            270,
            3,
            11,
            84,
            36,
            317,
            226,
            139,
            193,
            123,
            106,
            111,
            329,
            208,
            389,
            83,
            427,
            35,
            87,
            165,
            129,
            323,
            454,
            114,
            168,
            17,
            314,
            343,
            182,
            117,
            101,
            167,
            215,
            162,
            295,
            260,
            335,
            324,
            437,
            390,
            267,
            108,
            173,
            394,
            216,
            137,
            218,
            42,
            374,
            376,
            151,
            342,
            366,
            296,
            302,
            315,
            453,
            416,
            230,
            285,
            211,
            414,
            126,
            442,
            244,
            258,
            398,
            396,
            359,
            39,
            349,
            292,
            95,
            166,
            430,
            125,
            189,
            236,
            46,
            18,
            418,
            148,
            322,
            388,
            67,
            163,
            197,
            332,
            235,
            408,
            387,
            104,
            66,
            188,
            422,
            303,
            91,
            290,
            277,
            152,
            177,
            174,
            282,
            436,
            273,
            128,
            172,
            116,
            92,
            131,
            153,
            41,
            156,
            16,
            27,
            380,
            250,
            266,
            203,
            190,
            23,
            202,
            237,
            351,
            187,
            368,
            269,
            375,
            433,
            451,
            320,
            429,
            133,
            242,
            318,
            2,
            255,
            280,
            127,
            63,
            105,
            176,
            304,
            93,
            229,
            222,
            378,
            385,
            234,
            73,
            312,
            72,
            32,
            0,
            97,
            347,
            328,
            43,
            325,
            184,
            405,
            358,
            57,
            115,
            407,
            110,
            47,
            178,
            444,
            393,
            185,
            233,
            79,
            345,
            413,
            363,
            140,
            149,
            143,
            386,
            256,
            212,
            228,
            121,
            192,
            399,
            195,
            130,
            183,
            362,
            357,
            397,
            360,
            251,
            446,
            257,
            112,
            449,
            409,
            53,
            147,
            158,
            19,
            223,
            450,
            9,
            241,
            265,
            420,
            169,
            284,
            33,
            161,
            145,
            86,
            305,
            119,
            209,
            439,
            30,
            370,
            136,
            404,
            82,
            70,
            248,
            367,
            447,
            25,
            262,
            431,
            88,
            243,
            259,
            268,
            346,
            28,
            353,
            307,
            31,
            391,
            217,
            264,
            48,
            34,
            146,
            434,
            164,
            316,
            120,
            333,
            426,
            99,
            286,
            271,
            279,
            356,
            287,
            181,
            263,
            94,
            69,
            227,
            214,
            61,
            308,
            406,
            85,
            424,
            50,
            288,
            98,
            109,
            58,
            401,
            199,
            275,
            138,
            341,
            289,
            283,
            438,
            207,
            180,
            62,
            38,
            379,
            291,
            338,
            89,
            194,
            410,
            150,
            352,
            44,
            13
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "log_gdpc",
        "logtpop",
        "logmtn",
        "feanctig",
        "floil",
        "sftpdur2",
        "ethherf",
        "relhrel",
        "anocracy",
        "democracy",
        "stratidc"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR13c_Goldstone_Table_3_Fearon_Laitin_problem_TRAIN",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "auto_sklearn": [
            "f1b9b677-969a-4224-85e6-d3197619fa60"
        ],
        "d3m": [],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "auto_sklearn": {
            "f1b9b677-969a-4224-85e6-d3197619fa60": {
                "description": "AutoSklearnClassifier(delete_output_folder_after_terminate=True,\n           delete_tmp_folder_after_terminate=True,\n           disable_evaluator_output=False, ensemble_memory_limit=1024,\n           ensemble_nbest=50, ensemble_size=50, exclude_estimators=None,\n           exclude_preprocessors=None, get_smac_object_callback=None,\n           include_estimators=None, include_preprocessors=None,\n           initial_configurations_via_metalearning=25, logging_config=None,\n           metadata_directory=None, ml_memory_limit=3072, n_jobs=None,\n           output_folder=None, per_run_time_limit=360,\n           resampling_strategy='cv',\n           resampling_strategy_arguments={'shuffle': False, 'folds': 10},\n           seed=1, shared_mode=False, smac_scenario_args=None,\n           time_left_for_this_task=600, tmp_folder=None)",
                "model": "AutoSklearnClassifier",
                "model_id": "f1b9b677-969a-4224-85e6-d3197619fa60",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b950b883-fdf6-436d-957f-96cd9b14a9b0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dfb1bbaa-6191-493f-b5ad-5dff7e417a8b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ff07522a-c41b-4e5e-a245-9a9aeb3bfbfb.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b8eaebac-0488-4c73-be4f-2317ab06343b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/807425f8-d917-48ac-a56e-f8670b3e0778.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3ffa6dbe-32ab-436b-ae31-fcd3ae801092.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/26b61081-1224-45bd-9f60-9b7f3b075c09.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2e1ab6b2-bec1-46f4-891b-6fbdd49f27e6.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.5237837658987039
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6578947368421053
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.311133658008658
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.2522428229665072
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.26525882952951674
                    }
                ],
                "search_id": "148023ac-135b-4aa1-b2db-efdd7b526ddb",
                "system": "auto_sklearn"
            }
        },
        "d3m": {
            "27742": {
                "created": "2019-11-11T07:51:32.477818+00:00",
                "details_url": "/d3m-service/stored-response/966dcfbb6d7b70fc14f5f384ab2c2947869c6387b33d226671037d9a",
                "hash_id": "966dcfbb6d7b70fc14f5f384ab2c2947869c6387b33d226671037d9a",
                "id": 27742,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:32.502246+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27742,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/7516019d-1ae5-4b00-bae4-28d49d3f8b92.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/78e08ac7-f2f8-4160-996f-41b8976ecf02.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/17574533-45f0-4ee8-8b4e-984c0869a524.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7478070259094238
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27746": {
                "created": "2019-11-11T07:51:33.397028+00:00",
                "details_url": "/d3m-service/stored-response/6660e83f0f0fb82a906f6c155ad2c7e29ba097280e49ca5e040643f1",
                "hash_id": "6660e83f0f0fb82a906f6c155ad2c7e29ba097280e49ca5e040643f1",
                "id": 27746,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:33.471387+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "2",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27746,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/0016f191-9c74-4a44-9e56-7888004517be.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/49c5088c-af01-4cd8-8852-c5f1c344e6a8.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/6d0bea7a-fd0b-4de3-99aa-cedd617e81b7.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7478070259094238
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27776": {
                "created": "2019-11-11T07:51:36.812565+00:00",
                "details_url": "/d3m-service/stored-response/95ff380baa241d5e0351abcd3ecf19df589bf9674e5dccd03b1e4f5e",
                "hash_id": "95ff380baa241d5e0351abcd3ecf19df589bf9674e5dccd03b1e4f5e",
                "id": 27776,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:36.837059+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "7f41c6d30b6512a0fa3a3adebbc3b16c4a41fc71ac4b6084893f7562af5a8a0e",
                                    "id": "464783a8-771e-340d-999b-ae90b9f84f0b",
                                    "name": "sklearn.naive_bayes.GaussianNB",
                                    "pythonPath": "d3m.primitives.classification.gaussian_naive_bayes.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27776,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/26e8eafe-9ed0-4f0d-885b-65fe6ec13c30.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/2142a5e0-49f3-4fc4-a696-aeea338f8688.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/7e8aaacc-f481-4913-b048-5f30a56a74f8.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6053512692451477
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7105262875556946
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.43089431524276733
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.46086955070495605
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4453781545162201
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27778": {
                "created": "2019-11-11T07:51:38.085038+00:00",
                "details_url": "/d3m-service/stored-response/0e9d4f871b6c21fbbbb3e227234601eaee356e71c6f4c00f96efdf33",
                "hash_id": "0e9d4f871b6c21fbbbb3e227234601eaee356e71c6f4c00f96efdf33",
                "id": 27778,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:38.138660+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "7f41c6d30b6512a0fa3a3adebbc3b16c4a41fc71ac4b6084893f7562af5a8a0e",
                                    "id": "464783a8-771e-340d-999b-ae90b9f84f0b",
                                    "name": "sklearn.naive_bayes.GaussianNB",
                                    "pythonPath": "d3m.primitives.classification.gaussian_naive_bayes.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27778,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/f2d318e0-f086-43d2-b716-04343ef45f81.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/2e3d71cb-7340-47e5-8328-6c96416fb79f.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/004683fd-67ae-41e7-b790-fa1aa747d204.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6053512692451477
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7105262875556946
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.43089431524276733
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.46086955070495605
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4453781545162201
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27810": {
                "created": "2019-11-11T07:51:49.393818+00:00",
                "details_url": "/d3m-service/stored-response/29a12d79789fee7dac0cdb8250b5e977f4b4c6a2f52be731c7c05a55",
                "hash_id": "29a12d79789fee7dac0cdb8250b5e977f4b4c6a2f52be731c7c05a55",
                "id": 27810,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:49.418477+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "7f41c6d30b6512a0fa3a3adebbc3b16c4a41fc71ac4b6084893f7562af5a8a0e",
                                    "id": "464783a8-771e-340d-999b-ae90b9f84f0b",
                                    "name": "sklearn.naive_bayes.GaussianNB",
                                    "pythonPath": "d3m.primitives.classification.gaussian_naive_bayes.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27810,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/3d38abce-cd87-4cc3-af24-6bb5982a84f0.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/6fbc880f-6f96-4650-8fb9-4ef36920db0a.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/00650085-592c-4521-bdbb-fdb9fc68314e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6060874462127686
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7171052694320679
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4396551847457886
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4434782564640045
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.44155845046043396
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27812": {
                "created": "2019-11-11T07:51:49.497627+00:00",
                "details_url": "/d3m-service/stored-response/f656776f3763edc804b7ef8d17e9caf50feca593b7ca2449b0b3ed68",
                "hash_id": "f656776f3763edc804b7ef8d17e9caf50feca593b7ca2449b0b3ed68",
                "id": 27812,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-11T07:51:49.536347+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "402539dad43926241744ede7db01f187410731e5cbfd8233cd7167380ee16418",
                                    "id": "d639947e-ece0-3a39-a666-e974acf4521d",
                                    "name": "sklearn.preprocessing.data.StandardScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.standard_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "7f41c6d30b6512a0fa3a3adebbc3b16c4a41fc71ac4b6084893f7562af5a8a0e",
                                    "id": "464783a8-771e-340d-999b-ae90b9f84f0b",
                                    "name": "sklearn.naive_bayes.GaussianNB",
                                    "pythonPath": "d3m.primitives.classification.gaussian_naive_bayes.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27812,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/0273e4f3-29fe-4147-abd8-ad158bdf4d35.csv",
                    "test": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/a02afbcd-ed0e-4dfe-b99a-a542ed9260be.csv",
                    "train": "/ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/temp/9c026017-7568-4f0d-89fc-480e5b8333de.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6060874462127686
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.718201756477356
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4420498162508011
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.447826087474823
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.44491715729236603
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "0f6e3b4b-4f3f-465f-98d7-46e0369c07cb": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "0f6e3b4b-4f3f-465f-98d7-46e0369c07cb",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/90bd614b-3140-4d29-9ecc-0ee62e9ad50f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dc634d89-f476-42ef-8e3b-92df9be69d03.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c30250c4-58b0-405d-b1b3-9f18f9ea67b1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6d5bb683-9de3-4d1e-bd74-00a46e3af9ee.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5ca66e00-9248-4ea8-a9cc-8ea4d27ae5d1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/66129e3b-745f-4a7d-8b25-423837757418.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4ae02c81-bb9d-4b36-bdc2-88a791d0f8e7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a0e02eba-7b73-47d5-acda-55c608478936.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.7572740022950402
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8179824561403509
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.6403508771929824
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6347826086956522
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.6375545851528385
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "0ff9c905-4172-4a21-a324-0d21fc1ec20d": {
                "description": "glm-unsupervised",
                "model": "glm-unsupervised",
                "model_id": "0ff9c905-4172-4a21-a324-0d21fc1ec20d",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e213979b-3ac3-42ae-b342-9b2df2520f66.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f515fdba-420b-435a-8fc8-cc96ea31a2b1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/45fa379a-a05f-45e8-80dd-34cbf269aa07.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d57cd825-cc94-4eb2-9b0f-5d6db28a4196.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/23187792-0639-4570-aac0-71be225566b9.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/798ec6cc-80f6-4aff-8632-23959a8750d6.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.6718730077776361
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6600877192982456
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.4
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6956521739130435
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.507936507936508
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "11390a24-1dcd-47e9-b8a1-6710ec90e007": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "11390a24-1dcd-47e9-b8a1-6710ec90e007",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/96fb8361-7078-4793-b702-4a65e966e4a8.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f280fce7-686a-46f0-91e1-2d2fce77b5ed.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2a193c6e-e425-45d4-bf08-3588229e2a7e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3fcc92c9-f302-4474-9622-fb799e5afdd1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/35868e27-0947-4bab-a253-6ead26dadc02.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08db887a-0456-4fcf-b171-38be533dce4d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7e23e8e9-7ef9-4a5b-a859-f7df0e51a080.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2a65ec75-e6a6-44e5-a636-9b9881c78a16.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.6367843937268902
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6162280701754386
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.3611111111111111
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6782608695652174
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.47129909365558914
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "2dfcd999-9728-42dd-b31e-cd7e3bdd8953": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "2dfcd999-9728-42dd-b31e-cd7e3bdd8953",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9e99dc11-1b84-403b-a6cd-d4e3fe24d304.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2fe9a04e-8ce4-4817-a38b-3a1113639991.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7689d567-4d95-448b-b764-b7a0d3102c0a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bec26944-92e1-4e73-a446-9c261393ab01.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4462b53d-5991-47f4-93c1-b37610ce9050.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/342cbe91-9380-401f-bccc-6769da6f3079.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e74b108a-f35c-4b95-b646-b00ab490f34f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3fc271b9-bc73-45dd-811f-60566cc657e3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8490883590462833
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.9078947368421053
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8842105263157894
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7304347826086957
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.8
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "46546439-15c8-4965-ab3d-822a51f3eebb": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "46546439-15c8-4965-ab3d-822a51f3eebb",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d815bdf9-ebed-4c9d-b7e1-3254a18c7434.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2a003eaf-a775-4b0b-8b10-1d3ad9f26872.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b2e8e41d-32f8-4a3c-b499-f29b34a6bf73.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/36c66a09-3fb7-43b9-95ac-3062ccf4d93a.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/90a31cb7-b53f-4e68-840b-12f18a0f58c2.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/951758c5-fc90-4e82-a938-ac627a6c3cc3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.7073186280759913
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7346491228070176
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.4807692307692308
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.6521739130434783
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.5535055350553505
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "8f050c25-f222-4736-aa4b-705a01668fc2": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "8f050c25-f222-4736-aa4b-705a01668fc2",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c6d16faa-6c72-4f23-bb67-1649455ffd1a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/28870b8a-96c0-4065-b2a4-159101896ac6.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d1ccab8e-b313-42c5-89f4-4f766549eaa0.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/29648246-067e-4d08-817d-e294df36e6f8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e51e53c1-2bae-44c3-993e-02340e6952b4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/605e7135-90f6-4696-959c-819a4ac45534.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d8a63059-4834-40d1-9d19-1bbf715d6bc7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ba056ebc-96f2-491c-a878-8602ba73535d.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8402397041948234
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8903508771929824
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.8095238095238095
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7391304347826086
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.7727272727272727
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "8fcfeb7c-c760-40c7-9f3e-5a67f3754dde": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "8fcfeb7c-c760-40c7-9f3e-5a67f3754dde",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/52246482-99bf-48e8-aead-9b737d60fd91.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/677aad70-4a05-46e6-85dd-8b5382ed5164.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5fb9350c-27ff-4615-8f8c-b1ffca06f783.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1be748fc-44b5-425c-a229-ec6358988a94.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9497d2b7-23d3-4144-b960-a1001b0aca1d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/253d51f9-55ee-4b72-aace-f2ee7cde698b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a8dabd2e-fcee-4d04-949c-bb3c1ed3a2dc.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/67ed0389-d7c5-4bf2-9796-f7d3f2c7c563.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.6394109396914445
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.5942982456140351
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.35294117647058826
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7304347826086957
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.47592067988668557
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "a3b0f27d-c362-42a8-b4f8-e6a12e02edc7": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "a3b0f27d-c362-42a8-b4f8-e6a12e02edc7",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/53283292-e107-4aa9-be34-8398f83c3719.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c30bb1d-400b-4350-9fdf-bd40a669dc53.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a9f82ace-9a7e-4f57-88d2-83aa07473a2c.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0445143f-42ab-492a-ae2f-a168150a73be.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5f4ce903-d2df-42e0-850e-f23f394a2a35.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6b2ef077-571c-406f-9164-86fd0d289121.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.7003825066938671
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6337719298245614
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.39344262295081966
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.8347826086956521
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.5348189415041782
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "bfa6bb7a-5b2f-4745-9622-39c876ef31e5": {
                "description": "deeplearning-unsupervised",
                "model": "deeplearning-unsupervised",
                "model_id": "bfa6bb7a-5b2f-4745-9622-39c876ef31e5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d8b88361-b056-4e49-bb76-772fc6c3f40d.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bc8670bc-16fb-49cd-b187-1c3aee5b7549.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/05aaa7e2-de99-4f31-bb6c-6fa8ba0b1f76.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/30bd0d8b-b373-40af-b948-abde1fa087cf.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dae2328e-ba12-4574-af29-fe8c7e4cce37.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ed06268e-1f3b-41bd-84ff-90660b09352f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/377a05b6-1c55-42db-9722-d5ee9b93c6e0.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a87862dc-4a50-4068-abe7-e43b6adf51d8.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.6988142292490118
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6228070175438597
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.38735177865612647
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.8521739130434782
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.532608695652174
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            },
            "fdc389bf-815d-4196-97d4-1a97841fb934": {
                "description": "gbm-unsupervised",
                "model": "gbm-unsupervised",
                "model_id": "fdc389bf-815d-4196-97d4-1a97841fb934",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b54856e8-3ab5-4305-a1da-c1f3069ec115.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b8e1edfc-c4df-450d-8fb0-d03646349012.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e6b5677a-4a93-46aa-8edc-902c646aa022.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/84177377-949e-49cf-998a-44f1ba32e758.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a325a940-a23b-4d7c-a9ef-66d13e9919e3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/14f3262f-6c18-412a-8863-d7732ce09879.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cbe8e490-8fa3-40e0-870d-dd272184b01f.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/162fccea-7b4c-4716-bfe0-93af23038924.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.8283564962386842
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.8596491228070176
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.704
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.7652173913043478
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.7333333333333334
                    }
                ],
                "search_id": "ecb20f38-ac17-4514-901e-c8415f8cda08",
                "system": "h2o"
            }
        },
        "mlbox": {
            "691cc317-b362-4cc2-9eb5-48610824b1cc": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "691cc317-b362-4cc2-9eb5-48610824b1cc",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b0559132-75d7-4527-ae65-e372c05451e0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6e3b527d-38ba-4e95-9904-0d367601af28.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5a6c6842-994c-4a8c-9410-00dfbcc1b370.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/23fd4070-9915-46af-9e87-61e879761aa9.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/93182ebd-c3e2-4290-a020-72e54728e1d4.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bc5a5824-4dcf-4444-9a43-4870e6e918f2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/37fe650c-9b33-403d-bfcf-b7ef4e504104.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2fcc9ee8-58dd-4bc6-8689-534867a2df53.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.4931979430528193
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6337719298245614
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.2098766279300335
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.209280303030303
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.20320072627388908
                    }
                ],
                "search_id": "508ede3a-882c-45e6-b2cf-51ef72e56a9f",
                "system": "mlbox"
            },
            "d86ed07c-dfeb-42f9-a19c-c86a31ee1811": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "d86ed07c-dfeb-42f9-a19c-c86a31ee1811",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/17cbbafb-5da6-4e0b-a1e8-2c077ce3dfa6.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b4d2dbf1-2d17-4449-91b1-4fe1b1eb5442.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bbb7e1f2-232f-4af3-a9f4-f571018f0789.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bbac6e97-4946-49bc-aada-a7269f28fb23.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ec70fde2-c69b-47d5-9d81-056594407835.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d0cc3a9a-acd1-47df-a67b-9f48ca534ba2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/25c0a325-9473-43fb-ab6e-f367ccf93755.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4fe01fd0-7662-41f2-b152-3ded5eacbb95.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.4931979430528193
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.6337719298245614
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.2098766279300335
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.209280303030303
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.20320072627388908
                    }
                ],
                "search_id": "da97c414-67a7-405d-9df6-300c1b66c653",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "2322b995-b455-4aeb-9f52-1a16d7ede8a1": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7ffaf40cc438>",
                "model": "Xgboost",
                "model_id": "2322b995-b455-4aeb-9f52-1a16d7ede8a1",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1075a149-e8f1-4dde-9f0b-47a35f1f420e.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cbb7881e-fc2b-47af-8a9a-953a711d838f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b28b240a-9d5f-4daa-aa97-0c35fd53db95.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/eb98389d-bf2a-4ae8-af6e-f2f548ec268a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/499d4385-d536-4240-8faa-15704af8a065.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b7f2512f-2da0-4804-b11f-01ae58cee920.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2c9ae708-51c7-4a01-ba9f-16d23291071b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d0280094-a7aa-49f4-82a2-d02d99c3d552.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.4970975232198142
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.743421052631579
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0
                    }
                ],
                "search_id": "020c590d-f3da-4cae-bb43-2bcd59d12d25",
                "system": "mljar-supervised"
            },
            "31dff460-07cf-440c-b352-1622b4724f10": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7ffad6823fd0>",
                "model": "Ensemble",
                "model_id": "31dff460-07cf-440c-b352-1622b4724f10",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/49c1254d-97ee-4abc-a62b-60abfbfa7e85.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2274cb93-425f-418b-b2a2-c52cdec8090b.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/382c4fe3-8d60-4333-8349-d2c964a36158.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/eefe7cad-a9ed-4352-91b4-59ea911b1280.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fa74d828-c1e9-481e-9f1b-798d2e0be0cb.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2f112bbc-a0f8-4918-b2a1-dc4a392bae12.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "020c590d-f3da-4cae-bb43-2bcd59d12d25",
                "system": "mljar-supervised"
            },
            "668cf64f-c6ab-41a2-86c5-1221c72a127f": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7ffad686cd30>",
                "model": "Xgboost",
                "model_id": "668cf64f-c6ab-41a2-86c5-1221c72a127f",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0f73772a-da06-4c8b-936f-8cce4bb32b63.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4fb532bd-7d20-4e06-af3f-7fa8e8d244ed.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ee999616-1cb7-4312-a397-b543acaa8d88.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/681a7b23-40de-4722-bd75-de89c3cf0a89.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/24a49d24-dcac-4a76-9651-d96ae74328f9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bc82937e-3c5d-4bae-8ac6-66ac92497ba6.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bae5e6c1-c64b-4727-aa40-ebb4ac0c6c9c.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0b70ad2c-1e89-4ad6-a554-fa3221fb0445.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.4970975232198142
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.743421052631579
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0
                    }
                ],
                "search_id": "020c590d-f3da-4cae-bb43-2bcd59d12d25",
                "system": "mljar-supervised"
            },
            "e490d7c8-e969-4e0e-bed9-05239318d489": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7ffad67f0cc0>",
                "model": "CatBoost",
                "model_id": "e490d7c8-e969-4e0e-bed9-05239318d489",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/03617956-fb99-469a-8f87-e57113c5be55.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f7053847-e68d-4efe-94a4-2f2f8c322c73.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/82928271-1098-4dec-b6c8-e11c24095d2e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/611d93fb-110a-4a7e-b907-a508dc31204d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4c78c29d-ef19-45b5-9403-fcdee08209be.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/92b7f6b2-64cb-4658-aa8b-c2d65947ccf1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b2faffb4-7bb4-4d79-915e-40765a815403.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1380a616-2957-48a5-b823-312f509e9b9b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.5044856459330144
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.75
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.09868421052631579
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.008971291866028708
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.016447368421052634
                    }
                ],
                "search_id": "020c590d-f3da-4cae-bb43-2bcd59d12d25",
                "system": "mljar-supervised"
            }
        },
        "rook": {},
        "tpot": {
            "325aafe7-18af-4453-ae91-e1bcbb5af1af": {
                "description": "Pipeline(memory=None,\n     steps=[('randomforestclassifier', RandomForestClassifier(bootstrap=False, class_weight=None,\n            criterion='entropy', max_depth=None,\n            max_features=0.35000000000000003, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=15, min_samples_split=19,\n            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=None,\n            oob_score=False, random_state=None, verbose=0,\n            warm_start=False))])",
                "model": "Pipeline",
                "model_id": "325aafe7-18af-4453-ae91-e1bcbb5af1af",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/74429c23-a7c5-4517-836c-372803fc02b9.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9a60d826-6c8d-48df-b5d7-322d29873ee9.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR13c_Goldstone_Table_3_Fearon_Laitin/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2d6dbbd1-cca0-4841-adc9-6284dbb25021.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0d6c6742-a546-49a1-8437-f3feccd3867e.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/test/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/dc3f43f6-b232-4a3e-873c-6426461e5115.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/26a1cf80-d831-41f9-a694-dc145900727b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/train/ws_508/2019-11-11_02-24-59/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/acec3ba6-9e9d-4aae-8fd6-273e2a57ae82.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7a263d2c-bafe-4016-be1e-f21d4f4d8aee.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR13c_Goldstone_Table_3_Fearon_Laitin/additional_inputs/partials/ws_508/2019-11-11_02-24-57/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "sftpcons",
                        "value": 0.4883607749319823
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "sftpcons",
                        "value": 0.7258771929824561
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "sftpcons",
                        "value": 0.03289473684210526
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "sftpcons",
                        "value": 0.008971291866028708
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "sftpcons",
                        "value": 0.014097744360902258
                    }
                ],
                "search_id": "284ec046-e4a1-4f88-9aa1-444a9b4f3501",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "auto_sklearn": {
            "message": "search complete",
            "searchId": "148023ac-135b-4aa1-b2db-efdd7b526ddb",
            "thinking": false
        },
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "message": "search complete",
            "searchId": "ecb20f38-ac17-4514-901e-c8415f8cda08",
            "thinking": false
        },
        "mlbox": {
            "message": "search complete",
            "searchId": "508ede3a-882c-45e6-b2cf-51ef72e56a9f",
            "thinking": false
        },
        "mljar-supervised": {
            "message": "search complete",
            "searchId": "020c590d-f3da-4cae-bb43-2bcd59d12d25",
            "thinking": false
        },
        "tpot": {
            "message": "search complete",
            "searchId": "284ec046-e4a1-4f88-9aa1-444a9b4f3501",
            "thinking": false
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "sftpcons"
    ],
    "task": "classification",
    "timeBoundSearch": 10,
    "unedited": true
}