{
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_499/2019-11-10_17-57-16/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_499/2019-11-10_17-57-18/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_499/2019-11-10_17-57-18/tables/learningData.csv"
    },
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_499/2019-11-10_17-57-16/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_499/2019-11-10_17-57-18/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_499/2019-11-10_17-57-18/datasetDoc.json"
    },
    "evaluationMethod": "kFold",
    "indices": {
        "all": [
            1585,
            6062,
            4579,
            3915,
            3803,
            4459,
            5649,
            3574,
            3299,
            429,
            2096,
            3921,
            1789,
            1758,
            5928,
            685,
            6762,
            6839,
            3671,
            4389,
            6146,
            6544,
            4744,
            5496,
            3333,
            1601,
            4066,
            2445,
            4789,
            5024,
            1024,
            3113,
            5909,
            2209,
            3032,
            4355,
            601,
            6403,
            2569,
            6040,
            535,
            1126,
            6378,
            1597,
            3875,
            7056,
            788,
            5080,
            6726,
            464,
            2162,
            2591,
            1089,
            6892,
            7095,
            4204,
            1743,
            589,
            626,
            4027,
            2452,
            6140,
            1017,
            928,
            4280,
            5873,
            5870,
            6754,
            5028,
            1441,
            3771,
            5038,
            5292,
            4109,
            3796,
            6009,
            2345,
            4503,
            951,
            4161,
            2125,
            5895,
            3251,
            3541,
            4548,
            4632,
            3317,
            1182,
            5624,
            4096,
            5848,
            64,
            5328,
            4390,
            1459,
            6355,
            5874,
            3381,
            5121,
            3260,
            6428,
            2359,
            2409,
            4735,
            4505,
            7105,
            6881,
            4914,
            6685,
            4769,
            760,
            2130,
            5278,
            6643,
            3590,
            6508,
            179,
            4185,
            3222,
            108,
            2004,
            1503,
            1323,
            1732,
            2293,
            735,
            4661,
            6913,
            2909,
            3325,
            3755,
            1527,
            652,
            5266,
            6653,
            6115,
            2922,
            307,
            3597,
            1200,
            3306,
            5779,
            3723,
            4815,
            2482,
            6264,
            2856,
            254,
            2955,
            2298,
            4173,
            2936,
            6617,
            6877,
            6756,
            386,
            2390,
            1444,
            2517,
            7093,
            4805,
            4224,
            3203,
            3586,
            326,
            3714,
            1670,
            4515,
            5,
            6876,
            661,
            7144,
            3470,
            4566,
            4657,
            4105,
            2454,
            1639,
            2670,
            1165,
            1172,
            2609,
            6075,
            4555,
            1795,
            5987,
            6611,
            6449,
            7152,
            3454,
            3724,
            4055,
            3808,
            6092,
            2634,
            4592,
            3653,
            1815,
            5144,
            3773,
            195,
            6160,
            2479,
            542,
            704,
            6297,
            526,
            2749,
            2728,
            1014,
            1751,
            5607,
            5641,
            1369,
            3483,
            3435,
            6582,
            2864,
            6598,
            2178,
            4524,
            7132,
            2034,
            603,
            3146,
            3171,
            1217,
            337,
            1904,
            3736,
            202,
            6351,
            4272,
            909,
            5160,
            1052,
            2154,
            2558,
            78,
            6242,
            3058,
            5630,
            4857,
            6632,
            3010,
            5493,
            3244,
            3204,
            2620,
            3300,
            6798,
            3619,
            6760,
            5157,
            4402,
            2794,
            4646,
            5766,
            5120,
            6918,
            4405,
            2301,
            5758,
            5370,
            3286,
            6796,
            1768,
            5788,
            1230,
            7072,
            1098,
            5906,
            6027,
            5192,
            2139,
            2027,
            4798,
            4946,
            2914,
            399,
            5978,
            2834,
            5547,
            2563,
            4032,
            689,
            2924,
            6775,
            6201,
            4957,
            5107,
            3414,
            508,
            382,
            1897,
            6524,
            4064,
            2588,
            3602,
            4449,
            5193,
            5725,
            2111,
            1588,
            2972,
            3522,
            513,
            1912,
            5452,
            2376,
            5871,
            5040,
            1531,
            7024,
            277,
            1188,
            6593,
            5640,
            1657,
            1462,
            3746,
            2651,
            2246,
            4016,
            5745,
            2336,
            1078,
            1148,
            163,
            6480,
            4790,
            5466,
            520,
            2593,
            5382,
            4485,
            967,
            2805,
            1592,
            6165,
            1213,
            4563,
            6822,
            1120,
            4907,
            6976,
            5678,
            511,
            2849,
            5182,
            7089,
            2673,
            6414,
            7133,
            3100,
            2857,
            407,
            4120,
            4903,
            5007,
            1005,
            217,
            2066,
            6481,
            3445,
            593,
            897,
            512,
            5403,
            3115,
            4082,
            4264,
            3077,
            1349,
            3349,
            6349,
            42,
            4312,
            3543,
            3954,
            6687,
            827,
            5575,
            2035,
            5472,
            4239,
            3202,
            1698,
            6454,
            4490,
            2726,
            3419,
            6757,
            1035,
            796,
            1106,
            1816,
            269,
            5577,
            5113,
            1013,
            2315,
            2361,
            2205,
            2953,
            5459,
            3199,
            5408,
            2594,
            1836,
            482,
            1731,
            2414,
            175,
            5962,
            3689,
            1297,
            5738,
            5610,
            6412,
            6490,
            4273,
            3673,
            3936,
            1285,
            2729,
            2683,
            5148,
            1658,
            5497,
            5991,
            3719,
            2722,
            190,
            3191,
            4742,
            691,
            397,
            5317,
            4751,
            4748,
            6147,
            65,
            2055,
            3190,
            7064,
            264,
            5714,
            6833,
            5810,
            1690,
            987,
            634,
            1986,
            3499,
            555,
            3232,
            5945,
            4313,
            5984,
            6597,
            4732,
            5303,
            2258,
            670,
            204,
            6467,
            1025,
            663,
            6831,
            4965,
            7111,
            499,
            6584,
            5729,
            2326,
            753,
            2009,
            3663,
            4409,
            6565,
            510,
            4468,
            2089,
            2264,
            6139,
            2574,
            3015,
            295,
            5917,
            2333,
            3914,
            4378,
            4031,
            979,
            4695,
            6367,
            816,
            221,
            6150,
            6978,
            480,
            5530,
            4741,
            4663,
            4796,
            5267,
            4963,
            1000,
            5702,
            4863,
            5892,
            2945,
            104,
            1166,
            1983,
            4198,
            2997,
            883,
            6944,
            5205,
            5053,
            6780,
            2018,
            6186,
            3553,
            3380,
            2481,
            7019,
            6484,
            4339,
            5899,
            3536,
            353,
            1374,
            434,
            5579,
            2780,
            5100,
            1367,
            625,
            4310,
            6859,
            2500,
            5988,
            622,
            4422,
            5866,
            1350,
            294,
            116,
            5177,
            3400,
            4866,
            19,
            2829,
            5262,
            4110,
            85,
            872,
            2882,
            6948,
            7000,
            1903,
            4084,
            2253,
            3424,
            3448,
            1689,
            6100,
            2269,
            4265,
            1931,
            4059,
            6263,
            1734,
            5967,
            297,
            381,
            2041,
            3666,
            3582,
            2520,
            617,
            6087,
            258,
            1097,
            1475,
            3860,
            5946,
            6337,
            6962,
            843,
            2450,
            5095,
            5156,
            2803,
            726,
            3003,
            2961,
            3561,
            2255,
            41,
            4752,
            4860,
            6476,
            4543,
            5651,
            818,
            5981,
            6299,
            4947,
            2680,
            5719,
            5331,
            4568,
            1782,
            3859,
            6787,
            547,
            6745,
            5689,
            3883,
            2847,
            1711,
            1063,
            5210,
            6810,
            3952,
            2122,
            239,
            5484,
            3505,
            4039,
            2257,
            5000,
            6482,
            2090,
            6153,
            507,
            655,
            2332,
            5520,
            2743,
            4599,
            5569,
            4097,
            1092,
            5062,
            1015,
            974,
            3482,
            6878,
            99,
            5795,
            5844,
            2759,
            4445,
            3667,
            5327,
            1678,
            3813,
            6389,
            3947,
            80,
            4164,
            6012,
            3545,
            5684,
            1053,
            1184,
            5216,
            6034,
            2088,
            6540,
            639,
            3576,
            1532,
            1581,
            1009,
            4199,
            3862,
            7114,
            4915,
            3101,
            1470,
            5888,
            6465,
            1580,
            6452,
            590,
            6194,
            2471,
            3731,
            4546,
            338,
            54,
            5451,
            5960,
            1771,
            164,
            1483,
            1150,
            3912,
            3788,
            6397,
            6834,
            963,
            138,
            5165,
            3099,
            5629,
            783,
            6734,
            2110,
            2693,
            1941,
            5413,
            3617,
            3842,
            574,
            4730,
            5253,
            824,
            3218,
            5807,
            98,
            6522,
            1899,
            61,
            2277,
            4071,
            6370,
            1359,
            2859,
            4598,
            2636,
            6932,
            5593,
            3277,
            786,
            249,
            6656,
            4344,
            493,
            6006,
            3050,
            3084,
            6364,
            3252,
            6642,
            1551,
            1429,
            3201,
            4178,
            804,
            6453,
            2736,
            4649,
            2060,
            6697,
            2879,
            4738,
            911,
            6805,
            2654,
            1987,
            2871,
            144,
            6534,
            2773,
            4441,
            3772,
            3467,
            5503,
            2965,
            6237,
            3430,
            3523,
            7027,
            2059,
            487,
            3611,
            3573,
            1940,
            6361,
            3960,
            4290,
            5656,
            2923,
            4023,
            2342,
            866,
            4707,
            4841,
            3517,
            5311,
            6952,
            6127,
            5002,
            3525,
            5852,
            3487,
            2964,
            708,
            4979,
            4724,
            6874,
            1095,
            2168,
            6633,
            4611,
            3600,
            4377,
            3765,
            7002,
            1132,
            2341,
            2550,
            6172,
            2610,
            5431,
            5277,
            681,
            2067,
            1632,
            2606,
            916,
            2021,
            3945,
            4945,
            2536,
            5502,
            6226,
            2316,
            1306,
            4465,
            6844,
            947,
            2370,
            261,
            4670,
            1655,
            3872,
            3492,
            1448,
            5103,
            2280,
            3087,
            2565,
            2448,
            4342,
            3092,
            5979,
            5404,
            3098,
            5226,
            1691,
            1703,
            6356,
            6233,
            2981,
            3922,
            6684,
            4477,
            5949,
            933,
            196,
            4842,
            5279,
            833,
            5248,
            2990,
            5846,
            5068,
            3830,
            1719,
            914,
            2331,
            3198,
            4575,
            5402,
            2344,
            2208,
            468,
            674,
            1559,
            2522,
            4587,
            4266,
            3767,
            4166,
            5139,
            5383,
            7145,
            1108,
            5643,
            1364,
            3642,
            6011,
            4037,
            5379,
            1763,
            94,
            3651,
            4020,
            1348,
            1498,
            3877,
            3185,
            1993,
            2365,
            1286,
            6353,
            758,
            2870,
            2810,
            616,
            669,
            2943,
            6019,
            7023,
            1548,
            4929,
            1478,
            2109,
            3089,
            6333,
            2913,
            1100,
            6789,
            4749,
            3396,
            3409,
            6706,
            3770,
            6494,
            3705,
            2214,
            4680,
            6417,
            329,
            477,
            6068,
            5345,
            4772,
            4452,
            2443,
            3886,
            126,
            3324,
            26,
            3335,
            2310,
            2614,
            3869,
            6250,
            678,
            6035,
            1560,
            1039,
            1661,
            1859,
            342,
            271,
            1653,
            365,
            903,
            4750,
            4104,
            4080,
            2321,
            68,
            3255,
            4836,
            1925,
            5023,
            4868,
            375,
            6312,
            3660,
            2218,
            3395,
            5696,
            5993,
            2230,
            1781,
            6606,
            1431,
            3376,
            1157,
            4591,
            114,
            5498,
            2521,
            244,
            915,
            2115,
            4395,
            3184
        ],
        "test": [
            5195,
            1363,
            3750,
            2623,
            2162,
            5993,
            7128,
            2058,
            5363,
            5716,
            1255,
            5398,
            3658,
            4706,
            4506,
            3428,
            4563,
            4676,
            3149,
            5944,
            6936,
            6171,
            1654,
            3733,
            3795,
            276,
            5286,
            3140,
            3598,
            5707,
            6895,
            70,
            771,
            530,
            1533,
            6227,
            7021,
            4673,
            4872,
            6542,
            3081,
            2756,
            4712,
            5060,
            38,
            3508,
            1554,
            2731,
            1900,
            2460,
            2939,
            731,
            5961,
            156,
            1453,
            4912,
            2516,
            1270,
            224,
            5483,
            3424,
            1985,
            6502,
            2011,
            5073,
            3194,
            6133,
            5297,
            3563,
            3970,
            1290,
            3740,
            1892,
            5686,
            7084,
            2175,
            3073,
            3074,
            1736,
            6783,
            2613,
            4569,
            4404,
            6288,
            1457,
            5704,
            7137,
            3182,
            593,
            124,
            3066,
            2017,
            1140,
            1172,
            1995,
            3251,
            1259,
            3484,
            6161,
            5856,
            2368,
            5969,
            2140,
            6456,
            2026,
            5336,
            3307,
            6327,
            2310,
            5375,
            286,
            4816,
            5431,
            5039,
            4994,
            6254,
            1160,
            1702,
            1180,
            206,
            6395,
            1848,
            3434,
            5950,
            2337,
            4530,
            3304,
            2549,
            5154,
            452,
            2829,
            2241,
            888,
            5619,
            2038,
            1142,
            5782,
            2178,
            4583,
            4928,
            2967,
            380,
            2164,
            5731,
            1750,
            1830,
            1143,
            4310,
            4633,
            898,
            5738,
            878,
            1450,
            1362,
            4760,
            1914,
            2994,
            6904,
            2676,
            3234,
            5735,
            1022,
            3822,
            2986,
            2252,
            2640,
            6560,
            4818,
            1826,
            5304,
            4276,
            5911,
            2933,
            1957,
            3885,
            2892,
            526,
            1961,
            5516,
            6214,
            3699,
            779,
            5242,
            4110,
            6850,
            6446,
            5642,
            483,
            4474,
            517,
            5165,
            3855,
            2917,
            3891,
            1328,
            2761,
            3828,
            5729,
            6739,
            3363,
            5862,
            6526,
            3203,
            4806,
            2070,
            1570,
            2793,
            4431,
            1531,
            5296,
            7102,
            4400,
            1261,
            1454,
            1245,
            6774,
            6907,
            3937,
            5333,
            1357,
            3473,
            3910,
            5941,
            489,
            1442,
            2585,
            1916,
            2774,
            4992,
            5564,
            29,
            3989,
            3710,
            44,
            6297,
            6123,
            5549,
            3276,
            5530,
            578,
            6530,
            2703,
            4076,
            2188,
            3381,
            1281,
            1922,
            5798,
            5926,
            3935,
            4987,
            1952,
            361,
            3035,
            5407,
            6592,
            2768,
            5108,
            5611,
            4109,
            5257,
            5783,
            2726,
            1580,
            3407,
            5665,
            2588,
            7113,
            5722,
            3690,
            6953,
            6340,
            2455,
            6071,
            5664,
            2249,
            6315,
            548,
            1484,
            1399,
            72,
            5079,
            3380,
            5639,
            6358,
            2615,
            5109,
            5656,
            667,
            6771,
            1326,
            1452,
            6038,
            3043,
            4311,
            3051,
            1601,
            2293,
            2193,
            3042,
            6640,
            6742,
            6611,
            3884,
            4382,
            6760,
            4429,
            376,
            5849,
            5168,
            2898,
            6659,
            1624,
            6735,
            4247,
            2092,
            2006,
            5422,
            5920,
            874,
            2975,
            4449,
            202,
            4244,
            4418,
            6852,
            2340,
            6627,
            282,
            535,
            4238,
            6866,
            4115,
            3523,
            4324,
            6482,
            4346,
            6860,
            3539,
            2213,
            4759,
            4285,
            4911,
            6688,
            5699,
            1196,
            2602,
            1351,
            5353,
            1294,
            854,
            6117,
            1513,
            4615,
            7023,
            1790,
            495,
            780,
            4490,
            4743,
            6417,
            476,
            5160,
            629,
            3151,
            2539,
            5327,
            5972,
            2041,
            5929,
            3169,
            4772,
            4379,
            3545,
            1063,
            923,
            2429,
            3664,
            962,
            88,
            678,
            1523,
            4160,
            1939,
            1788,
            2591,
            3601,
            842,
            3570,
            4752,
            3010,
            4024,
            3376,
            965,
            2480,
            5633,
            2148,
            1277,
            4156,
            1045,
            4466,
            192,
            4430,
            2644,
            3654,
            852,
            4523,
            125,
            2179,
            2055,
            4166,
            1675,
            4910,
            3761,
            546,
            5684,
            5354,
            3184,
            737,
            6359,
            982,
            861,
            2943,
            1003,
            651,
            1700,
            3315,
            3836,
            6017,
            8,
            1586,
            2823,
            2134,
            704,
            4744,
            5122,
            6146,
            2578,
            6204,
            6159,
            2447,
            6545,
            296,
            2433,
            2481,
            7083,
            3325,
            1220,
            6366,
            1224,
            2235,
            2923,
            3092,
            2587,
            6999,
            6886,
            4473,
            1234,
            379,
            5770,
            1722,
            1246,
            5366,
            5040,
            272,
            6990,
            1748,
            533,
            2212,
            5325,
            849,
            487,
            3757,
            6367,
            318,
            1037,
            2457,
            6674,
            3723,
            2111,
            414,
            572,
            584,
            3714,
            917,
            269,
            3744,
            401,
            2650,
            1854,
            6937,
            2563,
            5615,
            4237,
            5206,
            3950,
            980,
            3614,
            3110,
            1216,
            5179,
            4719,
            2242,
            4349,
            4148,
            812,
            119,
            5833,
            2250,
            1941,
            4441,
            3991,
            2103,
            2890,
            4675,
            683,
            347,
            6683,
            7105,
            6752,
            5198,
            4013,
            5420,
            4133,
            6070,
            2339,
            6269,
            6991,
            6954,
            1041,
            3099,
            6,
            867,
            6855,
            4962,
            3634,
            176,
            2397,
            1421,
            4086,
            1536,
            6685,
            2580,
            963,
            4194,
            3993,
            2920,
            6262,
            695,
            388,
            2350,
            5621,
            3348,
            398,
            6658,
            5027,
            6916,
            601,
            5877,
            7020,
            1448,
            3656,
            1606,
            2265,
            2958,
            5155,
            3746,
            3214,
            6350,
            4070,
            2590,
            6767,
            4113,
            4010,
            3318,
            4340,
            5634,
            5443,
            5475,
            5685,
            4557,
            5599,
            409,
            238,
            1688,
            277,
            3235,
            2795,
            3181,
            1467,
            5990,
            5433,
            247,
            7099,
            6977,
            4246,
            4762,
            1578,
            3018,
            4394,
            2983,
            7153,
            3222,
            1644,
            5646,
            992,
            1189,
            1136,
            5301,
            4686,
            2325,
            3305,
            6634,
            5741,
            5340,
            1066,
            2190,
            2377,
            3457,
            1563,
            1668,
            2839,
            2818,
            5854,
            5139,
            1891,
            6864,
            527,
            3732,
            4518,
            2604,
            6549,
            2550,
            1545,
            1398,
            6027,
            1001,
            2141,
            1098,
            1013,
            5417,
            223,
            1837,
            3913,
            6540,
            5629,
            2200,
            4287,
            5246,
            4662,
            6449,
            1840,
            6663,
            3755,
            5520,
            3641,
            2078,
            6584,
            4097,
            1096,
            3021,
            1917,
            187,
            4330,
            713,
            994,
            4309,
            5982,
            1865,
            5612,
            3453,
            3025,
            7101,
            6737,
            3786,
            532,
            531,
            3498,
            6669,
            864,
            3495,
            2303,
            6647,
            3520,
            1555,
            3582,
            3431,
            5218,
            751,
            5787,
            6455,
            4408,
            5057,
            3977,
            4291,
            4957,
            1116,
            4424,
            818,
            6231,
            4943,
            1712,
            4946,
            826,
            3677,
            5022,
            3766,
            4804,
            916,
            3985,
            2518,
            1642,
            1170,
            6451,
            3925,
            5773,
            3879,
            4678,
            4121,
            3595,
            3904,
            1314,
            6139,
            1139,
            1568,
            6500,
            6287,
            2087,
            6114,
            263,
            1632,
            613,
            6820,
            5927,
            4205,
            4443,
            2048,
            5922,
            5007,
            2531,
            700,
            2601,
            1087,
            4314,
            3261,
            6715,
            4838,
            30,
            1824,
            719,
            5306,
            1171,
            3555,
            5261,
            4480,
            3924,
            4813,
            5871,
            2194,
            3059,
            7061,
            240,
            3503,
            4951,
            2279,
            5591,
            2039,
            2570,
            4337,
            3027,
            6531,
            6986,
            2004,
            3955,
            2247,
            4302,
            6055,
            987,
            5964,
            2843,
            5829,
            2672,
            4298,
            575,
            6135,
            3972,
            5492,
            5765,
            34,
            2830,
            5816,
            4447,
            1622,
            6875,
            170,
            6226,
            1091,
            220,
            4336,
            1718,
            3900,
            5220,
            4659,
            1741,
            1746,
            3270,
            4937,
            4749,
            4836,
            1036,
            891,
            3439,
            1870,
            7096,
            2476,
            3700,
            6097,
            6824,
            4733,
            1869,
            3609,
            2426,
            1034,
            144,
            415,
            3626,
            7082,
            6636,
            1051,
            4002,
            4827,
            2385,
            1364,
            1511,
            2709,
            2009,
            6666,
            5344,
            4035,
            2929,
            4860,
            1341,
            1817,
            3580,
            5373,
            5486,
            1828,
            6052,
            5326,
            1425,
            2619,
            3101,
            7092,
            3180,
            2714,
            2417,
            6578,
            5772,
            3873,
            1979,
            2223,
            6268,
            470,
            1086,
            6960,
            3014,
            405,
            1411,
            1625,
            1465,
            4550,
            4627,
            5135,
            5248,
            2877,
            464,
            1284,
            2559,
            4411,
            6257,
            5712,
            4769,
            5766,
            5694,
            5348,
            5667,
            1926,
            5900,
            3698,
            4500,
            2543,
            3375,
            3491,
            3050,
            528,
            2760,
            1515,
            2542,
            1168,
            6527,
            2259,
            6054,
            1564,
            3657,
            2137,
            2648,
            1887,
            3098,
            1526,
            2805,
            3789,
            3691,
            5339,
            6150,
            3079,
            3902,
            2122,
            1108,
            3152,
            1332,
            4126,
            6800,
            4805,
            661,
            912,
            4707,
            1455,
            1388,
            2797,
            4895,
            949,
            3013,
            210,
            4716,
            863,
            559,
            6441,
            2990,
            1815,
            6101,
            6109,
            2752,
            6148,
            1749,
            5255,
            811,
            1785,
            4995,
            6719,
            5759,
            3202,
            4692,
            1008,
            214,
            4672,
            5276,
            3487,
            1456,
            413,
            1573,
            381,
            2131,
            4637,
            4507,
            2972,
            6260,
            6110,
            1669,
            5292,
            6233,
            3696,
            142,
            3156,
            6600,
            4323,
            5271,
            33,
            5089,
            3771,
            3509,
            841,
            5389,
            3378,
            2784,
            6893,
            2043,
            4639,
            6283,
            311,
            3117,
            5785,
            6920,
            2081,
            2182,
            4019,
            3943,
            3875,
            2456,
            2211,
            6826
        ],
        "train": [
            4240,
            1723,
            3669,
            5481,
            5641,
            150,
            6941,
            5563,
            5732,
            6555,
            6615,
            1337,
            7016,
            7107,
            5125,
            6524,
            5448,
            5312,
            6841,
            5706,
            4567,
            1046,
            4704,
            1923,
            2987,
            6029,
            712,
            1758,
            6427,
            6478,
            1325,
            1381,
            4918,
            6995,
            1067,
            1372,
            477,
            2785,
            0,
            4368,
            7068,
            4754,
            6049,
            3186,
            2233,
            3399,
            2244,
            5937,
            1159,
            1040,
            250,
            6603,
            6689,
            6616,
            4807,
            3810,
            2561,
            1534,
            1786,
            3121,
            3395,
            5837,
            4667,
            5005,
            6229,
            4966,
            6174,
            2692,
            3767,
            6648,
            6058,
            5444,
            435,
            2069,
            4231,
            3060,
            1740,
            5362,
            329,
            4536,
            5376,
            5047,
            1021,
            6273,
            5412,
            4941,
            4843,
            2493,
            757,
            858,
            1329,
            1056,
            2347,
            107,
            1825,
            3930,
            1832,
            2007,
            5573,
            2405,
            99,
            2610,
            5534,
            254,
            1724,
            1446,
            614,
            674,
            6520,
            6105,
            4934,
            6948,
            549,
            1682,
            310,
            1997,
            2440,
            3094,
            5800,
            5268,
            6149,
            2133,
            6880,
            4101,
            3610,
            6349,
            1023,
            1059,
            671,
            1430,
            2068,
            5551,
            4558,
            2603,
            2690,
            7100,
            1505,
            3340,
            382,
            3661,
            2973,
            4720,
            89,
            1776,
            307,
            1499,
            1617,
            2326,
            5396,
            3382,
            6766,
            3128,
            2045,
            6923,
            3820,
            4758,
            4039,
            6568,
            1944,
            4997,
            6122,
            372,
            2922,
            6910,
            1975,
            6706,
            884,
            1435,
            6862,
            5758,
            4618,
            5838,
            1951,
            4781,
            6305,
            2144,
            727,
            455,
            1024,
            6624,
            6874,
            7003,
            1966,
            2546,
            961,
            6043,
            6194,
            2021,
            2622,
            2674,
            55,
            175,
            5370,
            5328,
            486,
            2685,
            4104,
            3361,
            7044,
            6651,
            2671,
            2712,
            6211,
            6270,
            3683,
            6040,
            2277,
            4080,
            3926,
            2305,
            2401,
            433,
            1999,
            2940,
            1628,
            4493,
            1902,
            1149,
            3708,
            4881,
            742,
            6697,
            5566,
            5821,
            4026,
            6387,
            2618,
            6280,
            3738,
            3464,
            1346,
            723,
            1820,
            4186,
            6205,
            5226,
            1507,
            3576,
            5923,
            995,
            1954,
            345,
            2439,
            795,
            5669,
            839,
            3887,
            2606,
            7123,
            366,
            3061,
            1858,
            7024,
            6582,
            226,
            1141,
            3915,
            3296,
            3812,
            603,
            5807,
            6223,
            5647,
            2904,
            6376,
            6322,
            2766,
            5469,
            83,
            2953,
            4100,
            2779,
            4413,
            6032,
            7013,
            5966,
            5439,
            5085,
            2554,
            3605,
            633,
            3145,
            5250,
            1350,
            1474,
            6890,
            3540,
            5136,
            1556,
            3029,
            4847,
            7133,
            3204,
            5701,
            696,
            6165,
            1480,
            829,
            63,
            832,
            3418,
            1839,
            278,
            2147,
            2427,
            2403,
            710,
            2256,
            7087,
            2057,
            2807,
            4534,
            3012,
            4646,
            1360,
            883,
            4242,
            4051,
            239,
            5654,
            2153,
            3824,
            6863,
            4198,
            3347,
            5364,
            5888,
            4890,
            3606,
            3489,
            3574,
            2851,
            763,
            1184,
            1565,
            6835,
            3436,
            830,
            560,
            7042,
            6701,
            28,
            6088,
            2721,
            3036,
            4969,
            6812,
            4505,
            513,
            5865,
            2424,
            6265,
            2464,
            2862,
            132,
            1097,
            3300,
            4830,
            2382,
            5799,
            6015,
            6596,
            6334,
            3880,
            6386,
            5066,
            2102,
            363,
            772,
            6749,
            7115,
            4630,
            6285,
            1107,
            1353,
            56,
            1773,
            4953,
            3134,
            6883,
            6295,
            5958,
            5162,
            3526,
            2062,
            975,
            5955,
            4392,
            6726,
            2395,
            3269,
            2209,
            463,
            6649,
            5186,
            5519,
            5275,
            5897,
            2891,
            3135,
            6661,
            7125,
            2379,
            1120,
            935,
            5205,
            2463,
            6602,
            2798,
            3223,
            3792,
            2533,
            6218,
            3781,
            5733,
            4520,
            6740,
            766,
            2528,
            6762,
            691,
            2023,
            5594,
            2927,
            2968,
            5392,
            6679,
            3450,
            3673,
            3507,
            4321,
            668,
            353,
            5688,
            5928,
            4009,
            7039,
            6434,
            106,
            7046,
            5780,
            561,
            1629,
            1033,
            5851,
            6619,
            5026,
            5882,
            4496,
            5805,
            377,
            6704,
            2072,
            2689,
            1998,
            494,
            6744,
            4798,
            2299,
            4799,
            3328,
            4503,
            6222,
            5181,
            2695,
            4213,
            540,
            567,
            2316,
            926,
            1648,
            814,
            3741,
            3945,
            1729,
            6141,
            1432,
            762,
            6987,
            3963,
            948,
            504,
            5499,
            3015,
            2492,
            4685,
            5184,
            6083,
            5429,
            3063,
            228,
            2352,
            6988,
            4343,
            5368,
            778,
            1469,
            4977,
            3193,
            4996,
            6232,
            491,
            822,
            1972,
            4823,
            3263,
            67,
            3816,
            2076,
            4123,
            5930,
            868,
            3974,
            5651,
            4668,
            3717,
            941,
            1801,
            3272,
            5554,
            3120,
            2018,
            3939,
            590,
            6299,
            403,
            6494,
            2255,
            602,
            3719,
            1276,
            1393,
            2871,
            3541,
            3287,
            6415,
            3754,
            3007,
            6873,
            1441,
            586,
            1201,
            2532,
            6738,
            3072,
            2781,
            1598,
            6282,
            6949,
            506,
            4181,
            6804,
            4644,
            927,
            4042,
            4144,
            7070,
            1119,
            1639,
            6753,
            2524,
            4562,
            196,
            5820,
            3949,
            4005,
            4515,
            3006,
            1124,
            2416,
            5042,
            4106,
            4740,
            2367,
            7001,
            5672,
            5537,
            3768,
            1306,
            2318,
            4037,
            4852,
            355,
            4455,
            4233,
            2419,
            4180,
            5940,
            1775,
            3647,
            3346,
            5789,
            4950,
            419,
            1492,
            4222,
            1240,
            3201,
            4266,
            2472,
            3625,
            2334,
            6450,
            6461,
            478,
            61,
            685,
            1243,
            4741,
            4163,
            3894,
            6408,
            7035,
            3088,
            1502,
            937,
            249,
            4401,
            877,
            4650,
            3592,
            6321,
            902,
            6382,
            3126,
            6053,
            5357,
            3621,
            2163,
            1609,
            6569,
            7066,
            4329,
            6438,
            6832,
            6594,
            4057,
            544,
            650,
            1129,
            3452,
            4647,
            3774,
            6169,
            1560,
            5587,
            2536,
            1305,
            5086,
            3478,
            1803,
            569,
            2989,
            2198,
            7026,
            5809,
            160,
            911,
            2357,
            5627,
            4262,
            2789,
            1071,
            3183,
            6082,
            4882,
            1439,
            4584,
            5885,
            1767,
            3364,
            5096,
            550,
            715,
            2529,
            6521,
            1473,
            7005,
            5682,
            2370,
            2474,
            592,
            485,
            1794,
            5100,
            316,
            5965,
            4779,
            3456,
            5044,
            7122,
            7126,
            4548,
            1717,
            2363,
            3168,
            2566,
            5213,
            2236,
            2199,
            4151,
            686,
            2662,
            7075,
            3125,
            2856,
            1635,
            4593,
            6780,
            5526,
            4484,
            4965,
            1018,
            6198,
            6906,
            1418,
            3988,
            3721,
            2471,
            4619,
            6087,
            5736,
            6572,
            2913,
            365,
            4944,
            360,
            6293,
            3045,
            2396,
            6014,
            4483,
            3805,
            2682,
            6459,
            3734,
            1711,
            6922,
            6903,
            1253,
            5795,
            5313,
            4045,
            5216,
            3044,
            734,
            5843,
            5474,
            1960,
            5254,
            354,
            6827,
            703,
            1737,
            434,
            2393,
            5015,
            2772,
            5034,
            4737,
            26,
            3628,
            5150,
            1652,
            4971,
            1757,
            6084,
            235,
            6694,
            2098,
            2421,
            6357,
            5739,
            6368,
            2715,
            5387,
            3577,
            7034,
            2054,
            3533,
            1127,
            3794,
            7011,
            1846,
            392,
            1409,
            4663,
            6457,
            6501,
            5606,
            3071,
            6956,
            4666,
            323,
            2053,
            6798,
            2822,
            2358,
            2034,
            4491,
            890,
            2409,
            40,
            4635,
            2627,
            5409,
            3371,
            5071,
            4571,
            422,
            193,
            4219,
            6463,
            5202,
            1754,
            4438,
            3662,
            6610,
            4524,
            6251,
            3102,
            3172,
            2282,
            3139,
            4046,
            4739,
            3461,
            4485,
            654,
            3956,
            3642,
            3004,
            2430,
            2138,
            7056,
            6934,
            3195,
            4699,
            892,
            6878,
            2607,
            6912,
            6031,
            610,
            943,
            5457,
            1053,
            4139,
            4819,
            508,
            1406,
            2598,
            3500,
            2544,
            4577,
            1566,
            5028,
            1781,
            2173,
            3250,
            6830,
            2112,
            6480,
            6343,
            3337,
            3502,
            6856,
            6692,
            2437,
            5063,
            3466,
            2821,
            5970,
            4014,
            3421,
            1445,
            3369,
            7036,
            2687,
            1680,
            5934,
            6794,
            4867,
            4851,
            6356,
            6394,
            1936,
            714,
            4029,
            1256,
            2645,
            5584,
            6751,
            6200,
            6565,
            5229,
            1552,
            950,
            7129,
            1223,
            6793,
            2143,
            2893,
            2820,
            4202,
            5687,
            4742,
            6805,
            2441,
            1482,
            6680,
            5652,
            5144,
            3454,
            6795,
            4172,
            2609,
            2957,
            3394,
            5440,
            236,
            242,
            4182,
            881,
            5517,
            3341,
            5574,
            246,
            2575,
            3231,
            4243,
            6848,
            4763,
            5912,
            2812,
            5988,
            3368,
            6263,
            5891,
            7015,
            5835,
            2130,
            1069,
            6665,
            6030,
            1419,
            764,
            2867,
            3556,
            387,
            4697,
            2718,
            6481,
            6741,
            2215,
            108,
            3109,
            4735,
            5648,
            2136,
            4622,
            6138,
            2051,
            457,
            7088,
            1318,
            5494,
            4365,
            1138,
            524,
            2341,
            2655,
            1251,
            5559,
            1735,
            5879,
            1638,
            6453,
            5194,
            6623,
            3749,
            3660,
            1671,
            1191,
            6558,
            3016,
            6468,
            3607,
            2908,
            4829,
            6670,
            4131,
            1690,
            2088,
            3017,
            7152,
            3002,
            1478,
            6621,
            2494
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "outOfSampleSplit": true,
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "wdi.popurb.mi",
        "ythbul4",
        "log1p(bnk.unrest)",
        "log1p(bnk.strikes)",
        "log1p(nvc.dosregt)",
        "nvc.ongoing",
        "civilwar"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10c_DENSE_Chen_Ulf_Resource_Mobilization_problem_TRAIN",
    "sampleSplitsDir": "/ravens_volume/test_data/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/TRAIN/problem_TRAIN",
    "sampleSplitsFile": "sampleSplits.csv",
    "sampleTrainTestRatio": 0.35,
    "selectedSolutions": {
        "d3m": [
            "27023"
        ]
    },
    "solutions": {
        "d3m": {
            "27023": {
                "created": "2019-11-10T22:57:20.534894+00:00",
                "details_url": "/d3m-service/stored-response/93b577df8359ad02dd87b810df246f3b4fb560af3e10e3cca2a304d9",
                "hash_id": "93b577df8359ad02dd87b810df246f3b4fb560af3e10e3cca2a304d9",
                "id": 27023,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:57:20.561990+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27023,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/0578fa28-2c61-48e8-b452-3dbd0abc2f34.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/f1b340e0-40f4-4098-88c9-a507a8e80759.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/82d26706-b2d8-4749-9a06-63dfeb3ed593.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27031": {
                "created": "2019-11-10T22:57:21.756098+00:00",
                "details_url": "/d3m-service/stored-response/e59468140b449fe8fdc5b05a773c798a13bdc77c0a00ac6f20e7577e",
                "hash_id": "e59468140b449fe8fdc5b05a773c798a13bdc77c0a00ac6f20e7577e",
                "id": 27031,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:57:21.814770+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27031,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/70a90459-13bc-46d3-8514-b196b9a8a273.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/0e3f63a9-502a-4b87-9762-dde04f32f759.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/7916bdce-2308-4117-8f58-f2f5b185a3f7.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27057": {
                "created": "2019-11-10T22:57:34.091906+00:00",
                "details_url": "/d3m-service/stored-response/f4a39685b22cca4fcfb7ef575db8109f98e3b069913a0eb4124e6879",
                "hash_id": "f4a39685b22cca4fcfb7ef575db8109f98e3b069913a0eb4124e6879",
                "id": 27057,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:57:34.115971+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27057,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/cbc5dc4c-e9c8-4577-8658-f22c67310dde.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/5761b11a-212e-4937-98f1-abbbf9bd88a0.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/a4a4ddfe-cc60-4132-bfcf-d197437464ae.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5082474648952484
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9938504695892334
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9416666626930237
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.753333330154419
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8370370268821716
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27061": {
                "created": "2019-11-10T22:57:35.425251+00:00",
                "details_url": "/d3m-service/stored-response/8c7e008a43762b9734e2f533d2e44f8c783be736f5609800affd6400",
                "hash_id": "8c7e008a43762b9734e2f533d2e44f8c783be736f5609800affd6400",
                "id": 27061,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:57:35.477508+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27061,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/5c4fe363-7ff2-49c2-9866-cee90e9bae94.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/0b39bb50-5446-483e-9989-e130b6287b5c.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/7ed573c6-f19f-4dcd-817f-297a66af3485.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5082474648952484
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9969252347946167
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9708333313465118
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8766666650772095
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9185185134410858
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27091": {
                "created": "2019-11-10T22:58:52.306203+00:00",
                "details_url": "/d3m-service/stored-response/fdf3f1b3f409dfb7f2f3183370ecd9023a7dc754ff31304b94bd9af9",
                "hash_id": "fdf3f1b3f409dfb7f2f3183370ecd9023a7dc754ff31304b94bd9af9",
                "id": 27091,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:58:52.337620+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "c6129373f12d8f13d08047c969ccfbe94ea26bc0659f1325331946cf4c3d8c35",
                                    "id": "08d0579d-38da-307b-8b75-6a213ef2972e",
                                    "name": "sklearn.preprocessing.data.MinMaxScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.min_max_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 2.0292221271029898
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "109"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27091,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/ea61d371-a3a2-44a3-a705-cccd89db29c9.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/8b051555-e194-4079-8755-2cc03f73d743.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/d75a8312-6256-4014-912d-380eeb48929b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5097483217716217
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9917539954185486
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8321167826652527
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7599999904632568
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.7944250702857971
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "27093": {
                "created": "2019-11-10T22:58:52.822018+00:00",
                "details_url": "/d3m-service/stored-response/888fbc10fe86310bde11cb9b34de6f0b1f0ed7a05a4a4b18174e922e",
                "hash_id": "888fbc10fe86310bde11cb9b34de6f0b1f0ed7a05a4a4b18174e922e",
                "id": 27093,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-10T22:58:52.844130+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.10.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "c6129373f12d8f13d08047c969ccfbe94ea26bc0659f1325331946cf4c3d8c35",
                                    "id": "08d0579d-38da-307b-8b75-6a213ef2972e",
                                    "name": "sklearn.preprocessing.data.MinMaxScaler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.min_max_scaler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "gamma": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 2.0292221271029898
                                                }
                                            }
                                        }
                                    },
                                    "n_components": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "109"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "aed26cb919668b14b7a98b687da09b2954c8d7a8272e992fc35a6a7f1ab8cd1c",
                                    "id": "0823123d-45a3-3dc8-9ef1-ff643236993a",
                                    "name": "sklearn.kernel_approximation.RBFSampler",
                                    "pythonPath": "d3m.primitives.data_preprocessing.rbf_sampler.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "n_neighbors": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "p": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "weights": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "distance"
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "13147d120ee15b7c2863228a17390fc892b674fb82f928e9ac8bbdfe7238fa32",
                                    "id": "754f7210-a0b7-3b7a-8c98-f43c7b663d28",
                                    "name": "sklearn.neighbors.classification.KNeighborsClassifier",
                                    "pythonPath": "d3m.primitives.classification.k_neighbors.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.9.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 27093,
                "produce": {
                    "partials": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/33a065a8-cf14-4c0a-9aee-674eb3145e7e.csv",
                    "test": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/d5bbf6b9-8538-4c2f-ab2a-bb2f3c8ad974.csv",
                    "train": "/ravens_volume/test_output/TR10c_DENSE_Chen_Ulf_Resource_Mobilization/temp/0060332d-f15e-43eb-b026-28b6b9c24cb4.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5097483217716217
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9958769977092743
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9160583913326263
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8799999952316284
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8972125351428986
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "rook": {}
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        }
    },
    "splitsFile": "dataSplits.csv",
    "stratified": true,
    "subTask": "multiClass",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "unedited": true
}