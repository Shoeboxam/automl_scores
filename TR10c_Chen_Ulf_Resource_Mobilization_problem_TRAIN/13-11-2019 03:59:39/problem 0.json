{
    "datasetIndices": {},
    "datasetPaths": {
        "all": "/ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv",
        "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv",
        "test": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv",
        "train": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
    },
    "datasetPathsManipulated": {},
    "datasetSchemas": {
        "all": "/ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/datasetDoc.json",
        "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/datasetDoc.json",
        "test": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/datasetDoc.json",
        "train": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/datasetDoc.json"
    },
    "datasetSchemasManipulated": {},
    "indices": {
        "all": [
            8056,
            3999,
            2245,
            8286,
            7971,
            3901,
            5873,
            5534,
            4737,
            1185,
            5771,
            6990,
            5577,
            7138,
            4856,
            616,
            2597,
            1830,
            4026,
            2541,
            3137,
            1370,
            5355,
            1012,
            5368,
            2023,
            6321,
            5903,
            4015,
            6149,
            1323,
            8139,
            174,
            7712,
            3182,
            4511,
            8340,
            1429,
            1756,
            3272,
            1564,
            739,
            7959,
            1487,
            2302,
            1600,
            5119,
            1791,
            4221,
            8133,
            5340,
            6864,
            5617,
            8212,
            7827,
            2561,
            1222,
            7078,
            5594,
            4818,
            3623,
            5091,
            6956,
            3413,
            3966,
            4556,
            5,
            865,
            7777,
            372,
            1516,
            2457,
            6442,
            5731,
            2922,
            2730,
            8384,
            1046,
            1243,
            2558,
            6695,
            4688,
            2840,
            6190,
            822,
            4829,
            2136,
            2847,
            5443,
            6482,
            2103,
            4302,
            8033,
            5422,
            6658,
            3921,
            2389,
            2052,
            5026,
            746,
            3855,
            4384,
            2105,
            3860,
            3414,
            5723,
            4217,
            3170,
            3343,
            666,
            5414,
            3595,
            8358,
            4736,
            6338,
            276,
            6736,
            2563,
            3135,
            2371,
            4545,
            2296,
            1458,
            7318,
            3171,
            450,
            5664,
            1589,
            1531,
            5351,
            1235,
            8183,
            4850,
            2795,
            4540,
            681,
            2659,
            5309,
            184,
            1153,
            7073,
            980,
            7497,
            1647,
            1180,
            7022,
            2872,
            3802,
            4219,
            1146,
            4403,
            155,
            6758,
            5761,
            6556,
            3581,
            2629,
            7879,
            8063,
            2988,
            6659,
            7668,
            3291,
            3857,
            6272,
            8243,
            8065,
            7676,
            2518,
            7736,
            3502,
            693,
            7074,
            801,
            2519,
            4072,
            6940,
            90,
            3748,
            7843,
            1724,
            7246,
            5585,
            1860,
            2148,
            4596,
            384,
            3828,
            5123,
            6041,
            5400,
            3806,
            6590,
            5051,
            1787,
            6273,
            1943,
            6682,
            3521,
            6701,
            2802,
            4111,
            7203,
            2460,
            4567,
            1389,
            7455,
            827,
            27,
            1644,
            4569,
            6112,
            6589,
            7728,
            2038,
            5442,
            2817,
            3289,
            1308,
            7529,
            3544,
            5089,
            898,
            5578,
            2531,
            4553,
            7223,
            6071,
            6394,
            1673,
            1517,
            2999,
            1305,
            4258,
            149,
            4764,
            7432,
            65,
            7310,
            5879,
            6980,
            4065,
            8099,
            6191,
            559,
            3540,
            5072,
            8027,
            1874,
            3296,
            6605,
            3079,
            5986,
            972,
            2353,
            6195,
            1976,
            6134,
            8032,
            5559,
            1637,
            6705,
            662,
            7681,
            4122,
            2813,
            2681,
            734,
            5127,
            3226,
            5838,
            6474,
            7019,
            6128,
            5865,
            950,
            4378,
            1693,
            5600,
            7435,
            8287,
            3435,
            4347,
            4758,
            4681,
            4184,
            7430,
            2727,
            7761,
            2632,
            2480,
            3670,
            3573,
            3940,
            7864,
            7621,
            6462,
            3773,
            8331,
            2650,
            7553,
            2924,
            6303,
            6429,
            4782,
            448,
            21,
            8093,
            775,
            1824,
            7029,
            4280,
            3822,
            46,
            4527,
            5320,
            1067,
            5097,
            1624,
            6449,
            130,
            1995,
            5566,
            2322,
            4900,
            6520,
            2791,
            3183,
            5924,
            3497,
            1353,
            820,
            4883,
            2263,
            2684,
            5605,
            1511,
            2030,
            4060,
            82,
            1592,
            8396,
            3968,
            2747,
            6915,
            3017,
            581,
            6976,
            2707,
            3388,
            2474,
            4225,
            2815,
            5357,
            5377,
            943,
            5425,
            7505,
            4127,
            6533,
            6954,
            1563,
            4887,
            5243,
            1568,
            1861,
            5266,
            6856,
            4308,
            587,
            4162,
            2410,
            209,
            6845,
            5948,
            6638,
            1953,
            7875,
            1978,
            7151,
            4163,
            2777,
            3661,
            6432,
            2571,
            4306,
            3466,
            2740,
            2957,
            3222,
            8217,
            227,
            3216,
            3665,
            6399,
            1126,
            808,
            5462,
            6979,
            1681,
            3072,
            36,
            3820,
            4040,
            3380,
            246,
            1630,
            3859,
            794,
            51,
            1794,
            7346,
            7999,
            1054,
            5658,
            8181,
            7550,
            1364,
            1521,
            2468,
            7069,
            485,
            2990,
            5553,
            3569,
            6697,
            259,
            6863,
            5081,
            1403,
            2464,
            4937,
            7741,
            8240,
            6029,
            3881,
            5572,
            3382,
            7823,
            2413,
            7845,
            6121,
            6407,
            782,
            6686,
            4005,
            3663,
            5493,
            8294,
            3217,
            5134,
            6616,
            3417,
            5319,
            6936,
            7344,
            5847,
            358,
            5555,
            5961,
            3719,
            2959,
            1700,
            5815,
            6717,
            7036,
            1500,
            3655,
            7244,
            7157,
            7125,
            4393,
            2140,
            7740,
            4770,
            7033,
            182,
            7326,
            7781,
            7787,
            5656,
            1734,
            1616,
            380,
            7263,
            7757,
            5071,
            2822,
            7235,
            506,
            2115,
            7507,
            1374,
            7534,
            4207,
            40,
            2663,
            4136,
            2572,
            6054,
            3523,
            8265,
            3080,
            116,
            2184,
            683,
            4193,
            6547,
            6129,
            2534,
            1773,
            2039,
            5047,
            1595,
            2568,
            2145,
            4061,
            6295,
            6870,
            4891,
            7434,
            253,
            6228,
            1002,
            6910,
            3399,
            3739,
            233,
            826,
            2940,
            8101,
            3209,
            608,
            4889,
            1433,
            7348,
            3158,
            5576,
            6485,
            4796,
            7221,
            5543,
            4664,
            2875,
            3025,
            4396,
            8005,
            1514,
            5053,
            7752,
            888,
            1285,
            4957,
            679,
            5620,
            1506,
            3394,
            6544,
            3053,
            6182,
            6580,
            8117,
            3266,
            4360,
            2031,
            4753,
            3548,
            389,
            6593,
            7819,
            5265,
            6849,
            2612,
            6930,
            6086,
            5027,
            243,
            8229,
            3601,
            6126,
            2512,
            262,
            3288,
            3550,
            7112,
            2214,
            1653,
            5370,
            5023,
            2569,
            680,
            2382,
            2231,
            2637,
            2738,
            4759,
            3119,
            3043,
            5360,
            4861,
            1798,
            6240,
            6319,
            661,
            75,
            7087,
            6304,
            5465,
            5229,
            4862,
            8011,
            874,
            3880,
            6551,
            6570,
            1056,
            167,
            7282,
            6080,
            505,
            4886,
            6414,
            3476,
            6140,
            2240,
            5754,
            1158,
            2386,
            783,
            2679,
            4525,
            659,
            1110,
            6157,
            3381,
            2343,
            2533,
            7499,
            8288,
            6262,
            6171,
            6909,
            1535,
            3029,
            5877,
            6132,
            5887,
            1408,
            8279,
            903,
            2494,
            1546,
            1933,
            2960,
            3979,
            8308,
            6843,
            1443,
            4718,
            2811,
            7131,
            4420,
            6766,
            4272,
            6413,
            6147,
            8235,
            1744,
            6006,
            7744,
            1865,
            1996,
            2247,
            8228,
            2530,
            5660,
            8051,
            6459,
            5586,
            3906,
            7443,
            833,
            4096,
            584,
            4200,
            7743,
            6446,
            3491,
            3957,
            6927,
            7473,
            3750,
            599,
            2721,
            7331,
            7230,
            2278,
            5677,
            1598,
            5604,
            1629,
            7817,
            1226,
            6744,
            3571,
            4014,
            279,
            4962,
            4328,
            3509,
            6177,
            7913,
            4690,
            2945,
            5967,
            4425,
            6894,
            4927,
            1720,
            2830,
            3672,
            4407,
            1584,
            6719,
            2406,
            480,
            7072,
            4913,
            5262,
            8136,
            5258,
            4956,
            1988,
            1622,
            6088,
            7165,
            8141,
            7050,
            2907,
            7924,
            2825,
            2723,
            4155,
            4025,
            2964,
            5079,
            4121,
            2892,
            1801,
            4597,
            1565,
            4075,
            6283,
            5353,
            4730,
            5608,
            8352,
            1174,
            41,
            6506,
            3920,
            7517,
            7057,
            3714,
            878,
            4677,
            6339,
            1340,
            181,
            1557,
            2748,
            4039,
            2861,
            5818,
            1816,
            1602,
            4555,
            3265,
            1599,
            3958,
            6492,
            5618,
            7415,
            3648,
            5846,
            4070,
            5046,
            33,
            5260,
            7262,
            7808,
            4968,
            3256,
            4442,
            7270,
            4019,
            1513,
            4108,
            2203,
            622,
            5439,
            6591,
            6412,
            1466,
            7335,
            7608,
            564,
            4109,
            807,
            7755,
            5755,
            3675,
            8187,
            1658,
            1241,
            3456,
            124,
            916,
            7988,
            5825,
            6254,
            3816,
            3673,
            3579,
            7972,
            4837,
            2824,
            1841,
            4273,
            2268,
            2158,
            4979,
            2267,
            4650,
            260,
            7889,
            2350,
            7485,
            6208,
            5467,
            1515,
            7961,
            293,
            4874,
            6307,
            951,
            121,
            1736,
            961,
            1725,
            2020,
            125,
            3021,
            5002,
            3849,
            1116,
            4651,
            4640,
            8376,
            5024,
            2109,
            7094,
            5500,
            5302,
            5536,
            5088,
            5111,
            7811,
            3281,
            1839,
            6115,
            7967,
            5118,
            4537,
            87,
            2523,
            1853,
            5031,
            8088,
            2950,
            509,
            7708,
            851,
            2293,
            3285,
            4160,
            4350,
            1428,
            1178,
            3208,
            3271,
            4572,
            2012,
            496,
            4585,
            1069,
            275,
            754,
            1654,
            4815,
            3008,
            595,
            2636,
            4926,
            7414,
            6081,
            238,
            5114,
            437,
            5796,
            6237,
            4435,
            7528,
            2562,
            4501,
            54,
            3738,
            744,
            118,
            5587,
            3819,
            4337,
            7789,
            7729,
            868,
            4165,
            321,
            5921,
            6124,
            5524,
            1971,
            6085,
            1797,
            8152,
            674,
            6480,
            1981,
            8176,
            8072,
            2548,
            15,
            6904,
            7496,
            4990,
            3322,
            7537,
            1503,
            948,
            3804,
            5867,
            987,
            8168,
            3681,
            4236,
            6210,
            4500,
            5892,
            3918,
            6644,
            5816,
            6683,
            4123,
            3830,
            3027,
            1329,
            6223,
            4260,
            2816,
            3352,
            1229,
            1464,
            4576,
            290,
            1351,
            2144,
            7290,
            6770,
            4547,
            7987,
            3824,
            4124,
            3982,
            5064,
            5973,
            4941,
            3059,
            2194,
            8304,
            2877,
            4263,
            7516,
            742,
            5366,
            4575,
            1135,
            7260,
            4342,
            6895,
            3004,
            1052
        ],
        "test": [
            7022,
            6740,
            7055,
            7098,
            6945,
            7100,
            6770,
            6973,
            7005,
            6947,
            7044,
            6750,
            6925,
            7151,
            7108,
            7010,
            6756,
            6773,
            6894,
            7072,
            6837,
            7084,
            7139,
            7057,
            6963,
            6916,
            6708,
            6934,
            6715,
            6949,
            6749,
            6946,
            6927,
            6689,
            6743,
            7145,
            7081,
            6682,
            6755,
            6979,
            6709,
            6935,
            7141,
            6838,
            7001,
            7023,
            7105,
            7018,
            6857,
            6998,
            6907,
            7007,
            7130,
            6701,
            6890,
            6884,
            7027,
            6735,
            6992,
            6685,
            6953,
            7092,
            6846,
            6970,
            6757,
            7132,
            6775,
            6995,
            7043,
            7030,
            6684,
            7024,
            6769,
            6918,
            6679,
            7038,
            6760,
            6842,
            6905,
            6758,
            7083,
            6718,
            7032,
            6989,
            6952,
            6951,
            7103,
            6762,
            7121,
            7097,
            6926,
            6863,
            6751,
            6937,
            6833,
            6913,
            7029,
            7036,
            6844,
            6712,
            7039,
            6938,
            7111,
            6881,
            6897,
            7136,
            6730,
            7152,
            6933,
            7082,
            6969,
            6860,
            6887,
            6892,
            6733,
            6896,
            7153,
            6967,
            7009,
            6706,
            7075,
            7078,
            6876,
            6840,
            6680,
            6742,
            6911,
            6845,
            7120,
            7140,
            7076,
            6872,
            7065,
            7148,
            7052,
            6972,
            6922,
            6971,
            6893,
            7133,
            7031,
            6871,
            7058,
            6924,
            6980,
            6912,
            6957,
            6954,
            7048,
            6699,
            6915,
            6774,
            6734,
            6928,
            7042,
            7034,
            6908,
            7096,
            6964,
            7107,
            7101,
            7040,
            6728,
            6848,
            6732,
            7119,
            7028,
            7085,
            7026,
            7126,
            7125,
            6878,
            7053,
            7067,
            6695,
            6993,
            6923,
            6909,
            6700,
            6694,
            7090,
            6678,
            6960,
            6744,
            6975,
            7021,
            7099,
            6727,
            6687,
            6748,
            6921,
            7144,
            6707,
            6698,
            6768,
            7122,
            6997,
            7106,
            6693,
            6869,
            6895,
            6889,
            6866,
            6990,
            7134,
            6753,
            7147,
            7025,
            6974,
            7113,
            6711,
            7086,
            6985,
            6761,
            6932,
            6929,
            6874,
            7069,
            7110,
            7150,
            6766,
            6966,
            6984,
            6981,
            6763,
            6875,
            6939,
            6713,
            7056,
            6919,
            6910,
            7064,
            6940,
            6745,
            6719,
            6904,
            6691,
            6847,
            7137,
            7128,
            7003,
            6880,
            7089,
            6767,
            6688,
            7033,
            6862,
            6754,
            6976,
            6930,
            7102,
            7127,
            6759,
            7135,
            6943,
            6944,
            6961,
            6958,
            6982,
            7146,
            6741,
            7088,
            6859,
            6888,
            6891,
            6864,
            6898,
            7129,
            7138,
            6710,
            6879,
            6843,
            6965,
            6931,
            6996,
            6942,
            6683,
            7070,
            6703,
            6839,
            6720,
            6702,
            6681,
            7131,
            7047,
            6731,
            6920,
            7020,
            6867,
            7074,
            6714,
            6977,
            7095,
            6936,
            6686,
            6747,
            7154,
            7049,
            6886,
            6765,
            6836,
            7046,
            6994,
            6865,
            6697,
            7000,
            6956,
            7109,
            6692,
            6988,
            7104,
            6858,
            6832,
            7004,
            6991,
            7142,
            6739,
            7094,
            6717,
            7050,
            6716,
            6738,
            7149,
            6704,
            6849,
            6696,
            7124,
            6917,
            6948,
            6914,
            6772,
            6841,
            6873,
            6950,
            6861,
            6835,
            6959,
            7006,
            7045,
            6736,
            7087,
            6705,
            6690,
            6764,
            7017,
            7059,
            6978,
            6999,
            7112,
            6856,
            6834,
            7011,
            6955,
            6877,
            6771,
            7037,
            7091,
            7002,
            6983,
            6882,
            6906,
            7080,
            7041,
            7008,
            7066,
            7093,
            7143,
            7035,
            6941,
            7071,
            6868,
            6729,
            6968,
            7019,
            6752,
            6746,
            6987,
            7123,
            7068,
            6986,
            7073,
            7051,
            7079,
            6883,
            6737,
            6885,
            7077,
            6962,
            6870,
            7054
        ],
        "train": [
            749,
            1060,
            3403,
            5232,
            3341,
            4262,
            3470,
            2275,
            3578,
            2465,
            6458,
            2601,
            5554,
            3622,
            164,
            6657,
            2704,
            3787,
            4522,
            1937,
            783,
            4989,
            6447,
            4741,
            2012,
            5921,
            6578,
            5725,
            6269,
            4999,
            1087,
            2125,
            5574,
            6334,
            3123,
            3116,
            2460,
            1938,
            3957,
            5458,
            1074,
            5608,
            4987,
            5352,
            5236,
            2875,
            2658,
            6030,
            3663,
            2321,
            5729,
            5981,
            2249,
            5253,
            5951,
            2613,
            3195,
            1119,
            5478,
            4794,
            2676,
            902,
            4813,
            2880,
            6075,
            6327,
            991,
            787,
            4816,
            4848,
            1287,
            4589,
            2935,
            3709,
            2136,
            1957,
            582,
            2750,
            449,
            5099,
            6496,
            471,
            2728,
            6291,
            6335,
            2123,
            1776,
            32,
            1960,
            3662,
            384,
            2713,
            6400,
            4809,
            2055,
            2459,
            3650,
            1336,
            888,
            3128,
            189,
            825,
            3538,
            3725,
            1995,
            4486,
            6160,
            2992,
            3943,
            5892,
            1054,
            6091,
            141,
            5968,
            5507,
            4057,
            1450,
            6150,
            1238,
            5837,
            475,
            3802,
            1626,
            2535,
            1107,
            6626,
            3477,
            4611,
            453,
            968,
            3182,
            2289,
            226,
            5969,
            4619,
            2749,
            487,
            3965,
            2129,
            6072,
            229,
            46,
            3212,
            5119,
            2333,
            4500,
            6637,
            5740,
            2848,
            6243,
            2477,
            6634,
            5019,
            621,
            5055,
            5365,
            2191,
            1226,
            693,
            5051,
            2183,
            3252,
            869,
            6312,
            3926,
            6586,
            1532,
            4807,
            5903,
            1959,
            1222,
            1844,
            777,
            4280,
            1988,
            2883,
            4457,
            1140,
            1321,
            1567,
            2843,
            1198,
            2263,
            4690,
            4834,
            503,
            22,
            594,
            6663,
            4938,
            5306,
            812,
            139,
            4948,
            5634,
            2977,
            5728,
            1574,
            4678,
            6052,
            3018,
            4394,
            2119,
            1805,
            4667,
            2583,
            1618,
            5314,
            6184,
            3153,
            3074,
            1766,
            5746,
            4023,
            5143,
            3196,
            3091,
            6045,
            1320,
            692,
            2522,
            3201,
            2336,
            4027,
            4281,
            1958,
            2429,
            5760,
            116,
            5337,
            2518,
            1551,
            2335,
            1858,
            4504,
            5703,
            1180,
            4662,
            4955,
            6303,
            1698,
            6580,
            6089,
            1728,
            4817,
            5042,
            4130,
            5797,
            65,
            5508,
            3869,
            4307,
            4411,
            2859,
            273,
            510,
            6660,
            3434,
            3552,
            4109,
            4096,
            3119,
            4635,
            4715,
            972,
            796,
            3240,
            2931,
            3376,
            5231,
            5246,
            5299,
            4174,
            1347,
            3305,
            3067,
            317,
            2830,
            4608,
            617,
            1183,
            3250,
            2320,
            3146,
            6470,
            586,
            119,
            2299,
            4598,
            771,
            2555,
            2345,
            1700,
            6004,
            5304,
            1399,
            776,
            4686,
            6197,
            4986,
            3904,
            3399,
            613,
            5774,
            2156,
            2656,
            2106,
            4599,
            5997,
            666,
            817,
            2237,
            5681,
            5228,
            3651,
            3117,
            1027,
            2515,
            6080,
            5342,
            1491,
            3641,
            5983,
            3346,
            3025,
            3188,
            4764,
            681,
            4517,
            5394,
            5467,
            3227,
            3004,
            1344,
            5852,
            467,
            6512,
            5540,
            1596,
            5935,
            2117,
            342,
            5891,
            2030,
            20,
            1455,
            2356,
            1672,
            3334,
            3962,
            2001,
            4915,
            1815,
            5974,
            3700,
            3859,
            4114,
            2923,
            5794,
            6627,
            2439,
            9,
            891,
            5492,
            3126,
            6537,
            92,
            5880,
            6062,
            2322,
            1923,
            1133,
            3571,
            3778,
            3264,
            1534,
            6649,
            6337,
            4012,
            6656,
            1666,
            4797,
            294,
            5593,
            3076,
            4328,
            3475,
            4041,
            3908,
            4341,
            2411,
            2781,
            3285,
            4267,
            3087,
            4144,
            6128,
            285,
            2599,
            6199,
            2924,
            4173,
            994,
            5736,
            4274,
            2056,
            5303,
            4149,
            51,
            5563,
            6002,
            5445,
            1994,
            904,
            1712,
            6084,
            3996,
            1651,
            1503,
            5364,
            5818,
            4268,
            1327,
            152,
            5457,
            2976,
            3021,
            3163,
            5544,
            3905,
            4911,
            4582,
            775,
            1288,
            4645,
            2720,
            484,
            6650,
            357,
            4970,
            2373,
            1430,
            5947,
            2442,
            610,
            5242,
            2050,
            1780,
            3959,
            620,
            2365,
            1160,
            5122,
            4942,
            6126,
            4636,
            4420,
            6633,
            2972,
            1763,
            4927,
            5973,
            3621,
            4238,
            5631,
            2313,
            769,
            4820,
            5882,
            1850,
            6238,
            2890,
            2997,
            2959,
            3827,
            4427,
            1565,
            5097,
            2124,
            1847,
            6501,
            2103,
            5855,
            6267,
            4992,
            3473,
            1506,
            1934,
            6550,
            942,
            6628,
            1820,
            2721,
            5402,
            130,
            1578,
            2014,
            4991,
            5024,
            3900,
            6473,
            4400,
            961,
            1941,
            4217,
            3597,
            1285,
            5966,
            3430,
            5752,
            3431,
            2323,
            1619,
            2104,
            1999,
            2832,
            6541,
            6463,
            4768,
            5048,
            3759,
            2495,
            5220,
            3675,
            3085,
            6554,
            2360,
            788,
            5813,
            218,
            4836,
            1586,
            6406,
            1793,
            1500,
            1242,
            4890,
            5924,
            3414,
            1473,
            3011,
            1870,
            2860,
            5505,
            4184,
            1796,
            6632,
            3238,
            3282,
            5587,
            2524,
            2195,
            5479,
            2043,
            4835,
            4126,
            689,
            4508,
            3255,
            801,
            974,
            2574,
            3318,
            2114,
            125,
            3068,
            2756,
            4286,
            176,
            1935,
            5240,
            1587,
            5009,
            2363,
            6639,
            2702,
            4535,
            3421,
            3882,
            2868,
            2044,
            4718,
            4858,
            5455,
            4155,
            2458,
            1085,
            2623,
            4729,
            5755,
            4998,
            5777,
            1719,
            2013,
            1801,
            1109,
            2892,
            4406,
            1324,
            4870,
            4580,
            2464,
            2177,
            5590,
            3964,
            2361,
            5142,
            5904,
            2296,
            4520,
            27,
            4412,
            1709,
            4078,
            926,
            726,
            1143,
            3066,
            5890,
            4693,
            265,
            3072,
            3412,
            2108,
            3428,
            2145,
            5057,
            2856,
            1451,
            2210,
            843,
            2758,
            5061,
            3973,
            2581,
            3248,
            604,
            1518,
            2715,
            4079,
            5158,
            102,
            3863,
            6636,
            2184,
            2866,
            602,
            5388,
            3528,
            2245,
            509,
            3526,
            910,
            224,
            4722,
            894,
            4163,
            981,
            6031,
            6567,
            1150,
            2039,
            3010,
            1460,
            4091,
            3600,
            6246,
            6070,
            4766,
            5698,
            4699,
            4414,
            4655,
            3658,
            3436,
            28,
            3113,
            2351,
            2137,
            4369,
            3655,
            2777,
            3925,
            6140,
            967,
            3793,
            5742,
            3696,
            3575,
            2854,
            1665,
            505,
            461,
            6143,
            1514,
            3476,
            1153,
            2504,
            2938,
            2316,
            3595,
            785,
            3527,
            1118,
            2247,
            2737,
            3389,
            5419,
            5115,
            2120,
            4421,
            4480,
            1348,
            1303,
            3120,
            5828,
            1096,
            3274,
            280,
            6448,
            1174,
            4714,
            1416,
            2382,
            4782,
            828,
            469,
            2666,
            6211,
            3465,
            6194,
            2616,
            4859,
            145,
            3566,
            2600,
            5486,
            5087,
            3202,
            3616,
            1839,
            4270,
            6587,
            3499,
            748,
            5586,
            6274,
            5090,
            4506,
            1308,
            456,
            2143,
            5490,
            3297,
            3918,
            4382,
            675,
            958,
            4524,
            2586,
            1039,
            4031,
            2254,
            4296,
            3685,
            2620,
            3139,
            5868,
            1358,
            2227,
            3220,
            4510,
            5452,
            850,
            2475,
            4887,
            6186,
            6210,
            1559,
            5387,
            4145,
            5763,
            6178,
            3301,
            2190,
            3103,
            592,
            5405,
            5804,
            4814,
            3512,
            3253,
            3975,
            3515,
            4390,
            3797,
            5369,
            5938,
            1871,
            4969,
            1444,
            898,
            3841,
            2679,
            6604,
            1230,
            3503,
            2035,
            177,
            1228,
            2354,
            614,
            5559,
            3913,
            2175,
            5335,
            6060,
            1967,
            3570,
            1730,
            2203,
            4692,
            3197,
            5052,
            2909,
            3046,
            3061,
            1706,
            5069,
            5350,
            151,
            6218,
            3610,
            753,
            1392,
            5355,
            1034,
            5441,
            6454,
            6523,
            2696,
            225,
            4584,
            3894,
            2028,
            5339,
            2577,
            1835,
            3606,
            5412,
            370,
            254,
            1026,
            2842,
            6431,
            6129,
            4845,
            824,
            235,
            809,
            5347,
            6653,
            169,
            4407,
            3468,
            2589,
            5936,
            4743,
            2476,
            2462,
            5222,
            744,
            3746,
            1605,
            2872,
            580,
            4285,
            5689,
            1457,
            1349,
            233,
            1433,
            5655,
            5708,
            4823,
            3278,
            3562,
            1478,
            4971,
            1108,
            1411,
            1729,
            1598,
            1299,
            5649,
            6155,
            852,
            3179,
            4468,
            6,
            38,
            2528,
            2841,
            4961,
            5136,
            956,
            5680,
            6164,
            4663,
            1105,
            18,
            68,
            1660,
            3432,
            5943,
            1432,
            2478,
            5702,
            676,
            2813,
            290,
            622,
            5551,
            4521,
            2672,
            438,
            5446,
            756,
            5557,
            1983,
            4460,
            3998,
            2559,
            5113,
            6658,
            2485,
            2553,
            2147,
            6051,
            3697,
            5491,
            988,
            4731,
            3508,
            4458,
            1184,
            5719,
            4224,
            23,
            5082,
            2558,
            5963,
            6655,
            3472,
            4631,
            3429,
            127,
            3602,
            5370,
            5800,
            4143,
            2456,
            2327,
            501,
            1236,
            4299,
            2294,
            1325,
            2387,
            2619,
            2292,
            5298,
            919,
            6040,
            1570,
            2956,
            3834,
            819,
            955,
            392,
            2219,
            5711,
            5516,
            6149,
            2539,
            4039,
            4317,
            6302,
            4530,
            3607,
            5658,
            5735,
            2118,
            2498,
            2650,
            4984,
            6397,
            2178,
            1058,
            1679
        ]
    },
    "manipulations": [],
    "meaningful": false,
    "metric": "rocAuc",
    "metrics": [
        "accuracy",
        "precision",
        "recall",
        "f1"
    ],
    "pending": false,
    "predictors": [
        "log(wdi.pop)",
        "wdi.popurb.mi",
        "ythbul4",
        "log1p(bnk.unrest)",
        "log1p(bnk.strikes)",
        "log1p(nvc.dosregt)",
        "nvc.ongoing",
        "civilwar"
    ],
    "problemID": "problem 0",
    "provenanceID": "TR10c_Chen_Ulf_Resource_Mobilization_problem_TRAIN",
    "scoreOptions": {
        "evaluationMethod": "kFold",
        "folds": 10,
        "splitsFile": "dataSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "searchOptions": {
        "solutionsLimit": 5,
        "timeBoundSearch": 10
    },
    "selectedSolutions": {
        "d3m": [
            "29192"
        ],
        "h2o": [],
        "mlbox": [],
        "mljar-supervised": [],
        "tpot": []
    },
    "solutions": {
        "d3m": {
            "29050": {
                "created": "2019-11-13T08:55:33.081640+00:00",
                "details_url": "/d3m-service/stored-response/36c7dbf12900aad8fc70955214f5546fa08001ca25a39a89c51ae265",
                "hash_id": "36c7dbf12900aad8fc70955214f5546fa08001ca25a39a89c51ae265",
                "id": 29050,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:33.108686+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "1",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29050,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/0f089adc-3e4c-448b-897d-3234fa52b87f.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/03d4f441-b3c0-4071-a1e8-08cc251ad05e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29057": {
                "created": "2019-11-13T08:55:34.209140+00:00",
                "details_url": "/d3m-service/stored-response/5486f5d5e99be46e59e0b06f50336d4fc8308517fe8889e44422fb74",
                "hash_id": "5486f5d5e99be46e59e0b06f50336d4fc8308517fe8889e44422fb74",
                "id": 29057,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:34.285010+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "4",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.1.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "fddf9d4f8ed4adff089c90181c5d2bb76198ce45ecd54c2386d2544443f59917",
                                    "id": "36d5472c-e0a4-4ed6-a1d0-2665feacff39",
                                    "name": "Mean Baseline",
                                    "pythonPath": "d3m.primitives.classification.gaussian_classification.MeanBaseline",
                                    "version": "1.5.5"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29057,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/ff7208b1-9385-4c1a-ae62-fce499a7edcb.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/1e1be8a2-3531-4a16-b88b-dd6d74350b7e.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9790356159210205
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29078": {
                "created": "2019-11-13T08:55:46.636697+00:00",
                "details_url": "/d3m-service/stored-response/abf17f066d2fa6825d8e76338af5caac33ec4d83c2e05f41d710f396",
                "hash_id": "abf17f066d2fa6825d8e76338af5caac33ec4d83c2e05f41d710f396",
                "id": 29078,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:46.667181+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "7",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29078,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/e3ab2d5c-829e-47b0-b1d3-aef30decdfab.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/5aa85445-dd7f-4d95-88e9-f9a5d16592e9.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5082474648952484
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9938504695892334
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9416666626930237
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.753333330154419
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8370370268821716
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29082": {
                "created": "2019-11-13T08:55:48.080399+00:00",
                "details_url": "/d3m-service/stored-response/459a0b228193dcf840c53cd3b3948f51e0f6be61add2a9746af9722c",
                "hash_id": "459a0b228193dcf840c53cd3b3948f51e0f6be61add2a9746af9722c",
                "id": 29082,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:48.099395+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "8",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "bootstrap": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "criterion": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "gini"
                                                }
                                            }
                                        }
                                    },
                                    "max_features": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.5
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_leaf": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "1"
                                                }
                                            }
                                        }
                                    },
                                    "min_samples_split": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "n_estimators": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "100"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "warm_start": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bd28b291e285b3fc94410899197b87f535124c08a4ed00ca0af6eaa302c908c6",
                                    "id": "c8a28f02-ef4a-35a8-87f1-cf79980f5c3e",
                                    "name": "sklearn.ensemble.forest.ExtraTreesClassifier",
                                    "pythonPath": "d3m.primitives.classification.extra_trees.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29082,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/73099df4-5773-4a0e-8a93-ddac0fe9fe70.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/5a2e64e3-a80c-45ed-ae3b-6aa002264a6b.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5082474648952484
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9969252347946167
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9708333313465118
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8766666650772095
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9185185134410858
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29106": {
                "created": "2019-11-13T08:55:54.554654+00:00",
                "details_url": "/d3m-service/stored-response/cba7bc17e1c8d5c62ac5e01ffcaa0dfbc35f602a5cad239312b46089",
                "hash_id": "cba7bc17e1c8d5c62ac5e01ffcaa0dfbc35f602a5cad239312b46089",
                "id": 29106,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:54.582577+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "13",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.0001
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29106,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/890efa1d-cec3-4662-87f4-1afb021a7e53.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/ccccd3a7-89de-487a-a26d-ccc8fd0d1ae8.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5404627442359924
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9555555582046509
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1818181872367859
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3199999928474426
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.23188406229019165
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29108": {
                "created": "2019-11-13T08:55:54.971375+00:00",
                "details_url": "/d3m-service/stored-response/9b1784e231eb467e4a6079a8d0898dc48d7c84d19aed65f43f191ce8",
                "hash_id": "9b1784e231eb467e4a6079a8d0898dc48d7c84d19aed65f43f191ce8",
                "id": 29108,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:55:55.100751+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "14",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.0001
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29108,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/8adafb40-8e0a-4b7c-bb74-7ec1c668d753.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/cbafa724-94e2-41fc-91bc-d2503e66fcab.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5404627442359924
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9555555582046509
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1818181872367859
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3199999928474426
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.23188406229019165
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29134": {
                "created": "2019-11-13T08:56:11.296575+00:00",
                "details_url": "/d3m-service/stored-response/cec00c9d41cfbd29dd57b72d51af1ed332527aad9f086e55aa1e936a",
                "hash_id": "cec00c9d41cfbd29dd57b72d51af1ed332527aad9f086e55aa1e936a",
                "id": 29134,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:11.334473+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "19",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.6317878558201457
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00013852576966699972
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29134,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/8c968bc0-7dec-48fd-b582-3fefb625c492.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/b080df4e-9c95-4848-91c6-2bbc9fa8f600.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.547666871547699
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.945492684841156
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1428571492433548
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3199999928474426
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1975308656692505
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29138": {
                "created": "2019-11-13T08:56:11.906918+00:00",
                "details_url": "/d3m-service/stored-response/a769cb96802b7e9c9f03e1ddc8c289c7b2724a6ca79dab533ddd691b",
                "hash_id": "a769cb96802b7e9c9f03e1ddc8c289c7b2724a6ca79dab533ddd691b",
                "id": 29138,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:11.934985+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "20",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.6317878558201457
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.00013852576966699972
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29138,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/c149d841-8a6c-471b-a583-61d84f8e1bab.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/84772856-00d4-443c-93c3-b2186ff14ee4.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.547666871547699
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.945492684841156
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1428571492433548
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3199999928474426
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.1975308656692505
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29140": {
                "created": "2019-11-13T08:56:12.235613+00:00",
                "details_url": "/d3m-service/stored-response/51003079ea9891e192b1bf8229ab08b09bf54202457bb1d0a53925c2",
                "hash_id": "51003079ea9891e192b1bf8229ab08b09bf54202457bb1d0a53925c2",
                "id": 29140,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:12.258647+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "21",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.404814047666732
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.01738583809417619
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29140,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/1975bf00-5d56-4887-a7b2-b00c5804e27e.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/3b429471-d359-4150-8da0-d4c0400f90f4.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5806054711341858
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9189378023147583
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.10477941483259201
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3799999952316284
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.16426512598991394
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29146": {
                "created": "2019-11-13T08:56:12.749182+00:00",
                "details_url": "/d3m-service/stored-response/a3c47e390d0db52a6372e93643477640747dd758bb5bd5ecf3417ce2",
                "hash_id": "a3c47e390d0db52a6372e93643477640747dd758bb5bd5ecf3417ce2",
                "id": 29146,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:12.776419+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "22",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "3"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.404814047666732
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.01738583809417619
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29146,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/e4cbc4f8-c6eb-4e83-821b-f67b19f27930.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/d2effa1c-ff22-411f-b101-fda34c7117a5.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.5806054711341858
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.9130677878856659
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.10160845890641212
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.3999999910593033
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.16187939792871475
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29190": {
                "created": "2019-11-13T08:56:18.369106+00:00",
                "details_url": "/d3m-service/stored-response/8b2437e0febfa6ea1becad008a90d8a573bb15ae52879a709c5f18c5",
                "hash_id": "8b2437e0febfa6ea1becad008a90d8a573bb15ae52879a709c5f18c5",
                "id": 29190,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:18.401308+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "31",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7291963575811473
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.002628028799874811
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29190,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/6289415b-7a1c-4e9f-b388-1c8335d73033.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/d2d877de-5c29-4301-9918-04a5d13a75a3.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6228175640106202
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8304681777954102
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.05523012578487396
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4399999976158142
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.09814126044511795
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            },
            "29192": {
                "created": "2019-11-13T08:56:18.577504+00:00",
                "details_url": "/d3m-service/stored-response/4609be271a38f24923449b0de33e6d178c484e7343e143fc40bae0a6",
                "hash_id": "4609be271a38f24923449b0de33e6d178c484e7343e143fc40bae0a6",
                "id": 29192,
                "is_error": false,
                "is_finished": true,
                "modified": "2019-11-13T08:56:18.656090+00:00",
                "pipeline": {
                    "context": "EVALUATION",
                    "description": "",
                    "digest": "",
                    "id": "32",
                    "inputs": [
                        {
                            "name": "input dataset"
                        }
                    ],
                    "name": "",
                    "outputs": [
                        {
                            "data": "steps.9.produce",
                            "name": "output"
                        }
                    ],
                    "steps": [
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "inputs.0"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "6a80776d244347f0d29f4358df1cd0286c25f67e03a7e2ee517c6e853e6a9d1f",
                                    "id": "f31f8c1f-d1c5-43e5-a4b2-2ae4a761ef2e",
                                    "name": "Denormalize datasets",
                                    "pythonPath": "d3m.primitives.data_transformation.denormalize.Common",
                                    "version": "0.2.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.0.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "a141e6821de7ae586968b0986237745a5510850e6940cf946db9d50d3828b030",
                                    "id": "4b42ce1e-9b98-4a25-b68e-fad13311eb65",
                                    "name": "Extract a DataFrame from a Dataset",
                                    "pythonPath": "d3m.primitives.data_transformation.dataset_to_dataframe.Common",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.1.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "parse_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d95eb0ea8a5e6f9abc0965a97e9c4f5d8f74a3df591c11c4145faea3e581cd06",
                                    "id": "d510cb7a-1782-4f51-b44c-58f0236e47c7",
                                    "name": "Parses strings into their types",
                                    "pythonPath": "d3m.primitives.data_transformation.column_parser.DataFrameCommon",
                                    "version": "0.5.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/Attribute"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "https://metadata.datadrivendiscovery.org/types/TrueTarget"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.3.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "list": {
                                                        "items": [
                                                            {
                                                                "string": "http://schema.org/Integer"
                                                            },
                                                            {
                                                                "string": "http://schema.org/Float"
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "2dda31ef0452060bc55070204c5328927e2b2537a03afa6333607e3e4828ab26",
                                    "id": "4503a4c6-42f7-45a1-a1d4-ed69699cf5e1",
                                    "name": "Extracts columns by semantic type",
                                    "pythonPath": "d3m.primitives.data_transformation.extract_columns_by_semantic_types.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.5.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "strategy": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "string": "mean"
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "d6902b0ef72b4cd6fc5f79054f7a534404c708e1244e94a2713a9dd525c78eed",
                                    "id": "d016df89-de62-3c53-87ed-c06bb6a23cde",
                                    "name": "sklearn.impute.SimpleImputer",
                                    "pythonPath": "d3m.primitives.data_cleaning.imputer.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.6.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "degree": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "int64": "2"
                                                }
                                            }
                                        }
                                    },
                                    "include_bias": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "interaction_only": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": false
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "bca69a3ba3bb9ba1be76f541832d69e29aa70a31b59196ee56bea08a4ff85e4a",
                                    "id": "93acb44b-532a-37d3-987a-8e61a8489d77",
                                    "name": "sklearn.preprocessing.data.PolynomialFeatures",
                                    "pythonPath": "d3m.primitives.data_preprocessing.polynomial_features.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.7.produce"
                                        }
                                    },
                                    "outputs": {
                                        "container": {
                                            "data": "steps.4.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "reg_param": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.7291963575811473
                                                }
                                            }
                                        }
                                    },
                                    "tol": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "double": 0.002628028799874811
                                                }
                                            }
                                        }
                                    },
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "b1aea2e94497eaa8db309bc5d9ce47c95c49df52bf3934fcf3d1d399e06475dd",
                                    "id": "321dbf4d-07d9-3274-bd1b-2751520ed1d7",
                                    "name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
                                    "pythonPath": "d3m.primitives.classification.quadratic_discriminant_analysis.SKlearn",
                                    "version": "2019.6.7"
                                },
                                "users": []
                            }
                        },
                        {
                            "primitive": {
                                "arguments": {
                                    "inputs": {
                                        "container": {
                                            "data": "steps.8.produce"
                                        }
                                    },
                                    "reference": {
                                        "container": {
                                            "data": "steps.2.produce"
                                        }
                                    }
                                },
                                "hyperparams": {
                                    "use_semantic_types": {
                                        "value": {
                                            "data": {
                                                "raw": {
                                                    "bool": true
                                                }
                                            }
                                        }
                                    }
                                },
                                "outputs": [
                                    {
                                        "id": "produce"
                                    }
                                ],
                                "primitive": {
                                    "digest": "96382129c2d9e87a2c0ab0b477b410947e5644d4dfae24e905d16a72d32dc41b",
                                    "id": "8d38b340-f83f-4877-baaa-162f8e551736",
                                    "name": "Construct pipeline predictions output",
                                    "pythonPath": "d3m.primitives.data_transformation.construct_predictions.DataFrameCommon",
                                    "version": "0.3.0"
                                },
                                "users": []
                            }
                        }
                    ],
                    "users": []
                },
                "pipelineId": 29192,
                "produce": {
                    "all": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/2a50cb84-eec7-4519-8dcb-58d25452bfa2.csv",
                    "partials": "/ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/temp/150fb355-1957-4ee4-a320-773cfead3b5c.csv"
                },
                "scores": [
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ROC_AUC",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.6228175640106202
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "ACCURACY",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.8304681777954102
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "PRECISION",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.05523012578487396
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "RECALL",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.4399999976158142
                            }
                        }
                    },
                    {
                        "fold": 0,
                        "metric": {
                            "k": 0,
                            "metric": "F1",
                            "posLabel": ""
                        },
                        "randomSeed": 0,
                        "value": {
                            "raw": {
                                "double": 0.09814126044511795
                            }
                        }
                    }
                ],
                "sent_to_user": true,
                "status": "COMPLETE",
                "systemId": "d3m"
            }
        },
        "h2o": {
            "2b4888b7-7ac6-44de-9b95-85b4194463e7": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "2b4888b7-7ac6-44de-9b95-85b4194463e7",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ac4b4bd0-ebc8-466f-ace2-482fbf207b9a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/03e1e617-afc8-403d-9063-5adaafb241e2.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/68152a81-32d4-4b0c-b827-102a99f75eeb.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e74bfe61-1a5a-4b29-998a-b6e472314961.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ca8f3f4f-319d-45f3-9b5d-cc89639b3ef8.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d5cff94-df79-4571-b629-3eacdd5bb889.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d59a482e-d36c-46ba-9e65-f20d8dfe7dd4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/1406c5a4-8275-4a73-a4a6-12e17831ef7a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6346966452533904
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9681341719077569
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2621951219512195
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2866666666666667
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2738853503184714
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "6d86c746-4672-424a-a1a5-1bf69f602468": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "6d86c746-4672-424a-a1a5-1bf69f602468",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0e45e00c-2077-43fd-a1b9-ab0942915ec5.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7f4d845f-e08c-48a6-a940-45216ba2e559.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0c518d1d-6dee-4a32-a9bd-531a0245fc52.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/892cb3cb-34f1-47d9-b02c-98e1166a26ad.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e41e9d36-584d-47eb-9aea-5e2a4624d087.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5574b0c9-0be7-448e-9f1f-a86e23c333df.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5946538187009279
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9535988819007687
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.13306451612903225
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.22
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.16582914572864324
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "715648cb-60d7-44ab-899f-0621ea068db5": {
                "description": "glm-unsupervised",
                "model": "glm-unsupervised",
                "model_id": "715648cb-60d7-44ab-899f-0621ea068db5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4251bf49-f84d-4402-865d-02f067550a26.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2f5c8fcc-c604-4366-ba17-157ec906d643.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5dd41a81-faf7-4410-b451-dbaf7e8a8470.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c3dfdb3b-d453-414b-94d6-c8f868f40ddd.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6481a9c0-ab1f-4359-bb16-05d7057330e2.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8ecd4757-5327-4923-999d-5c2d67fdf20a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5636545324768022
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9503843466107617
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.09486166007905138
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.16
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.11910669975186104
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "9530af26-f0c0-48cb-90a4-6679bf15a4fc": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "9530af26-f0c0-48cb-90a4-6679bf15a4fc",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/9b851e41-9cc7-41c4-a0b7-a657e14f374f.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3e3cefc0-7fe6-4156-970d-3262fb1aa4d0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0bf46dba-8caf-4d18-b28d-f29ff11bd9c8.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fbf08845-d9dc-46f0-a6e0-085377315219.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6efe1144-f388-478b-ae4f-f303435337a5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/44a44cb3-8def-4069-a938-03ca457dde03.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d4dc5ced-4dde-4d96-bf9c-b53976ee180a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/80c4439c-2846-41b3-b22f-6652442023a1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5887937187723055
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9612858141160028
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.16042780748663102
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.17804154302670622
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "a979ec2e-7165-42a3-8a31-b3b58cf4b3f8": {
                "description": "stackedensemble-unsupervised",
                "model": "stackedensemble-unsupervised",
                "model_id": "a979ec2e-7165-42a3-8a31-b3b58cf4b3f8",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/54a5e0f8-9e5f-4315-a9db-502a5122d084.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/933b80c7-2531-4cc1-aa17-242c5748a4b3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/73ac150a-305c-4257-9500-c049e3b0bf98.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e5b09953-8e35-4ad2-8f14-ede2df24f7df.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/975408f9-4cad-4e3a-8631-a9aaf1fc30e5.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6a5ecf41-8bfb-4581-8dc3-e3a3c5819ed4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.6339471805852963
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9347309573724668
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.1162227602905569
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.32
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.1705150976909414
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "eecfabf9-7e91-4061-a6f4-2dbcf641bf33": {
                "description": "xgboost-unsupervised",
                "model": "xgboost-unsupervised",
                "model_id": "eecfabf9-7e91-4061-a6f4-2dbcf641bf33",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bdc9c74e-1cce-4625-988f-4ed2dc57476b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/002af9cb-809b-4bbc-bcf1-f9bf198ec4b1.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a4a1652b-dcdc-4f23-b2d0-0bc2b4ff04e4.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d86b496a-a99c-4cf1-8e86-065d3efee5e3.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e1551b3f-9070-4d09-82c8-90d20dd183cd.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/afc04a4d-de20-4ace-8e7f-0fecbc0f70cf.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ea888a71-ef04-4a42-a6ef-e49aefb9132e.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4c61686d-bcc6-4043-84bc-587b6bd4873b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5913847251962884
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9727463312368972
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.2815533980582524
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.19333333333333333
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.22924901185770746
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            },
            "f26bb146-9840-4de9-9b8a-b96428ee66c8": {
                "description": "drf-unsupervised",
                "model": "drf-unsupervised",
                "model_id": "f26bb146-9840-4de9-9b8a-b96428ee66c8",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8d60286b-1742-440b-960e-2a78f111cded.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/601c5284-c1b0-4f9d-b084-062868e44b64.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b9f2fa7e-c3b5-4343-8848-b359510dd880.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/08a285a6-7160-422f-a279-46350d5c40dd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a40ce82d-128c-4ac8-9d00-33b3b636956e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a61ce553-07d6-4ef6-9e2a-2bff5de8476b.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4ae0dbae-e5be-4720-bd87-f0b42f04d25a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/676b3761-4835-4e70-b83e-0027d34aa472.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.8799286224125624
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9948287910552062
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.991304347826087
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.76
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.860377358490566
                    }
                ],
                "search_id": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
                "system": "h2o"
            }
        },
        "mlbox": {
            "04883a91-263f-480e-9e5a-2db57d5ac799": {
                "description": "AdaBoostClassifier(algorithm='SAMME.R', base_estimator=None,\n          learning_rate=0.05, n_estimators=400, random_state=0)",
                "model": "AdaBoostClassifier",
                "model_id": "04883a91-263f-480e-9e5a-2db57d5ac799",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c8840ca6-709e-4e36-868d-52690514adb7.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/42be5369-46f9-4a5d-8b7c-d1d80f13bdb0.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/597a597f-962e-4e4f-a090-4a324a85a342.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3a130093-c85b-41d1-84ec-b7f13dfcb8fd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6ee164b4-8883-41c1-b850-848b6a82ddae.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/56958645-1bac-4a72-978e-3d2f639322e5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ef88412b-1cd8-4ae3-9788-89e7c3888355.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c10c6912-3385-4505-b139-05e41a99946b.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "86f58d4f-ff14-4ed1-affa-f9e18e40a00c": {
                "description": "ExtraTreesClassifier(bootstrap=True, class_weight=None, criterion='gini',\n           max_depth=10, max_features='sqrt', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=400, n_jobs=-1,\n           oob_score=False, random_state=0, verbose=0, warm_start=False)",
                "model": "ExtraTreesClassifier",
                "model_id": "86f58d4f-ff14-4ed1-affa-f9e18e40a00c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/eb4ddea0-6d27-4f8a-a526-5e35bef39c04.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/defda353-59df-4b4f-94fd-90d5190e765a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/147a1f5e-11d4-4bf1-b6e7-ccc9b827f100.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7b07b269-58fc-482c-9de6-1725e3d1ce57.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d05b7104-c968-4540-8da8-19459e1612eb.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e489740a-4913-4679-a199-983a943a8fc1.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4db25530-157d-43e8-af3b-86d93351b4e3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/99c15098-834e-4b72-9d97-610559a4e263.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "920bd5ea-7943-4e95-b35b-df0ad099d320": {
                "description": "LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n        importance_type='split', learning_rate=0.05, max_depth=-1,\n        min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n        n_estimators=500, n_jobs=-1, nthread=-1, num_leaves=31,\n        objective=None, random_state=None, reg_alpha=0.0, reg_lambda=0.0,\n        seed=0, silent=True, subsample=0.9, subsample_for_bin=200000,\n        subsample_freq=0)",
                "model": "LGBMClassifier",
                "model_id": "920bd5ea-7943-4e95-b35b-df0ad099d320",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/41410a6c-5d64-4133-b302-b80ea1cfad40.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/76822062-324d-4d56-b495-94c5e64a9298.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8e991b40-bbb1-4632-bf24-6c674a3c826a.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/a2cb8023-6187-4caa-ae7c-f6443c2676c5.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/991cf798-f8f4-4ea5-9780-6b121cae55cf.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/b8d97dd4-2837-4496-b72d-1de4268680b5.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/10b6deba-695c-494b-9ad9-32a5796aec17.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/72a32bdb-5423-4967-bab1-3569ea4eb303.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.496216965395632
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9716282320055905
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "9d72d7f4-c9e1-4dca-a9ee-0c973a0ae01f": {
                "description": "BaggingClassifier(base_estimator=None, bootstrap=False,\n         bootstrap_features=False, max_features=0.85, max_samples=0.9,\n         n_estimators=500, n_jobs=-1, oob_score=False, random_state=0,\n         verbose=0, warm_start=False)",
                "model": "BaggingClassifier",
                "model_id": "9d72d7f4-c9e1-4dca-a9ee-0c973a0ae01f",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/94831673-8903-448b-9423-266a860e23f8.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3e035fe3-fc22-4c17-af91-bbb9ab3000ac.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4d1de3f6-a877-4bba-afd1-f201951e0520.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fd25d8a4-eab1-44db-b992-d466eaac90d2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2ec500b5-a8dd-4835-bcd8-f50aa7284705.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8bf59612-9af3-43a8-845b-f6a8c55eb83d.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cf33d51f-eefc-42c5-8663-bd0156f42bbb.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ce0ee7d3-3caa-4889-83c6-90c608bbbea4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.4987865735240107
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.976659678546471
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "b3c37a82-bf7c-4cba-8fca-104c63d2bbb4": {
                "description": "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=-1,\n          penalty='l2', random_state=0, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)",
                "model": "LogisticRegression",
                "model_id": "b3c37a82-bf7c-4cba-8fca-104c63d2bbb4",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f45d2d3a-8f49-47dd-8a07-36cc2a18249a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e393554f-da21-42b4-98bc-ee2575aaf38a.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3460a592-9012-4493-a13a-efb52b933aa5.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/de20ac24-cce8-4731-8939-5f4fd995907f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c8a74ca3-de14-4056-8ad8-b13b6dbd60e3.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/e9e3eb12-bfc6-441d-b065-962819f31de6.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c590d879-bb3b-4203-9116-e7b39a4b3e67.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/43bc3a68-e8b0-4d14-bcc8-10f037080175.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "c714faa6-9fd5-4c1e-9cca-ac18fe6b17e0": {
                "description": "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=10, max_features='sqrt', max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, n_estimators=400, n_jobs=-1,\n            oob_score=False, random_state=0, verbose=0, warm_start=False)",
                "model": "RandomForestClassifier",
                "model_id": "c714faa6-9fd5-4c1e-9cca-ac18fe6b17e0",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f446f3d2-8869-41be-a12f-c904d13ee81b.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/5428f4d1-a6c7-41eb-aebc-e45631eda3c4.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/de9ecf5d-dff0-4dcc-9c40-d5c71c4198b1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/405fa71d-6217-4517-a1c8-ddf9f146cca1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/14c510ad-c510-4692-8b95-8c3297a0a84f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7b1bd7b5-e376-4d41-be00-145f7286e2b6.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c2c115f7-07f3-4252-8f41-c8a10cbb531a.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/13942fe1-fee9-40bb-bd2d-dd276bde1c16.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.49992862347988454
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9788958770090845
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            },
            "d4be706d-6291-4ddf-835b-e1b24dc5d905": {
                "description": "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n            max_features=None, max_leaf_nodes=None,\n            min_impurity_decrease=0.0, min_impurity_split=None,\n            min_samples_leaf=1, min_samples_split=2,\n            min_weight_fraction_leaf=0.0, presort=False, random_state=0,\n            splitter='best')",
                "model": "DecisionTreeClassifier",
                "model_id": "d4be706d-6291-4ddf-835b-e1b24dc5d905",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f4e13125-e8f1-48fe-a938-7f94e31f8715.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/16f94ba8-117d-4336-b146-51f9001911bf.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/f45e12ac-aed2-48d5-bde5-060d640977cd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4fa36935-3f08-4430-a86c-932ea33976bd.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/fcc2929f-60fc-43da-bb5f-a662c1338610.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ef29add9-a7dd-4100-a888-fcdbee3d5fd2.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4ed50497-ad21-426b-98d5-aed5d12137ee.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c01baa10-90e2-4fb9-a41a-f7bdbf5155f1.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5148941162838202
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9379454926624738
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0.03804642698077085
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0.07332867458653622
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0.04828514031711041
                    }
                ],
                "search_id": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
                "system": "mlbox"
            }
        },
        "mljar-supervised": {
            "27fcd76c-f9ae-43c6-93d7-60eed921f8c5": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7fc3546567b8>",
                "model": "Xgboost",
                "model_id": "27fcd76c-f9ae-43c6-93d7-60eed921f8c5",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7b9de7ba-ae38-4b80-84a9-9e2cc424cd26.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/72fc13c0-77c4-4dee-99f8-6167e57789a7.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/12308727-8f9e-453a-9b43-54c4d31e43e1.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ec00c878-f447-424c-b5f0-4bcbb99e7a3d.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/25662b03-a2ba-4924-888d-44f49e067080.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0ccb392e-4dc2-4a9d-aa06-f6784323234f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/6c0dc507-80a4-4bcf-9585-1af9193abfd5.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0ea49244-3d9d-4dcf-a7e1-996510c3b4f9.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "44c4566f-e477-4eb3-b168-18186a701882",
                "system": "mljar-supervised"
            },
            "67a7ce69-9389-4c36-b8eb-50a1bbd6e426": {
                "description": "<supervised.models.ensemble.Ensemble object at 0x7fc35d29c438>",
                "model": "Ensemble",
                "model_id": "67a7ce69-9389-4c36-b8eb-50a1bbd6e426",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3616f7b8-c2d2-486d-8531-03f6656a0281.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d527ed91-1196-4ea0-9c72-35fcbf3b82ce.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/50546eb9-90e4-4e50-869f-1dd6b1243d91.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/2cd4a90c-e855-4651-a24a-b1f41d1e9e6f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/c37383d8-e226-4f78-a00b-6adf2c2db8e4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d28c6d52-ec3b-45b6-a4f8-7de84a31c8c4.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "search_id": "44c4566f-e477-4eb3-b168-18186a701882",
                "system": "mljar-supervised"
            },
            "ae58c520-29b2-4efe-9834-350499664a34": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7fc242326e10>",
                "model": "Xgboost",
                "model_id": "ae58c520-29b2-4efe-9834-350499664a34",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/7a353966-250d-405b-b10c-48621f2dbc81.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/bb7c93bc-fa10-45f5-b558-ca01011d8037.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/90c8bb1b-e659-45b2-880d-561f83914369.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/40fc5a74-1ec6-479d-88a1-a7a90119cb4f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/4d113b34-e2d6-4606-aa69-9d09983ab7ac.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/205c513d-97f8-4a3b-a3e2-69db5b356c20.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/640eb829-5be5-4c82-96b6-4dec63449009.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/0aef0ad4-a6b7-46ed-8d1b-d620c9968ba3.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "44c4566f-e477-4eb3-b168-18186a701882",
                "system": "mljar-supervised"
            },
            "c1cbd87b-7e4a-414d-807a-540eca8811ed": {
                "description": "<supervised.iterative_learner_framework.IterativeLearner object at 0x7fc242328358>",
                "model": "Xgboost",
                "model_id": "c1cbd87b-7e4a-414d-807a-540eca8811ed",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/15fae8a3-1d78-4d1a-88a7-97f71d4f9590.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/d24f66ba-60ab-413c-af3e-239b01f138e1.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aceb0cbc-7c22-44a1-b8f2-dd9b6a3eb4d6.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ef8c1242-c6a8-490a-a31f-07f5a32ff9e2.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/67c51f10-4903-4d6d-9ac0-8e5a337b26f9.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/ddf868c3-aa4b-4c15-a499-8e67a02ccd44.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/35e24202-d00c-4347-9882-39a3a4c6a8af.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/566e6779-582e-4a57-955f-431405458705.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "44c4566f-e477-4eb3-b168-18186a701882",
                "system": "mljar-supervised"
            }
        },
        "tpot": {
            "34e2f787-23fa-4e4f-a84b-09e5bd2dd64c": {
                "description": "Pipeline(memory=None,\n     steps=[('logisticregression', LogisticRegression(C=10.0, class_weight=None, dual=True, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='warn',\n          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n          tol=0.0001, verbose=0, warm_start=False))])",
                "model": "Pipeline",
                "model_id": "34e2f787-23fa-4e4f-a84b-09e5bd2dd64c",
                "produce": [
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/cd818f9b-6e74-4967-99cb-f2bab376f455.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/46496cbc-f630-45a5-95e9-2227f2d76f78.csv",
                        "input": {
                            "name": "all",
                            "resource_uri": "file:///ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/dataset_TRAIN/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/be813ecd-072c-40f2-bcea-46992ce6689f.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/8a090a86-8faa-4c35-a48a-9e9954f88f9c.csv",
                        "input": {
                            "name": "test",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/test/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/aefe72cb-81d3-4606-8d5e-657371f7c54f.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/3aeef8c5-0445-4b2c-ba24-510de6855d0e.csv",
                        "input": {
                            "name": "train",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/train/ws_529/2019-11-13_03-40-21/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "RAW"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/039b77b3-3c3e-4363-8810-4ff9f72599b0.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    },
                    {
                        "configuration": {
                            "predict_type": "PROBABILITIES"
                        },
                        "data_pointer": "/ravens_volume/solvers/produce/39bd9ad8-2ad2-48a7-afe3-bce3e5ab69b7.csv",
                        "input": {
                            "name": "partials",
                            "resource_uri": "file:///ravens_volume/test_output/TR10c_Chen_Ulf_Resource_Mobilization/additional_inputs/partials/ws_529/2019-11-13_03-40-20/tables/learningData.csv"
                        }
                    }
                ],
                "scores": [
                    {
                        "metric": {
                            "metric": "ROC_AUC"
                        },
                        "target": "nvc.start.1",
                        "value": 0.5
                    },
                    {
                        "metric": {
                            "metric": "ACCURACY"
                        },
                        "target": "nvc.start.1",
                        "value": 0.9790356394129979
                    },
                    {
                        "metric": {
                            "metric": "PRECISION"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "RECALL"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    },
                    {
                        "metric": {
                            "metric": "F1"
                        },
                        "target": "nvc.start.1",
                        "value": 0
                    }
                ],
                "search_id": "f524be70-7cdb-4551-bbdc-9765174d43f4",
                "system": "tpot"
            }
        }
    },
    "solverState": {
        "d3m": {
            "message": "searching for solutions",
            "searchId": "1",
            "thinking": true
        },
        "h2o": {
            "elapsed_time": 71.35558485984802,
            "message": "search complete",
            "searchId": "ca7c2147-adf2-4485-8b7b-84397fa744bd",
            "thinking": false
        },
        "mlbox": {
            "elapsed_time": 145.61802196502686,
            "message": "search complete",
            "searchId": "cf571c9e-a96b-445a-9da6-f2468d4fa171",
            "thinking": false
        },
        "mljar-supervised": {
            "elapsed_time": 535.8624234199524,
            "message": "search complete",
            "searchId": "44c4566f-e477-4eb3-b168-18186a701882",
            "thinking": false
        },
        "tpot": {
            "elapsed_time": 41.039140939712524,
            "message": "search complete",
            "searchId": "f524be70-7cdb-4551-bbdc-9765174d43f4",
            "thinking": false
        }
    },
    "splitOptions": {
        "outOfSampleSplit": true,
        "splitsDir": "/ravens_volume/test_data/TR10c_Chen_Ulf_Resource_Mobilization/TRAIN/problem_TRAIN",
        "splitsFile": "sampleSplits.csv",
        "stratified": true,
        "trainTestRatio": 0.35
    },
    "subTask": "binary",
    "system": "solved",
    "tags": {
        "crossSection": [],
        "loose": [],
        "nominal": [],
        "time": [],
        "transformed": [],
        "weights": []
    },
    "targets": [
        "nvc.start.1"
    ],
    "task": "classification",
    "unedited": true
}